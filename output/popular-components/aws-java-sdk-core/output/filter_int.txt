<com.amazonaws.services.redshiftserverless.model.GetCredentialsRequest: void setDurationSeconds(java.lang.Integer)><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void setDurationSeconds(java.lang.Integer)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsRequest constructRequestForGetClusterCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest: void setDurationSeconds(java.lang.Integer)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest constructRequestForGetClusterCredentialsWithIAM(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.ClientConfiguration: void setProxyPort(int)><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.ClientConfiguration getProxyClientConfig(com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setDurationSeconds(java.lang.Integer)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
