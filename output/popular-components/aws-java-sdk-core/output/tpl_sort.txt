<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.v3.ConnectionFactoryImpl: java.util.List getParametersForStartup(java.lang.String,java.lang.String,java.util.Properties,boolean)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.v3.ConnectionFactoryImpl: java.util.List getParametersForStartup(java.lang.String,java.lang.String,java.util.Properties,boolean)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.v3.ConnectionFactoryImpl: java.util.List getParametersForStartup(java.lang.String,java.lang.String,java.util.Properties,boolean)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.v3.ConnectionFactoryImpl: java.util.List getParametersForStartup(java.lang.String,java.lang.String,java.util.Properties,boolean)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.v3.ConnectionFactoryImpl: java.util.List getParametersForStartup(java.lang.String,java.lang.String,java.util.Properties,boolean)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.NativeAuthPluginHelper: java.lang.String getNativeAuthPluginCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties setAuthProperties(com.amazon.redshift.util.RedshiftProperties,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties setAuthProperties(com.amazon.redshift.util.RedshiftProperties,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IamHelper: com.amazon.redshift.util.RedshiftProperties setIAMProperties(com.amazon.redshift.util.RedshiftProperties,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IamHelper: com.amazon.redshift.util.RedshiftProperties setIAMProperties(com.amazon.redshift.util.RedshiftProperties,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.utils.CheckUtils: void checkMissingAndThrows(java.lang.String,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin$1: java.lang.Object apply(java.util.List)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String formBasedAuthentication()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.CommonCredentialsProvider: void refresh()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.CommonCredentialsProvider: java.lang.String getIdpToken()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.IdpTokenAuthPlugin: void checkRequiredParameters()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.IdpTokenAuthPlugin: void checkRequiredParameters()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: void checkRequiredParameters()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: void checkRequiredParameters()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: void addParameter(java.lang.String,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: void addParameter(java.lang.String,java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazon.redshift.NativeTokenHolder processCreateTokenResult(com.amazonaws.services.ssooidc.model.CreateTokenResult)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: com.amazon.redshift.CredentialsHolder getCredentials()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void checkRequiredParameters()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void checkRequiredParameters()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void checkRequiredParameters()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.BrowserAzureCredentialsProvider: java.lang.String extractSamlAssertion(java.lang.String)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.BrowserAzureCredentialsProvider$1: java.lang.Object apply(java.util.List)>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)><---<com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String handleSamlAssertion(org.apache.http.impl.client.CloseableHttpClient,java.lang.String)>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String formBasedAuthentication()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String formBasedAuthentication()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.io.File extractExecutable()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.io.File extractExecutable()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.io.File extractExecutable()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.io.File extractExecutable()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String oktaAuthentication(org.apache.http.impl.client.CloseableHttpClient)>
<com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)><---<com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String oktaAuthentication(org.apache.http.impl.client.CloseableHttpClient)>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String formBasedAuthentication()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: java.lang.String getIdpToken()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: java.lang.String getIdpToken()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)><---<com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String getSamlAssertion()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.SdkClientException: void <init>(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.SdkClientException: void <init>(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.SdkClientException: void <init>(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.SdkClientException: void <init>(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.SdkClientException: void <init>(java.lang.String)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: com.amazon.redshift.CredentialsHolder getCredentials()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.SdkClientException: void <init>(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.AmazonClientException: void <init>(java.lang.String)><---<com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
<com.amazonaws.AmazonClientException: void <init>(java.lang.String)><---<com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
<com.amazonaws.AmazonClientException: void <init>(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.AmazonClientException: void <init>(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.AmazonClientException: void <init>(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.AmazonClientException: void <init>(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSAccessKeyId()><---<org.apache.hadoop.fs.s3a.adapter.V1ToV2AwsCredentialProviderAdapter: software.amazon.awssdk.auth.credentials.AwsCredentials convertToV2Credentials(com.amazonaws.auth.AWSCredentials)>
<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSAccessKeyId()><---<org.apache.hadoop.fs.s3a.adapter.V1ToV2AwsCredentialProviderAdapter: software.amazon.awssdk.auth.credentials.AwsCredentials convertToV2Credentials(com.amazonaws.auth.AWSCredentials)>
<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSAccessKeyId()><---<com.amazon.redshift.CredentialsHolder: java.lang.String getAWSAccessKeyId()>
<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSAccessKeyId()><---<com.mongodb.internal.authentication.AwsSdkV1CredentialSupplier: com.mongodb.AwsCredential get()>
<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSAccessKeyId()><---<com.mongodb.internal.authentication.AwsSdkV1CredentialSupplier: com.mongodb.AwsCredential get()>
<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSSecretKey()><---<org.apache.hadoop.fs.s3a.adapter.V1ToV2AwsCredentialProviderAdapter: software.amazon.awssdk.auth.credentials.AwsCredentials convertToV2Credentials(com.amazonaws.auth.AWSCredentials)>
<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSSecretKey()><---<org.apache.hadoop.fs.s3a.adapter.V1ToV2AwsCredentialProviderAdapter: software.amazon.awssdk.auth.credentials.AwsCredentials convertToV2Credentials(com.amazonaws.auth.AWSCredentials)>
<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSSecretKey()><---<com.amazon.redshift.CredentialsHolder: java.lang.String getAWSSecretKey()>
<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSSecretKey()><---<com.mongodb.internal.authentication.AwsSdkV1CredentialSupplier: com.mongodb.AwsCredential get()>
<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSSecretKey()><---<com.mongodb.internal.authentication.AwsSdkV1CredentialSupplier: com.mongodb.AwsCredential get()>
<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata(java.lang.String,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: java.lang.String getStoredMimeType(org.modeshape.jcr.value.BinaryValue)>
<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata(java.lang.String,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String)>
<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata(java.lang.String,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void setS3ObjectUserProperty(org.modeshape.jcr.value.BinaryKey,java.lang.String,java.lang.String)>
<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata(java.lang.String,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: java.lang.String getExtractedText(org.modeshape.jcr.value.BinaryValue)>
<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata(java.lang.String,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void removeValuesUnusedLongerThan(long,java.util.concurrent.TimeUnit)>
<com.amazonaws.auth.AWSCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()><---<org.apache.hadoop.fs.s3a.adapter.V1ToV2AwsCredentialProviderAdapter: software.amazon.awssdk.auth.credentials.AwsCredentials resolveCredentials()>
<com.amazonaws.auth.AWSCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.AWSCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.auth.AWSCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()><---<com.mongodb.internal.authentication.AwsSdkV1CredentialSupplier: com.mongodb.AwsCredential get()>
<com.amazonaws.services.s3.model.ObjectMetadata: java.util.Map getUserMetadata()><---<org.modeshape.jcr.value.binary.S3BinaryStore: void setS3ObjectUserProperty(org.modeshape.jcr.value.BinaryKey,java.lang.String,java.lang.String)>
<com.amazonaws.services.s3.model.ObjectMetadata: java.util.Map getUserMetadata()><---<org.modeshape.jcr.value.binary.S3BinaryStore: java.lang.String getExtractedText(org.modeshape.jcr.value.BinaryValue)>
<com.amazonaws.services.s3.model.ObjectMetadata: java.util.Map getUserMetadata()><---<org.modeshape.jcr.value.binary.S3BinaryStore: org.modeshape.jcr.value.BinaryValue storeValue(java.io.InputStream,boolean)>
<com.amazonaws.services.s3.model.ObjectMetadata: java.util.Map getUserMetadata()><---<org.modeshape.jcr.value.binary.S3BinaryStore: void removeValuesUnusedLongerThan(long,java.util.concurrent.TimeUnit)>
<com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)><---<com.amazon.redshift.plugin.BrowserAzureCredentialsProvider: java.lang.String extractSamlAssertion(java.lang.String)>
<com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)><---<com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
<com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)><---<com.amazon.redshift.plugin.BrowserAzureOAuth2CredentialsProvider: java.lang.String extractJwtAssertion(java.lang.String)>
<com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsResult: java.util.List getAssociations()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsResult: java.util.List getAssociations()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsResult: java.util.List getAssociations()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsResult: java.util.List getAssociations()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.ssooidc.model.RegisterClientResult: java.lang.Long getClientSecretExpiresAt()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.model.RegisterClientResult: java.lang.Long getClientSecretExpiresAt()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.model.RegisterClientResult: java.lang.Long getClientSecretExpiresAt()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: boolean isCachedRegisterClientResultValid(com.amazonaws.services.ssooidc.model.RegisterClientResult)>
<com.amazonaws.services.ssooidc.model.RegisterClientResult: java.lang.Long getClientSecretExpiresAt()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: boolean isCachedRegisterClientResultValid(com.amazonaws.services.ssooidc.model.RegisterClientResult)>
<com.amazonaws.auth.AWSSessionCredentials: java.lang.String getSessionToken()><---<org.apache.hadoop.fs.s3a.adapter.V1ToV2AwsCredentialProviderAdapter: software.amazon.awssdk.auth.credentials.AwsCredentials convertToV2Credentials(com.amazonaws.auth.AWSCredentials)>
<com.amazonaws.auth.AWSSessionCredentials: java.lang.String getSessionToken()><---<com.amazon.redshift.CredentialsHolder$SessionCredentialsHolder: java.lang.String getSessionToken()>
<com.amazonaws.auth.AWSSessionCredentials: java.lang.String getSessionToken()><---<com.mongodb.internal.authentication.AwsSdkV1CredentialSupplier: com.mongodb.AwsCredential get()>
<com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.client.builder.AwsClientBuilder setBuilderConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazonaws.client.builder.AwsClientBuilder)>
<com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.services.securitytoken.AWSSecurityTokenService buildSts(java.lang.String,java.lang.String,com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder,com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: com.amazonaws.client.builder.AwsClientBuilder withCredentials(com.amazonaws.auth.AWSCredentialsProvider)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: com.amazonaws.client.builder.AwsClientBuilder withCredentials(com.amazonaws.auth.AWSCredentialsProvider)><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: com.amazonaws.client.builder.AwsClientBuilder withCredentials(com.amazonaws.auth.AWSCredentialsProvider)><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: java.lang.Object build()><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: java.lang.Object build()><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: java.lang.Object build()><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMResult: java.util.Date getExpiration()><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMResult: java.util.Date getExpiration()><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMResult: java.util.Date getExpiration()><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMResult getClusterCredentialsResultV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,com.amazonaws.auth.AWSCredentialsProvider,int)>
<com.amazonaws.services.ssooidc.model.RegisterClientResult: com.amazonaws.http.SdkHttpMetadata getSdkHttpMetadata()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.model.RegisterClientResult: com.amazonaws.http.SdkHttpMetadata getSdkHttpMetadata()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.model.RegisterClientResult: com.amazonaws.http.SdkHttpMetadata getSdkHttpMetadata()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult fetchTokenResult(com.amazonaws.services.ssooidc.model.RegisterClientResult,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.CreateTokenResult: java.lang.Integer getExpiresIn()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazon.redshift.NativeTokenHolder processCreateTokenResult(com.amazonaws.services.ssooidc.model.CreateTokenResult)>
<com.amazonaws.services.ssooidc.model.CreateTokenResult: java.lang.Integer getExpiresIn()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazon.redshift.NativeTokenHolder processCreateTokenResult(com.amazonaws.services.ssooidc.model.CreateTokenResult)>
<com.amazonaws.services.ssooidc.model.CreateTokenResult: java.lang.Integer getExpiresIn()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazon.redshift.NativeTokenHolder processCreateTokenResult(com.amazonaws.services.ssooidc.model.CreateTokenResult)>
<com.amazonaws.services.s3.model.ObjectMetadata: void setContentType(java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String)>
<com.amazonaws.services.s3.model.ObjectMetadata: void setContentType(java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: org.modeshape.jcr.value.BinaryValue storeValue(java.io.InputStream,boolean)>
<com.amazonaws.services.s3.model.CopyObjectRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String)>
<com.amazonaws.services.s3.model.CopyObjectRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void setS3ObjectUserProperty(org.modeshape.jcr.value.BinaryKey,java.lang.String,java.lang.String)>
<com.amazonaws.services.s3.model.CopyObjectRequest: void setNewObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String)>
<com.amazonaws.services.s3.model.CopyObjectRequest: void setNewObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void setS3ObjectUserProperty(org.modeshape.jcr.value.BinaryKey,java.lang.String,java.lang.String)>
<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.CopyObjectResult copyObject(com.amazonaws.services.s3.model.CopyObjectRequest)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String)>
<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.CopyObjectResult copyObject(com.amazonaws.services.s3.model.CopyObjectRequest)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void setS3ObjectUserProperty(org.modeshape.jcr.value.BinaryKey,java.lang.String,java.lang.String)>
<com.amazonaws.services.s3.model.ObjectMetadata: void setUserMetadata(java.util.Map)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void setS3ObjectUserProperty(org.modeshape.jcr.value.BinaryKey,java.lang.String,java.lang.String)>
<com.amazonaws.services.s3.model.ObjectMetadata: void setUserMetadata(java.util.Map)><---<org.modeshape.jcr.value.binary.S3BinaryStore: org.modeshape.jcr.value.BinaryValue storeValue(java.io.InputStream,boolean)>
<com.amazonaws.services.redshiftserverless.model.GetCredentialsResult: java.util.Date getExpiration()><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshiftserverless.model.GetCredentialsResult: java.util.Date getExpiration()><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder standard()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder standard()><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.securitytoken.model.Credentials: java.util.Date getExpiration()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.securitytoken.model.Credentials: java.util.Date getExpiration()><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.securitytoken.model.Credentials: java.lang.String getAccessKeyId()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.securitytoken.model.Credentials: java.lang.String getAccessKeyId()><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.securitytoken.model.Credentials: java.lang.String getSecretAccessKey()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.securitytoken.model.Credentials: java.lang.String getSecretAccessKey()><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.securitytoken.model.Credentials: java.lang.String getSessionToken()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.securitytoken.model.Credentials: java.lang.String getSessionToken()><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: com.amazonaws.services.redshift.AmazonRedshiftClientBuilder standard()><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: com.amazonaws.services.redshift.AmazonRedshiftClientBuilder standard()><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsResult: java.util.Date getExpiration()><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsResult: java.util.Date getExpiration()><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsResult getClusterCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshift.model.DescribeClustersRequest: void <init>()><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeClustersRequest: void <init>()><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeClustersRequest: void setClusterIdentifier(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeClustersRequest: void setClusterIdentifier(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeClustersResult: java.util.List getClusters()><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeClustersResult: java.util.List getClusters()><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.Cluster: com.amazonaws.services.redshift.model.Endpoint getEndpoint()><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.Cluster: com.amazonaws.services.redshift.model.Endpoint getEndpoint()><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.Endpoint: java.lang.String getAddress()><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.Endpoint: java.lang.String getAddress()><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.Endpoint: java.lang.Integer getPort()><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.Endpoint: java.lang.Integer getPort()><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: void <init>()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: void <init>()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: void setCustomDomainName(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: void setCustomDomainName(java.lang.String)><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: java.lang.String getCustomDomainName()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: java.lang.String getCustomDomainName()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.Association: java.util.List getCertificateAssociations()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.Association: java.util.List getCertificateAssociations()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.CertificateAssociation: java.lang.String getClusterIdentifier()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.CertificateAssociation: java.lang.String getClusterIdentifier()><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.client.builder.AwsClientBuilder withCredentials(com.amazonaws.auth.AWSCredentialsProvider)><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.services.securitytoken.AWSSecurityTokenService buildSts(java.lang.String,java.lang.String,com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder,com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.client.builder.AwsClientBuilder withCredentials(com.amazonaws.auth.AWSCredentialsProvider)><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.services.securitytoken.AWSSecurityTokenService buildSts(java.lang.String,java.lang.String,com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder,com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: java.lang.Object build()><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.services.securitytoken.AWSSecurityTokenService buildSts(java.lang.String,java.lang.String,com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder,com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: java.lang.Object build()><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.services.securitytoken.AWSSecurityTokenService buildSts(java.lang.String,java.lang.String,com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder,com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.http.SdkHttpMetadata: int getHttpStatusCode()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.http.SdkHttpMetadata: int getHttpStatusCode()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult fetchTokenResult(com.amazonaws.services.ssooidc.model.RegisterClientResult,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.RegisterClientResult: java.lang.String getClientId()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult fetchTokenResult(com.amazonaws.services.ssooidc.model.RegisterClientResult,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.RegisterClientResult: java.lang.String getClientId()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: void openBrowser(java.lang.String,java.lang.String,com.amazonaws.services.ssooidc.model.RegisterClientResult)>
<com.amazonaws.services.ssooidc.model.CreateTokenResult: java.lang.String getAccessToken()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult fetchTokenResult(com.amazonaws.services.ssooidc.model.RegisterClientResult,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.CreateTokenResult: java.lang.String getAccessToken()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazon.redshift.NativeTokenHolder processCreateTokenResult(com.amazonaws.services.ssooidc.model.CreateTokenResult)>
<com.amazonaws.services.s3.model.S3ObjectSummary: java.lang.String getKey()><---<org.modeshape.jcr.value.binary.S3BinaryStore$1: org.modeshape.jcr.value.BinaryKey next()>
<com.amazonaws.services.s3.AmazonS3Client: void <init>(com.amazonaws.auth.AWSCredentials)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.s3.AmazonS3Client: void setEndpoint(java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.s3.AmazonS3Client: boolean doesBucketExist(java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.Bucket createBucket(java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getContentType()><---<org.modeshape.jcr.value.binary.S3BinaryStore: java.lang.String getStoredMimeType(org.modeshape.jcr.value.BinaryValue)>
<com.amazonaws.services.s3.AmazonS3Client: boolean doesObjectExist(java.lang.String,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: org.modeshape.jcr.value.BinaryValue storeValue(java.io.InputStream,boolean)>
<com.amazonaws.services.s3.model.ObjectMetadata: void <init>()><---<org.modeshape.jcr.value.binary.S3BinaryStore: org.modeshape.jcr.value.BinaryValue storeValue(java.io.InputStream,boolean)>
<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.PutObjectResult putObject(java.lang.String,java.lang.String,java.io.InputStream,com.amazonaws.services.s3.model.ObjectMetadata)><---<org.modeshape.jcr.value.binary.S3BinaryStore: org.modeshape.jcr.value.BinaryValue storeValue(java.io.InputStream,boolean)>
<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object getObject(java.lang.String,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: java.io.InputStream getInputStream(org.modeshape.jcr.value.BinaryKey)>
<com.amazonaws.services.s3.model.S3Object: com.amazonaws.services.s3.model.S3ObjectInputStream getObjectContent()><---<org.modeshape.jcr.value.binary.S3BinaryStore: java.io.InputStream getInputStream(org.modeshape.jcr.value.BinaryKey)>
<com.amazonaws.services.s3.model.ObjectMetadata: java.util.Date getLastModified()><---<org.modeshape.jcr.value.binary.S3BinaryStore: void removeValuesUnusedLongerThan(long,java.util.concurrent.TimeUnit)>
<com.amazonaws.services.s3.AmazonS3Client: void deleteObject(java.lang.String,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: void removeValuesUnusedLongerThan(long,java.util.concurrent.TimeUnit)>
<com.amazonaws.services.s3.iterable.S3Objects: com.amazonaws.services.s3.iterable.S3Objects inBucket(com.amazonaws.services.s3.AmazonS3,java.lang.String)><---<org.modeshape.jcr.value.binary.S3BinaryStore: java.lang.Iterable getAllBinaryKeys()>
<com.amazonaws.services.s3.iterable.S3Objects: java.util.Iterator iterator()><---<org.modeshape.jcr.value.binary.S3BinaryStore: java.lang.Iterable getAllBinaryKeys()>
<com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClientBuilder: com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClientBuilder standard()><---<com.amazon.redshift.core.ServerlessIamHelper: void <init>(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClientBuilder: com.amazonaws.client.builder.AwsClientBuilder withCredentials(com.amazonaws.auth.AWSCredentialsProvider)><---<com.amazon.redshift.core.ServerlessIamHelper: void <init>(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClientBuilder: java.lang.Object build()><---<com.amazon.redshift.core.ServerlessIamHelper: void <init>(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.redshiftserverless.model.GetWorkgroupRequest: void <init>()><---<com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
<com.amazonaws.services.redshiftserverless.model.GetWorkgroupRequest: void setWorkgroupName(java.lang.String)><---<com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
<com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClient: com.amazonaws.services.redshiftserverless.model.GetWorkgroupResult getWorkgroup(com.amazonaws.services.redshiftserverless.model.GetWorkgroupRequest)><---<com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
<com.amazonaws.services.redshiftserverless.model.GetWorkgroupResult: com.amazonaws.services.redshiftserverless.model.Workgroup getWorkgroup()><---<com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
<com.amazonaws.services.redshiftserverless.model.Workgroup: com.amazonaws.services.redshiftserverless.model.Endpoint getEndpoint()><---<com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
<com.amazonaws.services.redshiftserverless.model.Endpoint: java.lang.String getAddress()><---<com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
<com.amazonaws.services.redshiftserverless.model.Endpoint: java.lang.Integer getPort()><---<com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
<com.amazonaws.services.redshiftserverless.model.GetCredentialsRequest: void <init>()><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshiftserverless.model.GetCredentialsRequest: void setDurationSeconds(java.lang.Integer)><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshiftserverless.model.GetCredentialsRequest: void setDbName(java.lang.String)><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshiftserverless.model.GetCredentialsRequest: void setWorkgroupName(java.lang.String)><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshiftserverless.model.GetCredentialsRequest: void setCustomDomainName(java.lang.String)><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshiftserverless.model.GetCredentialsRequest: java.lang.String toString()><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClient: com.amazonaws.services.redshiftserverless.model.GetCredentialsResult getCredentials(com.amazonaws.services.redshiftserverless.model.GetCredentialsRequest)><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshiftserverless.model.GetCredentialsResult: java.lang.String getDbUser()><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshiftserverless.model.GetCredentialsResult: java.lang.String getDbPassword()><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.services.redshiftserverless.model.GetCredentialsResult: java.util.Date getNextRefreshTime()><---<com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
<com.amazonaws.auth.profile.ProfilesConfigFile: void <init>()><---<com.amazon.redshift.core.PluginProfilesConfigFile: void <init>(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.auth.profile.ProfilesConfigFile: java.util.Map getAllBasicProfiles()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.profile.internal.BasicProfile: boolean isRoleBasedProfile()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getRoleSourceProfile()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getPropertyValue(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.profile.internal.BasicProfile: java.util.Map getProperties()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.profile.internal.BasicProfile: boolean isProcessBasedProfile()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.ProcessCredentialsProvider$Builder builder()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getCredentialProcess()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.ProcessCredentialsProvider$Builder: com.amazonaws.auth.ProcessCredentialsProvider$Builder withCommand(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.ProcessCredentialsProvider$Builder: com.amazonaws.auth.ProcessCredentialsProvider build()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.ProcessCredentialsProvider: org.joda.time.DateTime getCredentialExpirationTime()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: void <init>(com.amazonaws.auth.profile.internal.BasicProfile)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getRoleArn()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getRoleSessionName()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getRoleExternalId()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.securitytoken.model.AssumeRoleRequest: void <init>()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.securitytoken.model.AssumeRoleRequest: com.amazonaws.services.securitytoken.model.AssumeRoleRequest withRoleArn(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.securitytoken.model.AssumeRoleRequest: com.amazonaws.services.securitytoken.model.AssumeRoleRequest withRoleSessionName(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.securitytoken.model.AssumeRoleRequest: com.amazonaws.services.securitytoken.model.AssumeRoleRequest withExternalId(java.lang.String)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.securitytoken.AWSSecurityTokenService: com.amazonaws.services.securitytoken.model.AssumeRoleResult assumeRole(com.amazonaws.services.securitytoken.model.AssumeRoleRequest)><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.securitytoken.model.AssumeRoleResult: com.amazonaws.services.securitytoken.model.Credentials getCredentials()><---<com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
<com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: void setClientConfiguration(com.amazonaws.ClientConfiguration)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: void setEndpointConfiguration(com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: void setRegion(java.lang.String)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.services.redshift.model.DescribeAuthenticationProfilesRequest: void <init>()><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.services.redshift.model.DescribeAuthenticationProfilesRequest: void setAuthenticationProfileName(java.lang.String)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.services.redshift.AmazonRedshift: com.amazonaws.services.redshift.model.DescribeAuthenticationProfilesResult describeAuthenticationProfiles(com.amazonaws.services.redshift.model.DescribeAuthenticationProfilesRequest)><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.services.redshift.model.DescribeAuthenticationProfilesResult: java.util.List getAuthenticationProfiles()><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.services.redshift.model.AuthenticationProfile: java.lang.String getAuthenticationProfileContent()><---<com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
<com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>(com.amazonaws.auth.profile.ProfilesConfigFile,java.lang.String)><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.auth.DefaultAWSCredentialsProviderChain: void <init>()><---<com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsResult: java.lang.String getDbUser()><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsResult: java.lang.String getDbPassword()><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMResult: java.lang.String getDbUser()><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMResult: java.lang.String getDbPassword()><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMResult: java.util.Date getNextRefreshTime()><---<com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
<com.amazonaws.services.redshift.AmazonRedshiftClient: com.amazonaws.services.redshift.model.DescribeClustersResult describeClusters(com.amazonaws.services.redshift.model.DescribeClustersRequest)><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.AmazonRedshift: com.amazonaws.services.redshift.model.DescribeClustersResult describeClusters(com.amazonaws.services.redshift.model.DescribeClustersRequest)><---<com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.AmazonRedshiftClient: com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsResult describeCustomDomainAssociations(com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest)><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.AmazonRedshift: com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsResult describeCustomDomainAssociations(com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest)><---<com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void <init>()><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsRequest constructRequestForGetClusterCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void setDurationSeconds(java.lang.Integer)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsRequest constructRequestForGetClusterCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void setDbName(java.lang.String)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsRequest constructRequestForGetClusterCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void setDbUser(java.lang.String)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsRequest constructRequestForGetClusterCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void setAutoCreate(java.lang.Boolean)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsRequest constructRequestForGetClusterCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void setDbGroups(java.util.Collection)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsRequest constructRequestForGetClusterCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void setCustomDomainName(java.lang.String)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsRequest constructRequestForGetClusterCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void setClusterIdentifier(java.lang.String)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsRequest constructRequestForGetClusterCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: java.lang.String toString()><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsRequest constructRequestForGetClusterCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.AmazonRedshift: com.amazonaws.services.redshift.model.GetClusterCredentialsResult getClusterCredentials(com.amazonaws.services.redshift.model.GetClusterCredentialsRequest)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsResult makeGetClusterCredentialsAPICall(com.amazonaws.services.redshift.model.GetClusterCredentialsRequest,com.amazonaws.services.redshift.model.GetClusterCredentialsResult,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest: void <init>()><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest constructRequestForGetClusterCredentialsWithIAM(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest: void setDurationSeconds(java.lang.Integer)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest constructRequestForGetClusterCredentialsWithIAM(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest: void setDbName(java.lang.String)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest constructRequestForGetClusterCredentialsWithIAM(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest: void setCustomDomainName(java.lang.String)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest constructRequestForGetClusterCredentialsWithIAM(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest: void setClusterIdentifier(java.lang.String)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest constructRequestForGetClusterCredentialsWithIAM(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest: java.lang.String toString()><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest constructRequestForGetClusterCredentialsWithIAM(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.redshift.AmazonRedshiftClient: com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMResult getClusterCredentialsWithIAM(com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMResult makeGetClusterCredentialsWithIAMAPICall(com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest,com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMResult,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.client.builder.AwsClientBuilder: void setClientConfiguration(com.amazonaws.ClientConfiguration)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.client.builder.AwsClientBuilder setBuilderConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazonaws.client.builder.AwsClientBuilder)>
<com.amazonaws.client.builder.AwsClientBuilder: void setEndpointConfiguration(com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.client.builder.AwsClientBuilder setBuilderConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazonaws.client.builder.AwsClientBuilder)>
<com.amazonaws.client.builder.AwsClientBuilder: void setRegion(java.lang.String)><---<com.amazon.redshift.core.IamHelper: com.amazonaws.client.builder.AwsClientBuilder setBuilderConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazonaws.client.builder.AwsClientBuilder)>
<com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: void setClientConfiguration(com.amazonaws.ClientConfiguration)><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.services.securitytoken.AWSSecurityTokenService buildSts(java.lang.String,java.lang.String,com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder,com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.client.builder.AwsClientBuilder withEndpointConfiguration(com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration)><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.services.securitytoken.AWSSecurityTokenService buildSts(java.lang.String,java.lang.String,com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder,com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: void setRegion(java.lang.String)><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.services.securitytoken.AWSSecurityTokenService buildSts(java.lang.String,java.lang.String,com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder,com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.ClientConfiguration: void <init>()><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.ClientConfiguration getProxyClientConfig(com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.ClientConfiguration: void setProxyHost(java.lang.String)><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.ClientConfiguration getProxyClientConfig(com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.ClientConfiguration: void setNonProxyHosts(java.lang.String)><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.ClientConfiguration getProxyClientConfig(com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.ClientConfiguration: void setProxyPort(int)><---<com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.ClientConfiguration getProxyClientConfig(com.amazon.redshift.logger.RedshiftLogger)>
<com.amazonaws.util.IOUtils: java.lang.String toString(java.io.InputStream)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
<com.amazonaws.util.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)><---<com.amazon.redshift.plugin.AdfsCredentialsProvider: java.io.File extractExecutable()>
<com.amazonaws.services.ssooidc.AWSSSOOIDCClientBuilder: com.amazonaws.services.ssooidc.AWSSSOOIDCClientBuilder standard()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazon.redshift.NativeTokenHolder getIdcToken()>
<com.amazonaws.services.ssooidc.AWSSSOOIDCClientBuilder: com.amazonaws.client.builder.AwsClientBuilder withRegion(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazon.redshift.NativeTokenHolder getIdcToken()>
<com.amazonaws.services.ssooidc.AWSSSOOIDCClientBuilder: java.lang.Object build()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazon.redshift.NativeTokenHolder getIdcToken()>
<com.amazonaws.services.ssooidc.model.RegisterClientRequest: void <init>()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.model.RegisterClientRequest: com.amazonaws.services.ssooidc.model.RegisterClientRequest withClientName(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.model.RegisterClientRequest: com.amazonaws.services.ssooidc.model.RegisterClientRequest withClientType(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.model.RegisterClientRequest: com.amazonaws.services.ssooidc.model.RegisterClientRequest withScopes(java.lang.String[])><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.model.RegisterClientRequest: com.amazonaws.services.ssooidc.model.RegisterClientRequest withIssuerUrl(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.model.RegisterClientRequest: com.amazonaws.services.ssooidc.model.RegisterClientRequest withRedirectUris(java.lang.String[])><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.model.RegisterClientRequest: com.amazonaws.services.ssooidc.model.RegisterClientRequest withGrantTypes(java.lang.String[])><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.AWSSSOOIDC: com.amazonaws.services.ssooidc.model.RegisterClientResult registerClient(com.amazonaws.services.ssooidc.model.RegisterClientRequest)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
<com.amazonaws.services.ssooidc.model.RegisterClientResult: java.lang.String getClientSecret()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult fetchTokenResult(com.amazonaws.services.ssooidc.model.RegisterClientResult,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.CreateTokenResult: com.amazonaws.http.SdkHttpMetadata getSdkHttpMetadata()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult fetchTokenResult(com.amazonaws.services.ssooidc.model.RegisterClientResult,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.CreateTokenRequest: void <init>()><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult getCreateTokenResult(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.CreateTokenRequest: com.amazonaws.services.ssooidc.model.CreateTokenRequest withClientId(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult getCreateTokenResult(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.CreateTokenRequest: com.amazonaws.services.ssooidc.model.CreateTokenRequest withClientSecret(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult getCreateTokenResult(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.CreateTokenRequest: com.amazonaws.services.ssooidc.model.CreateTokenRequest withCode(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult getCreateTokenResult(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.CreateTokenRequest: com.amazonaws.services.ssooidc.model.CreateTokenRequest withGrantType(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult getCreateTokenResult(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.CreateTokenRequest: com.amazonaws.services.ssooidc.model.CreateTokenRequest withCodeVerifier(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult getCreateTokenResult(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.model.CreateTokenRequest: com.amazonaws.services.ssooidc.model.CreateTokenRequest withRedirectUri(java.lang.String)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult getCreateTokenResult(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.ssooidc.AWSSSOOIDC: com.amazonaws.services.ssooidc.model.CreateTokenResult createToken(com.amazonaws.services.ssooidc.model.CreateTokenRequest)><---<com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.CreateTokenResult getCreateTokenResult(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void <init>()><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setSAMLAssertion(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setRoleArn(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setPrincipalArn(java.lang.String)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setDurationSeconds(java.lang.Integer)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.auth.AnonymousAWSCredentials: void <init>()><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.client.builder.AwsClientBuilder withClientConfiguration(com.amazonaws.ClientConfiguration)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.securitytoken.AWSSecurityTokenService: com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLResult assumeRoleWithSAML(com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest)><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLResult: com.amazonaws.services.securitytoken.model.Credentials getCredentials()><---<com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
<com.amazonaws.auth.DefaultAWSCredentialsProviderChain: com.amazonaws.auth.DefaultAWSCredentialsProviderChain getInstance()><---<com.mongodb.internal.authentication.AwsSdkV1CredentialSupplier: void <init>()>
