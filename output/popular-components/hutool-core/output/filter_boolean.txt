<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTenThousandLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatHundredMillionLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTrillionsLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTrillionsLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTrillionsLongTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTraditionalTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTraditionalTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTraditionalTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTraditionalTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(long,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTraditionalTest()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: java.lang.String[] getClassPathArray()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: java.lang.String[] getLibraryPathArray()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaRuntimeInfo: java.lang.String getProtocolPackages()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaSpecInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaSpecInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JavaSpecInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JvmInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JvmInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JvmInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JvmInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JvmSpecInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JvmSpecInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.JvmSpecInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.OsInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.OsInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.OsInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.OsInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.OsInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.OsInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.UserInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.UserInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.UserInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.UserInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.UserInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.UserInfo: void <init>()>
<cn.hutool.core.util.SystemPropsUtil: java.lang.String get(java.lang.String,boolean)><---<cn.hutool.system.UserInfo: void <init>()>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<com.aizuda.snailjob.common.log.dialect.console.Console: void printProgress(char,int,double)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.gear4j.core.utils.FileUtils: java.lang.String getContent(java.io.File)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.gear4j.core.utils.SystemUtils: java.lang.String updateSystemPath(java.lang.String)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.UrlUtils: java.lang.String encode(java.lang.String)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.UrlUtils: java.lang.String encode(java.lang.String,java.nio.charset.Charset)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.UrlUtils: java.lang.String encode(java.lang.String,java.lang.String)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.UrlUtils: java.lang.String encode(java.lang.String,java.lang.String)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.UrlUtils: java.lang.String decode(java.lang.String)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.UrlUtils: java.lang.String decode(java.lang.String,java.nio.charset.Charset)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.UrlUtils: java.lang.String decode(java.lang.String,java.lang.String)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.UrlUtils: java.lang.String decode(java.lang.String,java.lang.String)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.SystemUtils: java.lang.String updateSystemPath(java.lang.String)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.FileUtils: java.lang.String getContent(java.io.File)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.FileTypeUtils: java.lang.String getMimeType(java.io.File)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.FileTypeUtils: java.lang.String getSuffixByMimeType(java.lang.String)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.FileTypeUtils: java.lang.String getSuffixByMagic(java.io.File)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.cron.pattern.CronPatternUtil: java.util.List matchedDates(cn.hutool.cron.pattern.CronPattern,long,long,int,boolean)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.cron.pattern.matcher.BoolArrayMatcher: void <init>(java.util.List)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.extra.compress.extractor.SevenZExtractor: void extractInternal(java.io.File,int,cn.hutool.core.lang.Filter)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.extra.compress.extractor.StreamExtractor: void extractInternal(java.io.File,int,cn.hutool.core.lang.Filter)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.extra.ftp.SimpleFtpServer: cn.hutool.extra.ftp.SimpleFtpServer setPort(int)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.extra.ssh.JschUtil: com.jcraft.jsch.Session createSession(java.lang.String,int,java.lang.String,byte[],byte[])>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.extra.ssh.JschUtil: com.jcraft.jsch.Session createSession(com.jcraft.jsch.JSch,java.lang.String,int,java.lang.String)>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<com.yomahub.tlog.id.snowflake.UniqueIdGenerator: long generateId()>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.sax.handler.BeanRowHandler: void <init>(int,int,int,java.lang.Class)>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void <init>()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void putTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void removeTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void putAllTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void putAllTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void clearTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void getNodeValueTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void putAllNodeTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void putNodeTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void putLinkedNodesTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void putLinkedNodesTest2()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void linkNodesTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void unlinkNodeTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void getTreeNodesTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void getRootNodeTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void getDeclaredParentNodeTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void getParentNodeTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void containsParentNodeTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void containsChildNodeTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void getDeclaredChildNodesTest()>
<cn.hutool.core.map.LinkedForestMap: void <init>(boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void getChildNodesTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest2()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest2()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest3()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatMaxTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleMoneyTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleMoneyTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleMoneyTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleMoneyTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleMoneyTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleMoneyTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleNumberTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleNumberTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleNumberTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleNumberTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleNumberTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void singleNumberTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.cron.pattern.matcher.PatternMatcher: int getLastDay(int,int)>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.date.Month: int getLastDay(boolean)><---<cn.hutool.core.date.MonthTest: void getLastDayTest()>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<club.gclmit.chaos.core.utils.FileTypeUtils: java.lang.String byteToHex(byte[])>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.ExcelReader: void checkNotClosed()>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter merge(int,java.lang.Object,boolean)>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter merge(int,int,int,int,java.lang.Object,boolean)>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter merge(int,int,int,int,java.lang.Object,org.apache.poi.ss.usermodel.CellStyle)>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,boolean)>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter writeHeadRow(java.lang.Iterable)>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter writeRow(java.util.Map,boolean)>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Iterable)>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter writeCol(java.lang.Object,int,java.lang.Iterable,boolean)>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter flush(java.io.OutputStream,boolean)>
<cn.hutool.core.lang.Assert: void isFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.hutool.poi.word.Word07Writer: cn.hutool.poi.word.Word07Writer flush(java.io.OutputStream,boolean)>
<cn.hutool.core.convert.Convert: java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)><---<com.wangboot.core.web.utils.ServletUtils: java.lang.Boolean getParameterToBool(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Boolean)>
<cn.hutool.core.convert.Convert: java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)><---<cn.hutool.db.DbUtil: void setShowSqlGlobal(cn.hutool.setting.Setting)>
<cn.hutool.core.convert.Convert: java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)><---<cn.hutool.db.DbUtil: void setShowSqlGlobal(cn.hutool.setting.Setting)>
<cn.hutool.core.convert.Convert: java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)><---<cn.hutool.db.DbUtil: void setShowSqlGlobal(cn.hutool.setting.Setting)>
<cn.hutool.core.convert.Convert: java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)><---<cn.hutool.setting.AbsSetting: java.lang.Boolean getBool(java.lang.String,java.lang.String,java.lang.Boolean)>
<cn.hutool.core.convert.Convert: java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)><---<cn.hutool.setting.dialect.Props: java.lang.Boolean getBool(java.lang.String,java.lang.Boolean)>
<cn.hutool.core.convert.Convert: java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)><---<org.dromara.jpom.common.validator.ParameterInterceptor: boolean customize(org.springframework.web.method.HandlerMethod,org.springframework.core.MethodParameter,org.dromara.jpom.common.validator.ValidatorConfig,org.dromara.jpom.common.validator.ValidatorItem,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<cn.hutool.core.convert.Convert: java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)><---<cn.workde.core.base.result.Kv: java.lang.Boolean getBool(java.lang.String)>
<cn.hutool.core.convert.Convert: java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)><---<cn.allbs.common.utils.SystemUtil: boolean getPropToBool(java.lang.String,boolean)>
<cn.hutool.core.convert.Convert: java.lang.Boolean toBool(java.lang.Object,java.lang.Boolean)><---<cn.hutool.core.convert.ConvertToBooleanTest: void toBooleanWithDefaultTest()>
<cn.hutool.core.text.split.SplitIter: void <init>(java.lang.CharSequence,cn.hutool.core.text.finder.TextFinder-SuperClass,int,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharTest()>
<cn.hutool.core.text.split.SplitIter: void <init>(java.lang.CharSequence,cn.hutool.core.text.finder.TextFinder-SuperClass,int,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharIgnoreCaseTest()>
<cn.hutool.core.text.split.SplitIter: void <init>(java.lang.CharSequence,cn.hutool.core.text.finder.TextFinder-SuperClass,int,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharIgnoreEmptyTest()>
<cn.hutool.core.text.split.SplitIter: void <init>(java.lang.CharSequence,cn.hutool.core.text.finder.TextFinder-SuperClass,int,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharTrimTest()>
<cn.hutool.core.text.split.SplitIter: void <init>(java.lang.CharSequence,cn.hutool.core.text.finder.TextFinder-SuperClass,int,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByStrTest()>
<cn.hutool.core.text.split.SplitIter: void <init>(java.lang.CharSequence,cn.hutool.core.text.finder.TextFinder-SuperClass,int,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByPatternTest()>
<cn.hutool.core.text.split.SplitIter: void <init>(java.lang.CharSequence,cn.hutool.core.text.finder.TextFinder-SuperClass,int,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByLengthTest()>
<cn.hutool.core.text.split.SplitIter: void <init>(java.lang.CharSequence,cn.hutool.core.text.finder.TextFinder-SuperClass,int,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitLimitTest()>
<cn.hutool.core.text.split.SplitIter: void <init>(java.lang.CharSequence,cn.hutool.core.text.finder.TextFinder-SuperClass,int,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitToSingleTest()>
<cn.hutool.core.text.split.SplitIter: void <init>(java.lang.CharSequence,cn.hutool.core.text.finder.TextFinder-SuperClass,int,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void lambda$splitByEmptyTest$0()>
<cn.hutool.core.text.split.SplitIter: java.util.List toList(boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharTest()>
<cn.hutool.core.text.split.SplitIter: java.util.List toList(boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharIgnoreCaseTest()>
<cn.hutool.core.text.split.SplitIter: java.util.List toList(boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharIgnoreEmptyTest()>
<cn.hutool.core.text.split.SplitIter: java.util.List toList(boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharTrimTest()>
<cn.hutool.core.text.split.SplitIter: java.util.List toList(boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByStrTest()>
<cn.hutool.core.text.split.SplitIter: java.util.List toList(boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByPatternTest()>
<cn.hutool.core.text.split.SplitIter: java.util.List toList(boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByLengthTest()>
<cn.hutool.core.text.split.SplitIter: java.util.List toList(boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitLimitTest()>
<cn.hutool.core.text.split.SplitIter: java.util.List toList(boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitToSingleTest()>
<cn.hutool.core.text.split.SplitIter: java.util.List toList(boolean)><---<cn.hutool.core.text.split.SplitIterTest: void lambda$splitByEmptyTest$0()>
<cn.hutool.core.util.BooleanUtil: boolean isTrue(java.lang.Boolean)><---<com.yomahub.liteflow.monitor.MonitorBus: void <init>(com.yomahub.liteflow.property.LiteflowConfig)>
<cn.hutool.core.util.BooleanUtil: boolean isTrue(java.lang.Boolean)><---<com.yomahub.liteflow.core.FlowExecutor: void init(boolean)>
<cn.hutool.core.util.BooleanUtil: boolean isTrue(java.lang.Boolean)><---<com.yomahub.liteflow.core.FlowExecutor: com.yomahub.liteflow.slot.Slot doExecute(java.lang.String,java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.Integer,com.yomahub.liteflow.enums.InnerChainTypeEnum,com.yomahub.liteflow.enums.ChainExecuteModeEnum)>
<cn.hutool.core.util.BooleanUtil: boolean isTrue(java.lang.Boolean)><---<com.yomahub.liteflow.core.FlowExecutor: com.yomahub.liteflow.slot.Slot doExecute(java.lang.String,java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.Integer,com.yomahub.liteflow.enums.InnerChainTypeEnum,com.yomahub.liteflow.enums.ChainExecuteModeEnum)>
<cn.hutool.core.util.BooleanUtil: boolean isTrue(java.lang.Boolean)><---<com.yomahub.liteflow.core.FlowExecutor: boolean lambda$doExecuteWithRoute$10(cn.hutool.core.lang.Tuple)>
<cn.hutool.core.util.BooleanUtil: boolean isTrue(java.lang.Boolean)><---<com.yomahub.liteflow.flow.parallel.strategy.ParallelStrategyExecutor: java.util.concurrent.ExecutorService getWhenExecutorService(com.yomahub.liteflow.flow.element.condition.WhenCondition)>
<cn.hutool.core.util.BooleanUtil: boolean isTrue(java.lang.Boolean)><---<com.yomahub.tlog.spring.TLogPropertyInit: void afterPropertiesSet()>
<cn.hutool.core.util.BooleanUtil: boolean isTrue(java.lang.Boolean)><---<cn.hutool.core.util.BooleanUtilTest: void isTrueIsFalseTest()>
<cn.hutool.core.date.LocalDateTimeUtil: boolean isIn(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,boolean,boolean)><---<cn.hutool.core.date.LocalDateTimeUtilTest: void isIn()>
<cn.hutool.core.date.LocalDateTimeUtil: boolean isIn(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,boolean,boolean)><---<cn.hutool.core.date.LocalDateTimeUtilTest: void isIn()>
<cn.hutool.core.date.LocalDateTimeUtil: boolean isIn(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,boolean,boolean)><---<cn.hutool.core.date.LocalDateTimeUtilTest: void isIn()>
<cn.hutool.core.date.LocalDateTimeUtil: boolean isIn(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,boolean,boolean)><---<cn.hutool.core.date.LocalDateTimeUtilTest: void isIn()>
<cn.hutool.core.date.LocalDateTimeUtil: boolean isIn(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,boolean,boolean)><---<cn.hutool.core.date.LocalDateTimeUtilTest: void isIn()>
<cn.hutool.core.date.LocalDateTimeUtil: boolean isIn(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,boolean,boolean)><---<cn.hutool.core.date.LocalDateTimeUtilTest: void lambda$isIn$2(java.time.LocalDateTime)>
<cn.hutool.core.date.LocalDateTimeUtil: boolean isIn(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,boolean,boolean)><---<cn.hutool.core.date.LocalDateTimeUtilTest: void lambda$isIn$1(java.time.LocalDateTime,java.time.LocalDateTime)>
<cn.hutool.core.date.LocalDateTimeUtil: boolean isIn(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime,boolean,boolean)><---<cn.hutool.core.date.LocalDateTimeUtilTest: void lambda$isIn$0(java.time.LocalDateTime,java.time.LocalDateTime)>
<cn.hutool.core.'annotation'.scanner.GenericAnnotationScanner: void <init>(boolean,boolean,boolean)><---<cn.hutool.core.'annotation'.scanner.GenericAnnotationScannerTest: void scanDirectlyTest()>
<cn.hutool.core.'annotation'.scanner.GenericAnnotationScanner: void <init>(boolean,boolean,boolean)><---<cn.hutool.core.'annotation'.scanner.GenericAnnotationScannerTest: void scanDirectlyAndMetaAnnotationTest()>
<cn.hutool.core.'annotation'.scanner.GenericAnnotationScanner: void <init>(boolean,boolean,boolean)><---<cn.hutool.core.'annotation'.scanner.GenericAnnotationScannerTest: void scanSuperclassTest()>
<cn.hutool.core.'annotation'.scanner.GenericAnnotationScanner: void <init>(boolean,boolean,boolean)><---<cn.hutool.core.'annotation'.scanner.GenericAnnotationScannerTest: void scanSuperclassAndMetaAnnotationTest()>
<cn.hutool.core.'annotation'.scanner.GenericAnnotationScanner: void <init>(boolean,boolean,boolean)><---<cn.hutool.core.'annotation'.scanner.GenericAnnotationScannerTest: void scanInterfaceTest()>
<cn.hutool.core.'annotation'.scanner.GenericAnnotationScanner: void <init>(boolean,boolean,boolean)><---<cn.hutool.core.'annotation'.scanner.GenericAnnotationScannerTest: void scanInterfaceAndMetaAnnotationTest()>
<cn.hutool.core.'annotation'.scanner.GenericAnnotationScanner: void <init>(boolean,boolean,boolean)><---<cn.hutool.core.'annotation'.scanner.GenericAnnotationScannerTest: void scanTypeHierarchyTest()>
<cn.hutool.core.'annotation'.scanner.GenericAnnotationScanner: void <init>(boolean,boolean,boolean)><---<cn.hutool.core.'annotation'.scanner.GenericAnnotationScannerTest: void scanTypeHierarchyAndMetaAnnotationTest()>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreNullValue(boolean)><---<cn.stylefeng.roses.core.util.ToolUtil: void copyProperties(java.lang.Object,java.lang.Object)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreNullValue(boolean)><---<com.spring.boxes.dollar.BeanUtils: void copyProperties(java.lang.Object,java.lang.Object)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreNullValue(boolean)><---<cn.hutool.json.InternalJSONUtil: cn.hutool.core.bean.copier.CopyOptions toCopyOptions(cn.hutool.json.JSONConfig)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreNullValue(boolean)><---<cn.hutool.core.bean.IssueI80FP4Test: void copyPropertiesTest()>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreNullValue(boolean)><---<cn.hutool.core.bean.IssueI80FP4Test: void copyPropertiesTest2()>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreNullValue(boolean)><---<cn.hutool.core.bean.Issue3702Test: void mapToMapTest()>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreNullValue(boolean)><---<cn.hutool.core.bean.BeanUtilTest: void copyPropertiesMapToMapIgnoreNullTest()>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreError(boolean)><---<cn.hutool.json.InternalJSONUtil: cn.hutool.core.bean.copier.CopyOptions toCopyOptions(cn.hutool.json.JSONConfig)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreError(boolean)><---<cn.hutool.json.JSONConverter: java.lang.Object jsonToBean(java.lang.reflect.Type,java.lang.Object,boolean)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreError(boolean)><---<cn.hutool.extra.servlet.JakartaServletUtil: java.lang.Object fillBean(jakarta.servlet.ServletRequest,java.lang.Object,boolean)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreError(boolean)><---<cn.hutool.extra.servlet.ServletUtil: java.lang.Object fillBean(javax.servlet.ServletRequest,java.lang.Object,boolean)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreError(boolean)><---<cn.hutool.poi.excel.reader.BeanSheetReader: java.util.List read(org.apache.poi.ss.usermodel.Sheet)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreError(boolean)><---<cn.hutool.core.bean.Issue3702Test: void mapToMapTest()>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreError(boolean)><---<cn.hutool.core.bean.BeanUtilTest: void issueI41WKPTest()>
<cn.hutool.core.'annotation'.scanner.MethodAnnotationScanner: void <init>(boolean)><---<cn.hutool.core.'annotation'.scanner.MethodAnnotationScannerTest: void getAnnotationsTest()>
<cn.hutool.core.'annotation'.scanner.MethodAnnotationScanner: void <init>(boolean)><---<cn.hutool.core.'annotation'.scanner.MethodAnnotationScannerTest: void getAnnotationsTest()>
<cn.hutool.core.'annotation'.scanner.MethodAnnotationScanner: void <init>(boolean)><---<cn.hutool.core.'annotation'.scanner.MethodAnnotationScannerTest: void getAnnotationsTest()>
<cn.hutool.core.'annotation'.scanner.MethodAnnotationScanner: void <init>(boolean)><---<cn.hutool.core.'annotation'.scanner.MethodAnnotationScannerTest: void scanTest()>
<cn.hutool.core.'annotation'.scanner.MethodAnnotationScanner: void <init>(boolean)><---<cn.hutool.core.'annotation'.scanner.MethodAnnotationScannerTest: void scanTest()>
<cn.hutool.core.'annotation'.scanner.MethodAnnotationScanner: void <init>(boolean)><---<cn.hutool.core.'annotation'.scanner.MethodAnnotationScannerTest: void scanTest()>
<cn.hutool.core.'annotation'.scanner.MethodAnnotationScanner: void <init>(boolean)><---<cn.hutool.core.'annotation'.scanner.MethodAnnotationScannerTest: void scanTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subBefore(java.lang.CharSequence,java.lang.CharSequence,boolean)><---<club.gclmit.gear4j.core.utils.StringUtils: java.lang.String toString(java.lang.Object)>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subBefore(java.lang.CharSequence,java.lang.CharSequence,boolean)><---<club.gclmit.chaos.core.utils.StringUtils: java.lang.String toString(java.lang.Object)>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subBefore(java.lang.CharSequence,java.lang.CharSequence,boolean)><---<org.dromara.jpom.common.JpomManifest: java.io.File getRunPath()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subBefore(java.lang.CharSequence,java.lang.CharSequence,boolean)><---<org.dromara.jpom.common.BaseJpomController: void uploadSharding(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String[])>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subBefore(java.lang.CharSequence,java.lang.CharSequence,boolean)><---<org.dromara.jpom.common.BaseJpomController: java.io.File shardingTryMerge(java.lang.String,java.lang.String,java.lang.Integer,java.lang.String)>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subBefore(java.lang.CharSequence,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.StrUtilTest: void subBeforeTest()>
<cn.hutool.core.io.FileUtil: void move(java.io.File,java.io.File,boolean)><---<org.dromara.jpom.common.JpomManifest: void releaseJar(java.lang.String,java.lang.String)>
<cn.hutool.core.io.FileUtil: void move(java.io.File,java.io.File,boolean)><---<org.dromara.jpom.common.JpomApplicationEvent: void checkUpdate()>
<cn.hutool.core.io.FileUtil: void move(java.io.File,java.io.File,boolean)><---<cn.hutool.core.io.FileUtilTest: void renameTest2()>
<cn.hutool.core.io.FileUtil: void move(java.io.File,java.io.File,boolean)><---<cn.hutool.core.io.FileUtilTest: void moveDirTest()>
<cn.hutool.core.io.FileUtil: void move(java.io.File,java.io.File,boolean)><---<cn.hutool.core.io.FileUtilTest: void renameSameTest()>
<cn.hutool.core.io.FileUtil: void move(java.io.File,java.io.File,boolean)><---<cn.hutool.core.io.FileUtilTest: void lambda$renameToSubTest$1()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String replace(java.lang.CharSequence,int,java.lang.CharSequence,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.ReUtilTest: void replaceTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String replace(java.lang.CharSequence,int,java.lang.CharSequence,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.ReUtilTest: void replaceTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String replace(java.lang.CharSequence,int,java.lang.CharSequence,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.ReUtilTest: void replaceTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String replace(java.lang.CharSequence,int,java.lang.CharSequence,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.ReUtilTest: void replaceTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String replace(java.lang.CharSequence,int,java.lang.CharSequence,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.ReUtilTest: void replaceTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String replace(java.lang.CharSequence,int,java.lang.CharSequence,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.ReUtilTest: void replaceTest()>
<cn.hutool.core.text.StrSplitter: java.util.List splitByRegex(java.lang.String,java.lang.String,int,boolean,boolean)><---<cn.hutool.core.text.split.StrSplitterTest: void splitByRegexTest()>
<cn.hutool.core.text.StrSplitter: java.util.List splitByRegex(java.lang.String,java.lang.String,int,boolean,boolean)><---<cn.hutool.core.text.split.StrSplitterTest: void splitByRegexTest()>
<cn.hutool.core.text.StrSplitter: java.util.List splitByRegex(java.lang.String,java.lang.String,int,boolean,boolean)><---<cn.hutool.core.text.split.StrSplitterTest: void issue3421Test()>
<cn.hutool.core.text.StrSplitter: java.util.List splitByRegex(java.lang.String,java.lang.String,int,boolean,boolean)><---<cn.hutool.core.text.split.StrSplitterTest: void issue3421Test()>
<cn.hutool.core.text.StrSplitter: java.util.List splitByRegex(java.lang.String,java.lang.String,int,boolean,boolean)><---<cn.hutool.core.text.split.StrSplitterTest: void issue3421Test()>
<cn.hutool.core.text.StrSplitter: java.util.List splitByRegex(java.lang.String,java.lang.String,int,boolean,boolean)><---<cn.hutool.core.text.split.StrSplitterTest: void issue3421Test()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTraditionalTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTraditionalTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(double,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatTraditionalTest()>
<cn.hutool.core.map.MapUtil: java.lang.String sortJoin(java.util.Map,java.lang.String,java.lang.String,boolean,java.lang.String[])><---<cn.hutool.crypto.SignUtil: java.lang.String signParams(cn.hutool.crypto.symmetric.SymmetricCrypto,java.util.Map,java.lang.String,java.lang.String,boolean,java.lang.String[])>
<cn.hutool.core.map.MapUtil: java.lang.String sortJoin(java.util.Map,java.lang.String,java.lang.String,boolean,java.lang.String[])><---<cn.hutool.crypto.SignUtil: java.lang.String signParams(cn.hutool.crypto.digest.DigestAlgorithm,java.util.Map,java.lang.String,java.lang.String,boolean,java.lang.String[])>
<cn.hutool.core.map.MapUtil: java.lang.String sortJoin(java.util.Map,java.lang.String,java.lang.String,boolean,java.lang.String[])><---<cn.hutool.core.map.MapUtilTest: void sortJoinTest()>
<cn.hutool.core.map.MapUtil: java.lang.String sortJoin(java.util.Map,java.lang.String,java.lang.String,boolean,java.lang.String[])><---<cn.hutool.core.map.MapUtilTest: void sortJoinTest()>
<cn.hutool.core.map.MapUtil: java.lang.String sortJoin(java.util.Map,java.lang.String,java.lang.String,boolean,java.lang.String[])><---<cn.hutool.core.map.MapUtilTest: void sortJoinTest()>
<cn.hutool.core.text.StrSplitter: java.util.List splitTrim(java.lang.CharSequence,java.lang.String,boolean)><---<org.dromara.jpom.util.JvmUtil: int getJavaVirtualCount()>
<cn.hutool.core.text.StrSplitter: java.util.List splitTrim(java.lang.CharSequence,java.lang.String,boolean)><---<org.dromara.jpom.util.JvmUtil: boolean exist(long)>
<cn.hutool.core.text.StrSplitter: java.util.List splitTrim(java.lang.CharSequence,java.lang.String,boolean)><---<org.dromara.jpom.util.JvmUtil: java.lang.Integer getPidByTag(java.lang.String)>
<cn.hutool.core.text.StrSplitter: java.util.List splitTrim(java.lang.CharSequence,java.lang.String,boolean)><---<org.dromara.jpom.util.JvmUtil: boolean lambda$exist$1(long,java.lang.String)>
<cn.hutool.core.text.StrSplitter: java.util.List splitTrim(java.lang.CharSequence,java.lang.String,boolean)><---<org.dromara.jpom.model.data.AgentWhitelist: java.util.List parseToList(java.lang.String,boolean,java.lang.String)>
<cn.hutool.core.comparator.CompareUtil: int compare(java.lang.Object,java.lang.Object,boolean)><---<ai.yue.library.base.util.ListUtils: java.util.List distinctCountSortSelectKeep(java.util.List,java.lang.String,ai.yue.library.base.constant.SortEnum,java.lang.String,ai.yue.library.base.constant.MaxOrMinEnum)>
<cn.hutool.core.comparator.CompareUtil: int compare(java.lang.Object,java.lang.Object,boolean)><---<ai.yue.library.base.util.ListUtils$1: int compare(com.alibaba.fastjson.JSONObject,com.alibaba.fastjson.JSONObject)>
<cn.hutool.core.comparator.CompareUtil: int compare(java.lang.Object,java.lang.Object,boolean)><---<ai.yue.library.base.util.ListUtils$1: int compare(com.alibaba.fastjson.JSONObject,com.alibaba.fastjson.JSONObject)>
<cn.hutool.core.comparator.CompareUtil: int compare(java.lang.Object,java.lang.Object,boolean)><---<ai.yue.library.base.util.ListUtils$2: int compare(java.lang.Object,java.lang.Object)>
<cn.hutool.core.comparator.CompareUtil: int compare(java.lang.Object,java.lang.Object,boolean)><---<ai.yue.library.base.util.ListUtils$2: int compare(java.lang.Object,java.lang.Object)>
<cn.hutool.core.date.DateUtil: java.lang.String formatChineseDate(java.util.Date,boolean,boolean)><---<cn.hutool.core.date.DateUtilTest: void formatChineseDateTest()>
<cn.hutool.core.date.DateUtil: java.lang.String formatChineseDate(java.util.Date,boolean,boolean)><---<cn.hutool.core.date.DateUtilTest: void formatChineseDateTest()>
<cn.hutool.core.date.DateUtil: java.lang.String formatChineseDate(java.util.Date,boolean,boolean)><---<cn.hutool.core.date.DateUtilTest: void formatChineseDateTimeTest()>
<cn.hutool.core.date.DateUtil: java.lang.String formatChineseDate(java.util.Date,boolean,boolean)><---<cn.hutool.core.date.DateUtilTest: void formatChineseDateTimeTest()>
<cn.hutool.core.date.DateUtil: java.lang.String formatChineseDate(java.util.Date,boolean,boolean)><---<cn.hutool.core.date.Issue3348Test: void formatChineseDateTest()>
<cn.hutool.core.collection.CollUtil: java.util.List map(java.lang.Iterable,java.util.function.Function,boolean)><---<com.yomahub.liteflow.builder.el.LiteFlowChainELBuilder: java.lang.String buildDataNotFoundExceptionMsg(java.lang.String)>
<cn.hutool.core.collection.CollUtil: java.util.List map(java.lang.Iterable,java.util.function.Function,boolean)><---<com.yomahub.liteflow.builder.el.LiteFlowChainELBuilder: java.lang.String buildDataNotFoundExceptionMsg(java.lang.String)>
<cn.hutool.core.collection.CollUtil: java.util.List map(java.lang.Iterable,java.util.function.Function,boolean)><---<cn.hutool.extra.ssh.Sftp: java.util.List ls(java.lang.String,cn.hutool.core.lang.Filter)>
<cn.hutool.core.collection.CollUtil: java.util.List map(java.lang.Iterable,java.util.function.Function,boolean)><---<cn.hutool.extra.ssh.SshjSftp: java.util.List ls(java.lang.String)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreCase(boolean)><---<com.spring.boxes.dollar.BeanUtils: void copyProperties(java.lang.Object,java.lang.Object)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreCase(boolean)><---<cn.hutool.json.InternalJSONUtil: cn.hutool.core.bean.copier.CopyOptions toCopyOptions(cn.hutool.json.JSONConfig)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreCase(boolean)><---<cn.hutool.core.bean.IssueI80FP4Test: void copyPropertiesTest()>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setIgnoreCase(boolean)><---<cn.hutool.core.bean.IssueI80FP4Test: void copyPropertiesTest2()>
<cn.hutool.core.io.IoUtil: void write(java.io.OutputStream,boolean,byte[])><---<cn.hutool.captcha.AbstractCaptcha: void write(java.io.OutputStream)>
<cn.hutool.core.io.IoUtil: void write(java.io.OutputStream,boolean,byte[])><---<cn.hutool.crypto.symmetric.XXTEA: void encrypt(java.io.InputStream,java.io.OutputStream,boolean)>
<cn.hutool.core.io.IoUtil: void write(java.io.OutputStream,boolean,byte[])><---<cn.hutool.crypto.symmetric.XXTEA: void decrypt(java.io.InputStream,java.io.OutputStream,boolean)>
<cn.hutool.core.io.IoUtil: void write(java.io.OutputStream,boolean,byte[])><---<cn.hutool.http.body.BytesBody: void write(java.io.OutputStream)>
<cn.hutool.core.io.FileUtil: java.io.File rename(java.io.File,java.lang.String,boolean)><---<cn.hutool.http.HttpResponse: long writeBody(java.io.File,java.lang.String,cn.hutool.core.io.StreamProgress)>
<cn.hutool.core.io.FileUtil: java.io.File rename(java.io.File,java.lang.String,boolean)><---<cn.hutool.extra.ftp.AbstractFtp: void download(java.lang.String,java.io.File,java.lang.String)>
<cn.hutool.core.io.FileUtil: java.io.File rename(java.io.File,java.lang.String,boolean)><---<cn.hutool.core.io.FileUtilTest: void renameTest()>
<cn.hutool.core.io.FileUtil: java.io.File rename(java.io.File,java.lang.String,boolean)><---<cn.hutool.core.io.FileUtilTest: void renameTest3()>
<cn.hutool.core.io.IoUtil: void writeUtf8(java.io.OutputStream,boolean,java.lang.Object[])><---<cn.hutool.extra.qrcode.QrCodeUtil: void generate(java.lang.String,int,int,java.lang.String,java.io.OutputStream)>
<cn.hutool.core.io.IoUtil: void writeUtf8(java.io.OutputStream,boolean,java.lang.Object[])><---<cn.hutool.extra.qrcode.QrCodeUtil: void generate(java.lang.String,int,int,java.lang.String,java.io.OutputStream)>
<cn.hutool.core.io.IoUtil: void writeUtf8(java.io.OutputStream,boolean,java.lang.Object[])><---<cn.hutool.extra.qrcode.QrCodeUtil: void generate(java.lang.String,cn.hutool.extra.qrcode.QrConfig,java.lang.String,java.io.OutputStream)>
<cn.hutool.core.io.IoUtil: void writeUtf8(java.io.OutputStream,boolean,java.lang.Object[])><---<cn.hutool.extra.qrcode.QrCodeUtil: void generate(java.lang.String,cn.hutool.extra.qrcode.QrConfig,java.lang.String,java.io.OutputStream)>
<cn.hutool.core.bean.BeanUtil: java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,boolean)><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter write(java.lang.Iterable,java.util.Comparator)>
<cn.hutool.core.bean.BeanUtil: java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,boolean)><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Object,boolean)>
<cn.hutool.core.bean.BeanUtil: java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,boolean)><---<cn.hutool.poi.excel.ExcelWriter: cn.hutool.poi.excel.ExcelWriter writeRow(java.lang.Object,boolean)>
<cn.hutool.core.bean.BeanUtil: java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,boolean)><---<cn.hutool.poi.word.TableUtil: void writeRow(org.apache.poi.xwpf.usermodel.XWPFTableRow,java.lang.Object,boolean)>
<cn.hutool.core.collection.CollUtil: java.util.List list(boolean,java.util.Collection)><---<cn.hutool.core.collection.CollUtilTest: void listTest3()>
<cn.hutool.core.collection.CollUtil: java.util.List list(boolean,java.util.Collection)><---<cn.hutool.core.collection.CollUtilTest: void listTest3()>
<cn.hutool.core.collection.CollUtil: java.util.List list(boolean,java.util.Collection)><---<cn.hutool.core.date.DateUtilTest: void yearAndQTest()>
<cn.hutool.core.collection.CollUtil: java.util.List list(boolean,java.util.Collection)><---<cn.hutool.core.date.DateUtilTest: void yearAndQTest()>
<cn.hutool.core.collection.CollUtil: java.util.HashSet set(boolean,java.lang.Object[])><---<cn.hutool.core.collection.CollUtilTest: void getTest()>
<cn.hutool.core.collection.CollUtil: java.util.HashSet set(boolean,java.lang.Object[])><---<cn.hutool.core.collection.CollUtilTest: void lastIndexOfSetTest()>
<cn.hutool.core.collection.CollUtil: java.util.HashSet set(boolean,java.lang.Object[])><---<cn.hutool.core.collection.IterUtilTest: void getTest()>
<cn.hutool.core.collection.CollUtil: java.util.HashSet set(boolean,java.lang.Object[])><---<cn.hutool.core.convert.ConvertTest: void toSetTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subBefore(java.lang.CharSequence,char,boolean)><---<cn.hutool.core.util.StrUtilTest: void subBeforeTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subBefore(java.lang.CharSequence,char,boolean)><---<cn.hutool.core.util.StrUtilTest: void subBeforeTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subBefore(java.lang.CharSequence,char,boolean)><---<cn.hutool.core.util.StrUtilTest: void subBeforeTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subBefore(java.lang.CharSequence,char,boolean)><---<cn.hutool.core.util.StrUtilTest: void subBeforeTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subAfter(java.lang.CharSequence,char,boolean)><---<cn.hutool.core.util.StrUtilTest: void subAfterTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subAfter(java.lang.CharSequence,char,boolean)><---<cn.hutool.core.util.StrUtilTest: void subAfterTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subAfter(java.lang.CharSequence,char,boolean)><---<cn.hutool.core.util.StrUtilTest: void subAfterTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subAfter(java.lang.CharSequence,char,boolean)><---<cn.hutool.core.util.StrUtilTest: void subAfterTest()>
<cn.hutool.core.util.URLUtil: java.lang.String normalize(java.lang.String,boolean)><---<cn.hutool.core.util.URLUtilTest: void normalizeTest3()>
<cn.hutool.core.util.URLUtil: java.lang.String normalize(java.lang.String,boolean)><---<cn.hutool.core.util.URLUtilTest: void normalizeTest3()>
<cn.hutool.core.util.URLUtil: java.lang.String normalize(java.lang.String,boolean)><---<cn.hutool.core.util.URLUtilTest: void normalizeTest3()>
<cn.hutool.core.util.URLUtil: java.lang.String normalize(java.lang.String,boolean)><---<cn.hutool.core.util.URLUtilTest: void normalizeIpv6Test()>
<cn.hutool.core.date.DateBetween: long betweenYear(boolean)><---<cn.hutool.core.date.DateBetweenTest: void betweenYearTest()>
<cn.hutool.core.date.DateBetween: long betweenYear(boolean)><---<cn.hutool.core.date.DateBetweenTest: void betweenYearTest()>
<cn.hutool.core.date.DateBetween: long betweenYear(boolean)><---<cn.hutool.core.date.DateBetweenTest: void betweenYearTest()>
<cn.hutool.core.date.DateBetween: long betweenYear(boolean)><---<cn.hutool.core.date.DateBetweenTest: void betweenYearTest2()>
<cn.hutool.core.text.finder.CharFinder: void <init>(char,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharTest()>
<cn.hutool.core.text.finder.CharFinder: void <init>(char,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharIgnoreCaseTest()>
<cn.hutool.core.text.finder.CharFinder: void <init>(char,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharIgnoreEmptyTest()>
<cn.hutool.core.text.finder.CharFinder: void <init>(char,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByCharTrimTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String numberCharToChinese(char,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void numberCharToChineseTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String numberCharToChinese(char,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void numberCharToChineseTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String numberCharToChinese(char,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void numberCharToChineseTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String numberCharToChinese(char,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void numberCharToChineseTest()>
<cn.hutool.core.util.ClassUtil: java.lang.String getClassName(java.lang.Class,boolean)><---<com.fujieid.jap.core.strategy.AbstractJapStrategy: void checkAuthenticateConfig(com.fujieid.jap.core.config.AuthenticateConfig,java.lang.Class)>
<cn.hutool.core.util.ClassUtil: java.lang.String getClassName(java.lang.Class,boolean)><---<cn.hutool.core.util.ClassUtilTest: void getClassNameTest()>
<cn.hutool.core.util.ClassUtil: java.lang.String getClassName(java.lang.Class,boolean)><---<cn.hutool.core.util.ClassUtilTest: void getClassNameTest()>
<cn.hutool.core.util.IdcardUtil: boolean isValidCard18(java.lang.String,boolean)><---<me.zhengjin.common.core.validation.IdentValidated: boolean isValid(java.lang.String,javax.validation.ConstraintValidatorContext)>
<cn.hutool.core.util.IdcardUtil: boolean isValidCard18(java.lang.String,boolean)><---<cn.hutool.core.util.IdcardUtilTest: void isValidCard18Test()>
<cn.hutool.core.util.IdcardUtil: boolean isValidCard18(java.lang.String,boolean)><---<cn.hutool.core.util.IdcardUtilTest: void isValidCard18Test()>
<cn.hutool.core.util.BooleanUtil: boolean isFalse(java.lang.Boolean)><---<com.yomahub.liteflow.core.FlowExecutor: void init(boolean)>
<cn.hutool.core.util.BooleanUtil: boolean isFalse(java.lang.Boolean)><---<com.yomahub.liteflow.flow.element.Chain: void execute(java.lang.Integer)>
<cn.hutool.core.util.BooleanUtil: boolean isFalse(java.lang.Boolean)><---<cn.hutool.core.util.BooleanUtilTest: void isTrueIsFalseTest()>
<cn.hutool.core.util.StrUtil: java.lang.String fill(java.lang.String,char,int,boolean)><---<com.yomahub.liteflow.builder.el.LiteFlowChainELBuilder: java.lang.String buildDataNotFoundExceptionMsg(java.lang.String)>
<cn.hutool.core.util.StrUtil: java.lang.String fill(java.lang.String,char,int,boolean)><---<com.yomahub.liteflow.builder.el.LiteFlowChainELBuilder: java.lang.String buildDataNotFoundExceptionMsg(java.lang.String)>
<cn.hutool.core.util.StrUtil: java.lang.String fill(java.lang.String,char,int,boolean)><---<com.yomahub.liteflow.builder.el.LiteFlowChainELBuilder: java.lang.String buildDataNotFoundExceptionMsg(java.lang.String)>
<cn.hutool.core.convert.Convert: java.lang.Object convertWithCheck(java.lang.reflect.Type,java.lang.Object,java.lang.Object,boolean)><---<cn.hutool.json.JSONConverter: java.lang.Object jsonToBean(java.lang.reflect.Type,java.lang.Object,boolean)>
<cn.hutool.core.convert.Convert: java.lang.Object convertWithCheck(java.lang.reflect.Type,java.lang.Object,java.lang.Object,boolean)><---<cn.hutool.core.convert.IssueIALV38Test: void name()>
<cn.hutool.core.convert.Convert: java.lang.Object convertWithCheck(java.lang.reflect.Type,java.lang.Object,java.lang.Object,boolean)><---<cn.hutool.core.convert.ConvertTest: void toLongFromNumberWithFormatTest()>
<cn.hutool.core.io.FileUtil: void moveContent(java.io.File,java.io.File,boolean)><---<org.dromara.jpom.util.FileUtils: void tempMoveContent(java.io.File,java.io.File)>
<cn.hutool.core.io.FileUtil: void moveContent(java.io.File,java.io.File,boolean)><---<org.dromara.jpom.util.FileUtils: void tempMoveContent(java.io.File,java.io.File)>
<cn.hutool.core.io.FileUtil: void moveContent(java.io.File,java.io.File,boolean)><---<org.dromara.jpom.util.FileUtils: void tempMoveContent(java.io.File,java.io.File)>
<cn.hutool.core.io.FileUtil: java.io.File copy(java.io.File,java.io.File,boolean)><---<cn.hutool.core.util.ZipUtilTest: void appendTest()>
<cn.hutool.core.io.FileUtil: java.io.File copy(java.io.File,java.io.File,boolean)><---<cn.hutool.core.io.FileUtilTest: void copyTest()>
<cn.hutool.core.io.FileUtil: java.io.File copy(java.io.File,java.io.File,boolean)><---<cn.hutool.core.io.FileUtilTest: void copyDirTest()>
<cn.hutool.core.bean.BeanUtilTest$SubPerson: void setSlow(java.lang.Boolean)><---<cn.hutool.core.bean.BeanUtilTest: void copyPropertiesHasBooleanTest()>
<cn.hutool.core.bean.BeanUtilTest$SubPerson: void setSlow(java.lang.Boolean)><---<cn.hutool.core.bean.BeanUtilTest: void copyPropertiesIgnoreNullTest()>
<cn.hutool.core.bean.BeanUtilTest$SubPerson: void setSlow(java.lang.Boolean)><---<cn.hutool.core.bean.BeanUtilTest: void copyPropertiesBeanToMapTest()>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setOverride(boolean)><---<cn.hutool.core.bean.copier.BeanCopierTest: void beanToBeanNotOverrideTest()>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setOverride(boolean)><---<cn.hutool.core.bean.copier.BeanCopierTest: void issues2484Test()>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setOverride(boolean)><---<cn.hutool.core.bean.copier.BeanCopierTest: void issues2484Test()>
<cn.hutool.core.date.DateUtil: boolean isSameWeek(java.util.Date,java.util.Date,boolean)><---<cn.hutool.core.date.DateUtilTest: void isSameWeekTest()>
<cn.hutool.core.date.DateUtil: boolean isSameWeek(java.util.Date,java.util.Date,boolean)><---<cn.hutool.core.date.DateUtilTest: void isSameWeekTest()>
<cn.hutool.core.date.DateUtil: boolean isSameWeek(java.util.Date,java.util.Date,boolean)><---<cn.hutool.core.date.DateUtilTest: void isSameWeekTest()>
<cn.hutool.core.date.ChineseDate: void <init>(int,int,int,boolean)><---<cn.hutool.core.date.ChineseDateTest: void getGregorianDateTest()>
<cn.hutool.core.date.ChineseDate: void <init>(int,int,int,boolean)><---<cn.hutool.core.date.IssueI97WU6Test: void getTermTest()>
<cn.hutool.core.date.ChineseDate: void <init>(int,int,int,boolean)><---<cn.hutool.core.date.chinese.IssueI5YB1ATest: void chineseDateTest()>
<cn.hutool.core.date.DateBetween: long betweenMonth(boolean)><---<cn.hutool.core.date.DateBetweenTest: void betweenMonthTest()>
<cn.hutool.core.date.DateBetween: long betweenMonth(boolean)><---<cn.hutool.core.date.DateBetweenTest: void betweenMonthTest()>
<cn.hutool.core.date.DateBetween: long betweenMonth(boolean)><---<cn.hutool.core.date.DateBetweenTest: void betweenMonthTest()>
<cn.hutool.core.io.file.PathUtil: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,boolean)><---<cn.hutool.core.io.file.PathUtilTest: void moveTest()>
<cn.hutool.core.io.file.PathUtil: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,boolean)><---<cn.hutool.core.io.file.PathUtilTest: void moveDirTest()>
<cn.hutool.core.io.file.PathUtil: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,boolean)><---<cn.hutool.core.io.file.PathUtilTest: void moveTest2()>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.util.function.Supplier)><---<cn.hutool.core.lang.AssertTest: void lambda$isTrueTest3$3()>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.util.function.Supplier)><---<cn.hutool.core.lang.AssertTest: void lambda$isTrueTest2$1()>
<cn.hutool.core.lang.Assert: void isTrue(boolean,java.util.function.Supplier)><---<cn.hutool.core.lang.AssertTest: void lambda$isTrueTest$0()>
<cn.hutool.core.text.CharSequenceUtil: boolean startWith(java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)><---<cn.hutool.core.text.CharSequenceUtilTest: void startWithTest()>
<cn.hutool.core.text.CharSequenceUtil: boolean startWith(java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)><---<cn.hutool.core.text.CharSequenceUtilTest: void startWithTest()>
<cn.hutool.core.text.CharSequenceUtil: boolean startWith(java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)><---<cn.hutool.core.text.CharSequenceUtilTest: void startWithTest()>
<cn.hutool.core.text.CharSequenceUtil: boolean endWith(java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)><---<cn.hutool.core.text.CharSequenceUtilTest: void endWithTest()>
<cn.hutool.core.text.CharSequenceUtil: boolean endWith(java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)><---<cn.hutool.core.text.CharSequenceUtilTest: void endWithTest()>
<cn.hutool.core.text.CharSequenceUtil: boolean endWith(java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)><---<cn.hutool.core.text.CharSequenceUtilTest: void endWithTest()>
<cn.hutool.core.text.finder.TextFinder: cn.hutool.core.text.finder.TextFinder setNegative(boolean)><---<cn.hutool.core.text.finder.CharFinderTest: void negativeStartTest()>
<cn.hutool.core.text.finder.TextFinder: cn.hutool.core.text.finder.TextFinder setNegative(boolean)><---<cn.hutool.core.text.finder.CharFinderTest: void negativeStartTest()>
<cn.hutool.core.text.finder.TextFinder: cn.hutool.core.text.finder.TextFinder setNegative(boolean)><---<cn.hutool.core.text.finder.CharFinderTest: void negativeStartTest()>
<cn.hutool.core.convert.NumberWordFormatter: java.lang.String formatSimple(long,boolean)><---<cn.hutool.core.convert.NumberWordFormatTest: void formatSimpleTest()>
<cn.hutool.core.convert.NumberWordFormatter: java.lang.String formatSimple(long,boolean)><---<cn.hutool.core.convert.NumberWordFormatTest: void formatSimpleTest()>
<cn.hutool.core.convert.NumberWordFormatter: java.lang.String formatSimple(long,boolean)><---<cn.hutool.core.convert.NumberWordFormatTest: void formatSimpleTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String formatThousand(int,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String formatThousand(int,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String formatThousand(int,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void formatThousandTest()>
<cn.hutool.core.convert.ConverterRegistry: cn.hutool.core.convert.Converter getConverter(java.lang.reflect.Type,boolean)><---<love.forte.common.utils.convert.HutoolConverterManagerImpl: love.forte.common.utils.convert.Converter getConverterByTarget(java.lang.reflect.Type)>
<cn.hutool.core.convert.ConverterRegistry: cn.hutool.core.convert.Converter getConverter(java.lang.reflect.Type,boolean)><---<cn.hutool.core.convert.ConverterRegistryTest: void getConverterTest()>
<cn.hutool.core.io.IoUtil: byte[] readBytes(java.io.InputStream,boolean)><---<club.gclmit.chaos.core.utils.IOUtils: java.lang.String readString(java.io.InputStream)>
<cn.hutool.core.io.IoUtil: byte[] readBytes(java.io.InputStream,boolean)><---<cn.hutool.http.server.HttpServerRequest: byte[] getBodyBytes()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subAfter(java.lang.CharSequence,java.lang.CharSequence,boolean)><---<club.gclmit.chaos.core.utils.FileTypeUtils: java.lang.String getSuffix(java.lang.String)>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subAfter(java.lang.CharSequence,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.StrUtilTest: void subAfterTest()>
<cn.hutool.core.lang.UUID: java.lang.String toString(boolean)><---<cn.lingyangwl.framework.tool.core.UUIDUtils: java.lang.String simpleUUID()>
<cn.hutool.core.lang.UUID: java.lang.String toString(boolean)><---<cn.lingyangwl.framework.tool.core.UUIDUtils: java.lang.String fastSimpleUUID()>
<cn.hutool.core.lang.Dict: void <init>(boolean)><---<cn.hutool.db.Entity: void <init>(java.lang.String,boolean)>
<cn.hutool.core.lang.Dict: void <init>(boolean)><---<cn.hutool.core.lang.DictTest: void dictTest2()>
<cn.hutool.core.util.SystemPropsUtil: boolean getBoolean(java.lang.String,boolean)><---<cn.hutool.crypto.SecureUtil: byte[] decode(java.lang.String)>
<cn.hutool.core.util.SystemPropsUtil: boolean getBoolean(java.lang.String,boolean)><---<org.dromara.jpom.util.CommandUtil: void asyncExeLocalCommand(java.lang.String,java.io.File,java.util.Map,boolean)>
<cn.hutool.core.net.url.UrlQuery: cn.hutool.core.net.url.UrlQuery of(java.util.Map,boolean)><---<cn.hutool.http.body.FormUrlEncodedBody: void <init>(java.util.Map,java.nio.charset.Charset)>
<cn.hutool.core.net.url.UrlQuery: cn.hutool.core.net.url.UrlQuery of(java.util.Map,boolean)><---<cn.hutool.http.HttpUtil: java.lang.String toParams(java.util.Map,java.nio.charset.Charset,boolean)>
<cn.hutool.core.io.IoUtil: void write(java.io.OutputStream,java.nio.charset.Charset,boolean,java.lang.Object[])><---<cn.hutool.http.MultipartOutputStream: void write(java.lang.Object[])>
<cn.hutool.core.io.IoUtil: void write(java.io.OutputStream,java.nio.charset.Charset,boolean,java.lang.Object[])><---<cn.hutool.extra.ssh.GanymedUtil: java.lang.String execByShell(ch.ethz.ssh2.Session,java.lang.String,java.nio.charset.Charset,java.io.OutputStream)>
<cn.hutool.core.collection.ListUtil: java.util.List list(boolean,java.util.Enumeration)><---<cn.hutool.extra.servlet.JakartaServletUtil: java.util.Map getHeadersMap(jakarta.servlet.http.HttpServletRequest)>
<cn.hutool.core.collection.ListUtil: java.util.List list(boolean,java.util.Enumeration)><---<cn.hutool.extra.servlet.ServletUtil: java.util.Map getHeadersMap(javax.servlet.http.HttpServletRequest)>
<cn.hutool.core.text.CharSequenceUtil: boolean endWith(java.lang.CharSequence,java.lang.CharSequence,boolean)><---<org.dromara.jpom.plugin.PluginFactory: boolean lambda$init$0(java.io.File,java.lang.String)>
<cn.hutool.core.text.CharSequenceUtil: boolean endWith(java.lang.CharSequence,java.lang.CharSequence,boolean)><---<org.dromara.jpom.common.JpomApplicationEvent: boolean lambda$clearOldJar$0(java.io.File)>
<cn.hutool.core.comparator.FuncComparator: void <init>(boolean,java.util.function.Function)><---<org.dromara.jpom.common.i18n.I18nMessageUtil: int lambda$headerAcceptLanguageBest$5(cn.hutool.core.lang.Tuple,cn.hutool.core.lang.Tuple)>
<cn.hutool.core.comparator.FuncComparator: void <init>(boolean,java.util.function.Function)><---<org.dromara.jpom.common.i18n.I18nMessageUtil: int lambda$headerAcceptLanguageBest$5(cn.hutool.core.lang.Tuple,cn.hutool.core.lang.Tuple)>
<cn.hutool.core.lang.Validator: boolean validateTrue(boolean,java.lang.String,java.lang.Object[])><---<ai.yue.library.base.validation.Validator: ai.yue.library.base.validation.Validator assertTrue(java.lang.String)>
<cn.hutool.core.lang.Validator: boolean validateTrue(boolean,java.lang.String,java.lang.Object[])><---<cn.workde.core.base.validation.Validator: cn.workde.core.base.validation.Validator assertTrue(java.lang.String)>
<cn.hutool.core.lang.Validator: boolean validateFalse(boolean,java.lang.String,java.lang.Object[])><---<ai.yue.library.base.validation.Validator: ai.yue.library.base.validation.Validator assertFalse(java.lang.String)>
<cn.hutool.core.lang.Validator: boolean validateFalse(boolean,java.lang.String,java.lang.Object[])><---<cn.workde.core.base.validation.Validator: cn.workde.core.base.validation.Validator assertFalse(java.lang.String)>
<cn.hutool.core.collection.IterUtil: java.util.Map toMap(java.lang.Iterable,java.lang.Iterable,boolean)><---<cn.hutool.poi.excel.reader.MapSheetReader: java.util.List read(org.apache.poi.ss.usermodel.Sheet)>
<cn.hutool.core.collection.IterUtil: java.util.Map toMap(java.lang.Iterable,java.lang.Iterable,boolean)><---<cn.hutool.poi.excel.sax.handler.MapRowHandler: java.util.Map lambda$new$533315fa$1(java.util.List)>
<cn.hutool.core.comparator.CompareUtil: int compare(java.lang.Comparable,java.lang.Comparable,boolean)><---<cn.hutool.core.comparator.CompareUtilTest: void compareTest()>
<cn.hutool.core.comparator.CompareUtil: int compare(java.lang.Comparable,java.lang.Comparable,boolean)><---<cn.hutool.core.comparator.CompareUtilTest: void compareTest()>
<cn.hutool.core.util.ZipUtil: java.io.File zip(java.io.File,boolean,java.io.File[])><---<cn.hutool.core.compress.IssueIAGYDGTest: void zipTest()>
<cn.hutool.core.util.ZipUtil: java.io.File zip(java.io.File,boolean,java.io.File[])><---<cn.hutool.core.util.ZipUtilTest: void zipMultiFileTest()>
<cn.hutool.core.collection.CollUtil: java.util.List list(boolean)><---<cn.hutool.core.collection.CollUtilTest: void listTest()>
<cn.hutool.core.collection.CollUtil: java.util.List list(boolean)><---<cn.hutool.core.collection.CollUtilTest: void listTest()>
<cn.hutool.core.collection.CollUtil: java.util.List list(boolean,java.lang.Object[])><---<cn.hutool.core.collection.CollUtilTest: void listTest2()>
<cn.hutool.core.collection.CollUtil: java.util.List list(boolean,java.lang.Object[])><---<cn.hutool.core.collection.CollUtilTest: void listTest2()>
<cn.hutool.core.collection.CollUtil: java.util.List distinct(java.util.Collection,java.util.function.Function,boolean)><---<cn.hutool.core.collection.CollUtilTest: void distinctByFunctionTest()>
<cn.hutool.core.collection.CollUtil: java.util.List distinct(java.util.Collection,java.util.function.Function,boolean)><---<cn.hutool.core.collection.CollUtilTest: void distinctByFunctionTest()>
<cn.hutool.core.net.url.UrlBuilder: cn.hutool.core.net.url.UrlBuilder setWithEndTag(boolean)><---<cn.hutool.core.net.UrlBuilderTest: void buildWithoutSlashTest()>
<cn.hutool.core.net.url.UrlBuilder: cn.hutool.core.net.url.UrlBuilder setWithEndTag(boolean)><---<cn.hutool.core.net.UrlBuilderTest: void buildWithoutSlashTest()>
<cn.hutool.core.text.CharSequenceUtil: java.util.List split(java.lang.CharSequence,char,int,boolean,boolean)><---<cn.hutool.core.util.StrUtilTest: void splitTest()>
<cn.hutool.core.text.CharSequenceUtil: java.util.List split(java.lang.CharSequence,char,int,boolean,boolean)><---<cn.hutool.core.util.StrUtilTest: void splitEmptyTest()>
<cn.hutool.core.util.ZipUtil: void zip(java.io.OutputStream,java.nio.charset.Charset,boolean,java.io.FileFilter,java.io.File[])><---<cn.hutool.core.util.ZipUtilTest: void zipStreamTest()>
<cn.hutool.core.util.ZipUtil: void zip(java.io.OutputStream,java.nio.charset.Charset,boolean,java.io.FileFilter,java.io.File[])><---<cn.hutool.core.util.ZipUtilTest: void zipStreamTest2()>
<cn.hutool.core.util.ReflectUtilTest: java.lang.reflect.Method getMethodWithReturnTypeCheck(java.lang.Class,boolean,java.lang.String,java.lang.Class[])><---<cn.hutool.core.util.ReflectUtilTest: void getMethodBenchTest()>
<cn.hutool.core.util.ReflectUtilTest: java.lang.reflect.Method getMethodWithReturnTypeCheck(java.lang.Class,boolean,java.lang.String,java.lang.Class[])><---<cn.hutool.core.util.ReflectUtilTest: void getMethodBenchTest()>
<cn.hutool.core.util.ArrayUtil: java.lang.Object[] distinct(java.lang.Object[],java.util.function.Function,boolean)><---<cn.hutool.core.util.ArrayUtilTest: void distinctByFunctionTest()>
<cn.hutool.core.util.ArrayUtil: java.lang.Object[] distinct(java.lang.Object[],java.util.function.Function,boolean)><---<cn.hutool.core.util.ArrayUtilTest: void distinctByFunctionTest()>
<cn.hutool.core.util.XmlUtil: org.w3c.dom.Document beanToXml(java.lang.Object,java.lang.String,boolean)><---<cn.hutool.core.util.XmlUtilTest: void beanToXmlIgnoreNullTest()>
<cn.hutool.core.util.XmlUtil: org.w3c.dom.Document beanToXml(java.lang.Object,java.lang.String,boolean)><---<cn.hutool.core.util.XmlUtilTest: void beanToXmlIgnoreNullTest()>
<cn.hutool.core.util.BooleanUtil: java.lang.Boolean negate(java.lang.Boolean)><---<cn.hutool.core.util.BooleanUtilTest: void negateTest()>
<cn.hutool.core.util.BooleanUtil: java.lang.Boolean negate(java.lang.Boolean)><---<cn.hutool.core.util.BooleanUtilTest: void negateTest()>
<cn.hutool.core.util.BooleanUtil: boolean negate(boolean)><---<cn.hutool.core.util.BooleanUtilTest: void negateTest()>
<cn.hutool.core.util.BooleanUtil: boolean negate(boolean)><---<cn.hutool.core.util.BooleanUtilTest: void negateTest()>
<cn.hutool.core.util.BooleanUtil: java.lang.String toStringTrueFalse(boolean)><---<cn.hutool.core.util.BooleanUtilTest: void toStringTest()>
<cn.hutool.core.util.BooleanUtil: java.lang.String toStringTrueFalse(boolean)><---<cn.hutool.core.util.BooleanUtilTest: void toStringTest()>
<cn.hutool.core.util.BooleanUtil: java.lang.String toStringYesNo(boolean)><---<cn.hutool.core.util.BooleanUtilTest: void toStringTest()>
<cn.hutool.core.util.BooleanUtil: java.lang.String toStringYesNo(boolean)><---<cn.hutool.core.util.BooleanUtilTest: void toStringTest()>
<cn.hutool.core.util.BooleanUtil: java.lang.String toStringOnOff(boolean)><---<cn.hutool.core.util.BooleanUtilTest: void toStringTest()>
<cn.hutool.core.util.BooleanUtil: java.lang.String toStringOnOff(boolean)><---<cn.hutool.core.util.BooleanUtilTest: void toStringTest()>
<cn.hutool.core.bean.BeanUtil: java.util.Map beanToMap(java.lang.Object,boolean,boolean)><---<cn.hutool.core.bean.BeanUtilTest: void beanToMapTest2()>
<cn.hutool.core.bean.BeanUtil: java.util.Map beanToMap(java.lang.Object,boolean,boolean)><---<cn.hutool.core.bean.BeanUtilTest: void beanToMapWithLocalDateTimeTest()>
<cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime ceiling(java.util.Date,cn.hutool.core.date.DateField-Enum-SuperClass,boolean)><---<cn.hutool.core.date.DateUtilTest: void ceilingMinuteTest()>
<cn.hutool.core.date.DateUtil: cn.hutool.core.date.DateTime ceiling(java.util.Date,cn.hutool.core.date.DateField-Enum-SuperClass,boolean)><---<cn.hutool.core.date.DateUtilTest: void ceilingDayTest()>
<cn.hutool.core.date.DateUtil: long betweenMonth(java.util.Date,java.util.Date,boolean)><---<cn.hutool.core.date.DateUtilTest: void betweenTest()>
<cn.hutool.core.date.DateUtil: long betweenMonth(java.util.Date,java.util.Date,boolean)><---<cn.hutool.core.date.DateUtilTest: void betweenTest()>
<cn.hutool.core.date.DateUtil: long betweenWeek(java.util.Date,java.util.Date,boolean)><---<cn.hutool.core.date.DateUtilTest: void betweenWeekTest()>
<cn.hutool.core.date.DateUtil: long betweenWeek(java.util.Date,java.util.Date,boolean)><---<cn.hutool.core.date.DateBetweenTest: void betweenWeeksTest()>
<cn.hutool.core.date.DateUtil: long betweenDay(java.util.Date,java.util.Date,boolean)><---<cn.hutool.core.date.DateUtilTest: void betweenDayTest()>
<cn.hutool.core.date.DateUtil: long betweenDay(java.util.Date,java.util.Date,boolean)><---<cn.hutool.core.date.DateUtilTest: void issueI9CYHITest()>
<cn.hutool.core.date.CalendarUtil: java.lang.String formatChineseDate(java.util.Calendar,boolean)><---<cn.hutool.core.date.CalendarUtilTest: void formatChineseDate()>
<cn.hutool.core.date.CalendarUtil: java.lang.String formatChineseDate(java.util.Calendar,boolean)><---<cn.hutool.core.date.CalendarUtilTest: void formatChineseDate()>
<cn.hutool.core.io.FileUtil: java.io.File copy(java.lang.String,java.lang.String,boolean)><---<cn.hutool.core.io.FileUtilTest: void copyTest2()>
<cn.hutool.core.io.FileUtil: java.io.File copy(java.lang.String,java.lang.String,boolean)><---<cn.hutool.core.io.FileCopierTest: void dirCopyTest2()>
<cn.hutool.core.'annotation'.scanner.TypeAnnotationScanner: cn.hutool.core.'annotation'.scanner.TypeAnnotationScanner setIncludeInterfaces(boolean)><---<cn.hutool.core.'annotation'.scanner.TypeAnnotationScannerTest: void getAnnotationsTest()>
<cn.hutool.core.'annotation'.scanner.TypeAnnotationScanner: cn.hutool.core.'annotation'.scanner.TypeAnnotationScanner setIncludeInterfaces(boolean)><---<cn.hutool.core.'annotation'.scanner.TypeAnnotationScannerTest: void scanTest()>
<cn.hutool.core.'annotation'.scanner.TypeAnnotationScanner: cn.hutool.core.'annotation'.scanner.TypeAnnotationScanner setIncludeSuperClass(boolean)><---<cn.hutool.core.'annotation'.scanner.TypeAnnotationScannerTest: void getAnnotationsTest()>
<cn.hutool.core.'annotation'.scanner.TypeAnnotationScanner: cn.hutool.core.'annotation'.scanner.TypeAnnotationScanner setIncludeSuperClass(boolean)><---<cn.hutool.core.'annotation'.scanner.TypeAnnotationScannerTest: void scanTest()>
<cn.hutool.core.lang.ConsoleTable: cn.hutool.core.lang.ConsoleTable setSBCMode(boolean)><---<cn.hutool.core.lang.ConsoleTableTest: void printDBCTest()>
<cn.hutool.core.lang.ConsoleTable: cn.hutool.core.lang.ConsoleTable setSBCMode(boolean)><---<cn.hutool.core.lang.ConsoleTableTest: void printDBCTest()>
<cn.hutool.core.lang.caller.CallerUtil: java.lang.String getCallerMethodName(boolean)><---<cn.hutool.core.lang.caller.CallerUtilTest: void getCallerMethodNameTest()>
<cn.hutool.core.lang.caller.CallerUtil: java.lang.String getCallerMethodName(boolean)><---<cn.hutool.core.lang.caller.CallerUtilTest: void getCallerMethodNameTest()>
<cn.hutool.core.lang.Snowflake: void <init>(java.util.Date,long,long,boolean,long,long)><---<cn.hutool.core.lang.SnowflakeTest: void snowflakeRandomSequenceTest()>
<cn.hutool.core.lang.Snowflake: void <init>(java.util.Date,long,long,boolean,long,long)><---<cn.hutool.core.lang.SnowflakeTest: void uniqueOfRandomSequenceTest()>
<cn.hutool.core.map.TreeEntry: void forEachChild(boolean,java.util.function.Consumer)><---<cn.hutool.core.map.LinkedForestMapTest: void testTreeEntry()>
<cn.hutool.core.map.TreeEntry: void forEachChild(boolean,java.util.function.Consumer)><---<cn.hutool.core.map.LinkedForestMapTest: void testTreeEntry()>
<cn.hutool.core.map.MapBuilder: cn.hutool.core.map.MapBuilder put(boolean,java.lang.Object,java.lang.Object)><---<cn.hutool.core.map.MapBuilderTest: void conditionPutTest()>
<cn.hutool.core.map.MapBuilder: cn.hutool.core.map.MapBuilder put(boolean,java.lang.Object,java.lang.Object)><---<cn.hutool.core.map.MapBuilderTest: void conditionPutTest()>
<cn.hutool.core.map.MapBuilder: cn.hutool.core.map.MapBuilder put(boolean,java.lang.Object,java.util.function.Supplier)><---<cn.hutool.core.map.MapBuilderTest: void conditionPutTest()>
<cn.hutool.core.map.MapBuilder: cn.hutool.core.map.MapBuilder put(boolean,java.lang.Object,java.util.function.Supplier)><---<cn.hutool.core.map.MapBuilderTest: void conditionPutTest()>
<cn.hutool.core.text.finder.StrFinder: void <init>(java.lang.CharSequence,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void splitByStrTest()>
<cn.hutool.core.text.finder.StrFinder: void <init>(java.lang.CharSequence,boolean)><---<cn.hutool.core.text.split.SplitIterTest: void lambda$splitByEmptyTest$0()>
<cn.hutool.core.text.StrSplitter: java.lang.String[] splitToArray(java.lang.CharSequence,java.lang.String,int,boolean,boolean)><---<cn.hutool.core.text.split.StrSplitterTest: void splitEmptyTest()>
<cn.hutool.core.text.StrSplitter: java.lang.String[] splitToArray(java.lang.CharSequence,java.lang.String,int,boolean,boolean)><---<cn.hutool.core.text.split.StrSplitterTest: void splitNullTest()>
<cn.hutool.core.text.UnicodeUtil: java.lang.String toUnicode(java.lang.String,boolean)><---<cn.hutool.core.text.UnicodeUtilTest: void convertTest()>
<cn.hutool.core.text.UnicodeUtil: java.lang.String toUnicode(java.lang.String,boolean)><---<cn.hutool.core.text.UnicodeUtilTest: void issueI50MI6Test()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subPreGbk(java.lang.CharSequence,int,boolean)><---<cn.hutool.core.text.CharSequenceUtilTest: void subPreGbkTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String subPreGbk(java.lang.CharSequence,int,boolean)><---<cn.hutool.core.text.CharSequenceUtilTest: void subPreGbkTest()>
<cn.hutool.core.text.csv.CsvReadConfig: cn.hutool.core.text.csv.CsvReadConfig setContainsHeader(boolean)><---<cn.hutool.core.text.csv.CsvReaderTest: void readTest3()>
<cn.hutool.core.text.csv.CsvReadConfig: cn.hutool.core.text.csv.CsvReadConfig setContainsHeader(boolean)><---<cn.hutool.core.text.csv.CsvReaderTest: void lineLimitWithHeaderTest()>
<cn.hutool.core.convert.ConverterRegistry: java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object,boolean)><---<love.forte.common.utils.convert.HutoolConverterManagerImpl: java.lang.Object convert(java.lang.reflect.Type,java.lang.Object,java.lang.Object)>
<cn.hutool.core.lang.Snowflake: void <init>(long,long,boolean)><---<com.lmaye.cloud.core.utils.IdUtils: void <clinit>()>
<cn.hutool.core.bean.BeanUtil: java.lang.Object mapToBean(java.util.Map,java.lang.Class,boolean)><---<cn.stylefeng.roses.core.request.RequestData: java.lang.Object parse(java.lang.Class)>
<cn.hutool.core.collection.CollUtil: java.util.HashSet newHashSet(boolean,java.util.Collection)><---<cn.hutool.db.Entity: cn.hutool.db.Entity setFieldNames(java.util.Collection)>
<cn.hutool.core.lang.Dict: cn.hutool.core.lang.Dict parseBean(java.lang.Object,boolean,boolean)><---<cn.hutool.db.Entity: cn.hutool.db.Entity parseBean(java.lang.Object,boolean,boolean)>
<cn.hutool.core.bean.BeanDesc: java.util.Map getPropMap(boolean)><---<cn.hutool.db.handler.HandleHelper: java.lang.Object handleRow(int,java.sql.ResultSetMetaData,java.sql.ResultSet,java.lang.Class)>
<cn.hutool.core.text.StrSplitter: java.util.List splitTrimIgnoreCase(java.lang.CharSequence,java.lang.String,int,boolean)><---<cn.hutool.db.sql.Condition: void parseValue()>
<cn.hutool.core.io.FileUtil: java.io.BufferedWriter getWriter(java.lang.String,java.nio.charset.Charset,boolean)><---<cn.hutool.setting.dialect.Props: void store(java.lang.String)>
<cn.hutool.core.io.FileUtil: java.io.PrintWriter getPrintWriter(java.io.File,java.nio.charset.Charset,boolean)><---<cn.hutool.setting.SettingLoader: void store(java.io.File)>
<cn.hutool.core.bean.copier.CopyOptions: cn.hutool.core.bean.copier.CopyOptions setTransientSupport(boolean)><---<cn.hutool.json.InternalJSONUtil: cn.hutool.core.bean.copier.CopyOptions toCopyOptions(cn.hutool.json.JSONConfig)>
<cn.hutool.core.convert.Converter: java.lang.Object convertWithCheck(java.lang.Object,java.lang.Object,boolean)><---<cn.hutool.json.JSONConverter: java.lang.Object jsonToBean(java.lang.reflect.Type,java.lang.Object,boolean)>
<cn.hutool.core.util.NumberUtil: java.lang.String toStr(java.lang.Number,boolean)><---<cn.hutool.json.serialize.JSONWriter: void writeNumberValue(java.lang.Number)>
<cn.hutool.core.thread.ThreadUtil: void interrupt(java.lang.Thread,boolean)><---<cn.hutool.cron.CronTimer: void stopTimer()>
<cn.hutool.core.date.Month: int getLastDay(int,boolean)><---<cn.hutool.cron.pattern.matcher.DayOfMonthMatcher: boolean isLastDayOfMonth(int,int,boolean)>
<cn.hutool.core.thread.ThreadFactoryBuilder: cn.hutool.core.thread.ThreadFactoryBuilder setDaemon(boolean)><---<cn.hutool.cron.Scheduler: cn.hutool.cron.Scheduler start()>
<cn.hutool.core.net.url.UrlQuery: cn.hutool.core.net.url.UrlQuery of(java.lang.String,java.nio.charset.Charset,boolean,boolean)><---<cn.hutool.http.HttpUtil: java.util.Map decodeParams(java.lang.String,java.nio.charset.Charset,boolean)>
<cn.hutool.core.io.FileUtil: java.io.File writeFromStream(java.io.InputStream,java.io.File,boolean)><---<cn.hutool.extra.compress.extractor.StreamExtractor: void extractInternal(java.io.File,int,cn.hutool.core.lang.Filter)>
<cn.hutool.core.io.FileUtil: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean)><---<org.dromara.jpom.common.JpomApplicationEvent: void checkPath()>
<cn.hutool.core.io.file.FileWriter: java.io.PrintWriter getPrintWriter(boolean)><---<org.dromara.jpom.util.LogRecorder: void <init>(java.io.File,java.nio.charset.Charset)>
<cn.hutool.core.io.file.Tailer: void start(boolean)><---<org.dromara.jpom.util.BaseFileTailWatcher: void start()>
<cn.hutool.core.lang.Assert: void isTrue(boolean)><---<com.yomahub.tlog.id.snowflake.UniqueIdGenerator: void setWorkerId(java.lang.Long)>
<cn.hutool.core.io.file.PathUtil: boolean exists(java.nio.file.Path,boolean)><---<cn.hutool.poi.ofd.OfdWriter: void <init>(java.nio.file.Path)>
<cn.hutool.core.comparator.PropertyComparator: void <init>(java.lang.String,boolean)><---<cn.hutool.core.comparator.PropertyComparatorTest: void sortNullTest()>
<cn.hutool.core.comparator.CompareUtil: java.util.Comparator comparingPinyin(java.util.function.Function,boolean)><---<cn.hutool.core.comparator.CompareUtilTest: void comparingPinyin()>
<cn.hutool.core.net.Ipv4Util: java.util.List list(java.lang.String,int,boolean)><---<cn.hutool.core.net.Ipv4UtilTest: void listTest()>
<cn.hutool.core.codec.PercentCodec: cn.hutool.core.codec.PercentCodec setEncodeSpaceAsPlus(boolean)><---<cn.hutool.core.net.RFC3986Test: void encodeAllTest()>
<cn.hutool.core.net.url.UrlQuery: cn.hutool.core.net.url.UrlQuery setStrict(boolean)><---<cn.hutool.core.net.UrlQueryTest: void issueI78PB1Test()>
<cn.hutool.core.text.CharSequenceUtil: int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)><---<cn.hutool.core.util.StrUtilTest: void lastIndexOfTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String replaceLast(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.StrUtilTest: void replaceLastTest()>
<cn.hutool.core.text.CharSequenceUtil: java.lang.String replaceFirst(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.StrUtilTest: void replaceFirstTest()>
<cn.hutool.core.util.StrUtil: java.lang.String truncateByByteLength(java.lang.String,java.nio.charset.Charset,int,int,boolean)><---<cn.hutool.core.util.StrUtilTest: void truncateByByteLengthTest()>
<cn.hutool.core.util.ReflectUtil: java.lang.reflect.Method getMethod(java.lang.Class,boolean,java.lang.String,java.lang.Class[])><---<cn.hutool.core.util.ReflectUtilTest: void getMethodBenchTest()>
<cn.hutool.core.text.CharSequenceUtil: boolean equals(java.lang.CharSequence,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.ReflectUtilTest: java.lang.reflect.Method getMethodWithReturnTypeCheck(java.lang.Class,boolean,java.lang.String,java.lang.Class[])>
<cn.hutool.core.util.ReflectUtil: java.lang.reflect.Method[] getMethodsDirectly(java.lang.Class,boolean,boolean)><---<cn.hutool.core.util.ReflectUtilTest: void getMethodsFromClassExtends()>
<cn.hutool.core.util.ArrayUtil: java.util.Map zip(java.lang.Object[],java.lang.Object[],boolean)><---<cn.hutool.core.util.ArrayUtilTest: void mapTest()>
<cn.hutool.core.util.XmlUtil: java.lang.String toStr(org.w3c.dom.Document-InterfaceClass-SuperClass,boolean)><---<cn.hutool.core.util.XmlUtilTest: void mapToXmlTest()>
<cn.hutool.core.util.XmlUtil: java.lang.String mapToXmlStr(java.util.Map,boolean)><---<cn.hutool.core.util.XmlUtilTest: void mapToXmlTestWithOmitXmlDeclaration()>
<cn.hutool.core.bean.BeanUtil: java.lang.Object fillBeanWithMap(java.util.Map,java.lang.Object,boolean)><---<cn.hutool.core.util.XmlUtilTest: void xmlToBeanTest2()>
<cn.hutool.core.util.XmlUtil: java.lang.String toStr(org.w3c.dom.Document-InterfaceClass-SuperClass,java.lang.String,boolean)><---<cn.hutool.core.util.XmlUtilTest: void formatTest()>
<cn.hutool.core.util.ReUtil: java.util.List getAllGroups(java.util.regex.Pattern,java.lang.CharSequence,boolean)><---<cn.hutool.core.util.ReUtilTest: void getAllGroupsTest()>
<cn.hutool.core.bean.BeanUtil: java.lang.Object fillBeanWithMapIgnoreCase(java.util.Map,java.lang.Object,boolean)><---<cn.hutool.core.bean.BeanUtilTest: void fillBeanWithMapIgnoreCaseTest()>
<cn.hutool.core.bean.BeanUtil: java.lang.Object toBeanIgnoreCase(java.lang.Object,java.lang.Class,boolean)><---<cn.hutool.core.bean.BeanUtilTest: void mapToBeanIgnoreCaseTest()>
<cn.hutool.core.bean.BeanUtilTest$SubPersonWithAlias: void setSlow(java.lang.Boolean)><---<cn.hutool.core.bean.BeanUtilTest: void beanToMapWithAliasTest()>
<cn.hutool.core.bean.BeanUtilTest$SubPersonWithAlias: void setBooleana(boolean)><---<cn.hutool.core.bean.BeanUtilTest: void beanToMapWithAliasTest()>
<cn.hutool.core.bean.BeanUtilTest$SubPersonWithAlias: void setBooleanb(java.lang.Boolean)><---<cn.hutool.core.bean.BeanUtilTest: void beanToMapWithAliasTest()>
<cn.hutool.core.bean.BeanUtil: java.util.Map beanToMap(java.lang.Object,java.util.Map,boolean,cn.hutool.core.lang.Editor-InterfaceClass-SuperClass)><---<cn.hutool.core.bean.BeanUtilTest: void toMapTest()>
<cn.hutool.core.swing.clipboard.ClipboardUtil: void listen(cn.hutool.core.swing.clipboard.ClipboardListener-InterfaceClass-SuperClass,boolean)><---<cn.hutool.core.swing.ClipboardMonitorTest: void monitorTest()>
<cn.hutool.core.date.CalendarUtil: java.util.Calendar beginOfWeek(java.util.Calendar,boolean)><---<cn.hutool.core.date.DateUtilTest: void beginOfWeekTest2()>
<cn.hutool.core.date.CalendarUtil: java.util.Calendar endOfWeek(java.util.Calendar,boolean)><---<cn.hutool.core.date.DateUtilTest: void beginOfWeekTest2()>
<cn.hutool.core.date.CalendarUtil: java.util.Calendar parse(java.lang.CharSequence,boolean,cn.hutool.core.date.format.DateParser-InterfaceClass-SuperClass)><---<cn.hutool.core.date.CalendarUtilTest: void lambda$parseTest$0()>
<cn.hutool.core.date.LocalDateTimeUtil: java.time.LocalDateTime endOfDay(java.time.LocalDateTime,boolean)><---<cn.hutool.core.date.LocalDateTimeUtilTest: void endOfDayTest()>
<cn.hutool.core.date.DateUtil: long betweenYear(java.util.Date,java.util.Date,boolean)><---<cn.hutool.core.date.DateBetweenTest: void issueI97U3JTest()>
<cn.hutool.core.date.DateTime: cn.hutool.core.date.DateTime setMutable(boolean)><---<cn.hutool.core.date.DateTimeTest: void mutableTest()>
<cn.hutool.core.date.DateTime: void <init>(java.lang.CharSequence,cn.hutool.core.date.format.DateParser-InterfaceClass-SuperClass,boolean)><---<cn.hutool.core.date.DateTimeTest: void lambda$ofTest$0()>
<cn.hutool.core.io.FileUtil: java.io.File copyFilesFromDir(java.io.File,java.io.File,boolean)><---<cn.hutool.core.io.FileUtilTest: void copyFilesFromDirTest()>
<cn.hutool.core.io.FileUtil: java.io.File createTempFile(java.lang.String,boolean)><---<cn.hutool.core.io.FileUtilTest: void createTempFileTest()>
<cn.hutool.core.io.FileUtil: java.io.File createTempFile(java.lang.String,java.lang.String,boolean)><---<cn.hutool.core.io.FileUtilTest: void createTempFileTest()>
<cn.hutool.core.io.FileTypeUtil: java.lang.String getType(java.io.InputStream,boolean)><---<cn.hutool.core.io.FileTypeUtilTest: void issue3024Test()>
<cn.hutool.core.io.checksum.crc16.CRC16Checksum: java.lang.String getHexValue(boolean)><---<cn.hutool.core.io.checksum.CrcTest: void paddingTest()>
<cn.hutool.core.'annotation'.AnnotationUtil: java.lang.'annotation'.Annotation[] getAnnotations(java.lang.reflect.AnnotatedElement,boolean)><---<cn.hutool.core.'annotation'.AnnotationUtilTest: void getCombinationAnnotationsTest()>
<cn.hutool.core.'annotation'.scanner.MetaAnnotationScanner: void <init>(boolean)><---<cn.hutool.core.'annotation'.scanner.MateAnnotationScannerTest: void getAnnotationsTest()>
<cn.hutool.core.exceptions.ExceptionUtil: java.lang.Throwable convertFromOrSuppressedThrowable(java.lang.Throwable,java.lang.Class,boolean)><---<cn.hutool.core.exceptions.ExceptionUtilTest: void convertTest()>
<cn.hutool.core.img.Img: cn.hutool.core.img.Img setPositionBaseCentre(boolean)><---<cn.hutool.core.img.ImgTest: void pressTextTest()>
<cn.hutool.core.lang.tree.Tree: java.util.List getParentsName(boolean)><---<cn.hutool.core.lang.tree.IssueI795INTest: void getParentsNameTest()>
<cn.hutool.core.lang.Validator: boolean isEmail(java.lang.CharSequence,boolean)><---<cn.hutool.core.lang.ValidatorTest: void isEmailTest()>
<cn.hutool.core.date.DateRange: void <init>(java.util.Date,java.util.Date,cn.hutool.core.date.DateField-Enum-SuperClass,int,boolean,boolean)><---<cn.hutool.core.lang.RangeTest: void rangeDayOfYearTest()>
<cn.hutool.core.lang.ClassScanner: cn.hutool.core.lang.ClassScanner setIgnoreLoadError(boolean)><---<cn.hutool.core.lang.ClassScanerTest: void scanAllPackageIgnoreLoadErrorTest()>
<cn.hutool.core.lang.ClassScanner: java.util.Set scan(boolean)><---<cn.hutool.core.lang.ClassScanerTest: void scanAllPackageIgnoreLoadErrorTest()>
<cn.hutool.core.lang.Snowflake: cn.hutool.core.lang.Pair getIdScopeByTimestamp(long,long,boolean)><---<cn.hutool.core.lang.SnowflakeTest: void snowflakeTestGetIdScope()>
<cn.hutool.core.map.ForestMap: void putAllNode(java.util.Collection,java.util.function.Function,java.util.function.Function,boolean)><---<cn.hutool.core.map.LinkedForestMapTest: void putAllNodeTest()>
<cn.hutool.core.map.MapUtil: java.util.HashMap newHashMap(boolean)><---<cn.hutool.core.map.MapUtilTest: void toObjectArrayTest()>
<cn.hutool.core.text.StrSplitter: java.util.List split(java.lang.CharSequence,char,int,boolean,boolean)><---<cn.hutool.core.text.split.StrSplitterTest: void splitByCharTest()>
<cn.hutool.core.text.StrSplitter: java.util.List split(java.lang.CharSequence,java.lang.String,int,boolean,boolean)><---<cn.hutool.core.text.split.StrSplitterTest: void splitByStrTest()>
<cn.hutool.core.text.StrSplitter: java.util.List split(java.lang.CharSequence,char,int,boolean,boolean,java.util.function.Function)><---<cn.hutool.core.text.split.StrSplitterTest: void splitMappingTest()>
<cn.hutool.core.text.NamingCase: java.lang.String toCamelCase(java.lang.CharSequence,char,boolean)><---<cn.hutool.core.text.NamingCaseTest: void issue3031Test()>
<cn.hutool.core.text.AntPathMatcher: cn.hutool.core.text.AntPathMatcher setCachePatterns(boolean)><---<cn.hutool.core.text.AntPathMatcherTest: void matchesTest3()>
<cn.hutool.core.text.AntPathMatcher: cn.hutool.core.text.AntPathMatcher setCaseSensitive(boolean)><---<cn.hutool.core.text.AntPathMatcherTest: void matchesTest3()>
<cn.hutool.core.text.AntPathMatcher: cn.hutool.core.text.AntPathMatcher setTrimTokens(boolean)><---<cn.hutool.core.text.AntPathMatcherTest: void matchesTest3()>
<cn.hutool.core.text.csv.CsvUtil: cn.hutool.core.text.csv.CsvWriter getWriter(java.io.File,java.nio.charset.Charset,boolean,cn.hutool.core.text.csv.CsvWriteConfig-SuperClass)><---<cn.hutool.core.text.csv.CsvWriterTest: void writeWithAliasTest()>
<cn.hutool.core.text.csv.CsvUtil: cn.hutool.core.text.csv.CsvWriter getWriter(java.io.File,java.nio.charset.Charset,boolean)><---<cn.hutool.core.text.csv.CsvWriterTest: void writeAppendTest()>
<cn.hutool.core.text.StrJoiner: cn.hutool.core.text.StrJoiner setWrapElement(boolean)><---<cn.hutool.core.text.StrJoinerTest: void joinWrapTest()>
<cn.hutool.core.convert.impl.ArrayConverter: void <init>(java.lang.Class,boolean)><---<cn.hutool.core.convert.ConvertToArrayTest: void toIntArrayTestIgnoreComponentErrorTest()>
<cn.hutool.core.convert.NumberChineseFormatter: java.lang.String format(java.math.BigDecimal,boolean,boolean)><---<cn.hutool.core.convert.NumberChineseFormatterTest: void dotTest()>
