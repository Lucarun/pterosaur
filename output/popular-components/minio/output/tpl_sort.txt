<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: java.io.InputStream getInputStream()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: io.minio.StatObjectResponse getStatObject()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.crawler.client.storage.StorageClient: boolean bucketExists(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.StatObjectResponse getStatObject(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.messages.Tags getObjectTags(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioConsumer: boolean bucketExists(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioConsumer: void makeBucket(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioConsumer: java.io.InputStream getObject(java.lang.String,io.minio.MinioClient,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioConsumer: void removeObject(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioConsumer: void copyObject(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioConsumer: void copyObject(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioEndpoint: boolean bucketExists(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioEndpoint: void makeBucket(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioEndpoint: void setBucketPolicy(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void putObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void doPutObject(org.apache.camel.Exchange,java.lang.String,java.lang.String,java.util.Map,java.util.Map,java.io.InputStream,long)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void deleteObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void deleteObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void deleteObjects(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void deleteBucket(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void deleteBucket(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void getObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void getObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void getPartialObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void getPartialObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void listObjects(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void listObjects(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void createPresignedUrl(io.minio.MinioClient,org.apache.camel.Exchange,io.minio.http.Method)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.apache.camel.component.minio.MinioProducer: void createPresignedUrl(io.minio.MinioClient,org.apache.camel.Exchange,io.minio.http.Method)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: java.util.List list()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: java.util.List fullList()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: java.util.List list(java.nio.file.Path)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: java.util.List getFullList(java.nio.file.Path)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: java.io.InputStream get(java.nio.file.Path)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: io.minio.StatObjectResponse getMetadata(java.nio.file.Path)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: void getAndSave(java.nio.file.Path,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.util.Map)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String,java.util.Map)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.File)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: void remove(java.nio.file.Path)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.gomyck.util.minio.MinioService: java.util.AbstractMap$SimpleEntry lambda$getMetadata$1(java.nio.file.Path)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.zcj.ext.minio.MinioUtil: boolean createBucketIfUnExist(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.zcj.ext.minio.MinioUtil: boolean createBucketIfUnExist(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.zcj.ext.minio.MinioUtil: java.util.List listObjectByBucket(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.zcj.ext.minio.MinioUtil: java.lang.String getObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.zcj.ext.minio.MinioUtil: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.zcj.ext.minio.MinioUtil: java.lang.String presignedGetObject(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.zcj.ext.minio.MinioUtil: boolean exist(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioFileInfo getFileInfo(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.zcj.ext.minio.MinioUtil: void removeObject(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: boolean isBucketExist(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: boolean createBucket(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String getObjectUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String createUploadUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: boolean composeObject(java.lang.String,java.lang.String,java.util.List,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: boolean composeObject(java.lang.String,java.lang.String,java.util.List,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObjectMultipart(java.lang.String,java.io.File,java.lang.String,java.lang.String,java.util.Map)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.io.File,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: void removeObject(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse copyObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse copyObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putDirObject(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.Boolean checkFileIsExist(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.touchbiz.common.utils.minio.MinioUtils: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: java.lang.Long getObjectEntity(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: void putObjectStream(java.io.InputStream,long,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: boolean checkBucketExist(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<io.polaris.framework.core.fs.spi.MinioDfsService: java.io.InputStream download(io.polaris.framework.core.fs.domain.FileInfoDto)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<io.polaris.framework.core.fs.spi.MinioDfsService: void upload(java.io.InputStream,io.polaris.framework.core.fs.domain.FileInfoDto)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<tech.mgl.utils.minio.MinIOUtils: boolean delete()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void updateObjectTags(java.lang.String,java.util.Map)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.Map getObjectTags(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void uploadObject(java.lang.String,org.lastaflute.web.ruts.multipart.MultipartFormFile)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void downloadObject(java.lang.String,org.lastaflute.web.servlet.request.stream.WrittenStreamOut)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void deleteObject(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.frameworkset.nosql.minio.Minio: boolean createBucket(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.frameworkset.nosql.minio.Minio: boolean createBucket(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.File,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(byte[],java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.InputStream,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.frameworkset.nosql.minio.Minio: org.frameworkset.nosql.minio.OSSFileContent getOssFile(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.frameworkset.nosql.minio.Minio: java.io.InputStream getOssFileStream(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.frameworkset.nosql.minio.Minio: void deleteOssFile(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.frameworkset.nosql.minio.Minio: boolean exist(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.frameworkset.nosql.minio.Minio: void createPath(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.jeecg.modules.jmreport.common.util.a.a: java.io.InputStream a(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.jeecg.modules.jmreport.common.util.a.a: void b(java.lang.String,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.io.InputStream getFile(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.io.InputStream getFileFromFullPath(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.List listFiles(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: boolean fileExists(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrl(java.lang.String,int)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrlFromFullMinioPath(java.lang.String,int)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void deleteFiles(java.util.List)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.Map getFileMetadata(java.lang.String)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void uploadFileWithMetadata(java.lang.String,java.io.InputStream,java.util.Map)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void createBucketIfDoesNotExist()>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void createBucketIfDoesNotExist()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: java.io.InputStream getInputStream()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: io.minio.StatObjectResponse getStatObject()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: boolean bucketExists(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.StatObjectResponse getStatObject(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.messages.Tags getObjectTags(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: boolean bucketExists(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: void makeBucket(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: java.io.InputStream getObject(java.lang.String,io.minio.MinioClient,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: void removeObject(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: void copyObject(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: void copyObject(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioEndpoint: boolean bucketExists(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioEndpoint: void makeBucket(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioEndpoint: void setBucketPolicy(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void doPutObject(org.apache.camel.Exchange,java.lang.String,java.lang.String,java.util.Map,java.util.Map,java.io.InputStream,long)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void deleteObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void deleteBucket(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void getObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void getPartialObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void listObjects(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void createPresignedUrl(io.minio.MinioClient,org.apache.camel.Exchange,io.minio.http.Method)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: java.util.List list()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: java.util.List fullList()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: java.util.List list(java.nio.file.Path)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: java.util.List getFullList(java.nio.file.Path)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: java.io.InputStream get(java.nio.file.Path)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: io.minio.StatObjectResponse getMetadata(java.nio.file.Path)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: void getAndSave(java.nio.file.Path,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.util.Map)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String,java.util.Map)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.File)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: void remove(java.nio.file.Path)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.gomyck.util.minio.MinioService: java.util.AbstractMap$SimpleEntry lambda$getMetadata$1(java.nio.file.Path)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: boolean createBucketIfUnExist(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: boolean createBucketIfUnExist(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.util.List listObjectByBucket(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.lang.String getObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.lang.String presignedGetObject(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: boolean exist(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioFileInfo getFileInfo(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: void removeObject(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: boolean isBucketExist(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: boolean createBucket(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String getObjectUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String createUploadUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: boolean composeObject(java.lang.String,java.lang.String,java.util.List,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: boolean composeObject(java.lang.String,java.lang.String,java.util.List,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObjectMultipart(java.lang.String,java.io.File,java.lang.String,java.lang.String,java.util.Map)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.io.File,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: void removeObject(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse copyObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse copyObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putDirObject(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.Boolean checkFileIsExist(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: java.lang.Long getObjectEntity(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: void putObjectStream(java.io.InputStream,long,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: boolean checkBucketExist(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<io.polaris.framework.core.fs.spi.MinioDfsService: java.io.InputStream download(io.polaris.framework.core.fs.domain.FileInfoDto)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<io.polaris.framework.core.fs.spi.MinioDfsService: void upload(java.io.InputStream,io.polaris.framework.core.fs.domain.FileInfoDto)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<tech.mgl.utils.minio.MinIOUtils: boolean delete()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void updateObjectTags(java.lang.String,java.util.Map)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.Map getObjectTags(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void uploadObject(java.lang.String,org.lastaflute.web.ruts.multipart.MultipartFormFile)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void downloadObject(java.lang.String,org.lastaflute.web.servlet.request.stream.WrittenStreamOut)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void deleteObject(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: boolean createBucket(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: boolean createBucket(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.File,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(byte[],java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.InputStream,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: org.frameworkset.nosql.minio.OSSFileContent getOssFile(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: java.io.InputStream getOssFileStream(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: void deleteOssFile(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: boolean exist(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: void createPath(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.io.InputStream a(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: void b(java.lang.String,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.io.InputStream getFile(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.io.InputStream getFileFromFullPath(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.List listFiles(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: boolean fileExists(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrl(java.lang.String,int)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrlFromFullMinioPath(java.lang.String,int)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void deleteFiles(java.util.List)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.Map getFileMetadata(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void uploadFileWithMetadata(java.lang.String,java.io.InputStream,java.util.Map)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void createBucketIfDoesNotExist()>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void createBucketIfDoesNotExist()>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: java.io.InputStream getInputStream()>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: io.minio.StatObjectResponse getStatObject()>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.StatObjectResponse getStatObject(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.messages.Tags getObjectTags(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: java.io.InputStream getObject(java.lang.String,io.minio.MinioClient,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: void removeObject(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: void copyObject(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: void copyObject(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void doPutObject(org.apache.camel.Exchange,java.lang.String,java.lang.String,java.util.Map,java.util.Map,java.io.InputStream,long)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void deleteObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void getObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void getPartialObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.apache.camel.component.minio.MinioProducer: void createPresignedUrl(io.minio.MinioClient,org.apache.camel.Exchange,io.minio.http.Method)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.gomyck.util.minio.MinioService: java.io.InputStream get(java.nio.file.Path)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.gomyck.util.minio.MinioService: io.minio.StatObjectResponse getMetadata(java.nio.file.Path)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.gomyck.util.minio.MinioService: void getAndSave(java.nio.file.Path,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.util.Map)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String,java.util.Map)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.File)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.gomyck.util.minio.MinioService: void remove(java.nio.file.Path)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.gomyck.util.minio.MinioService: java.util.AbstractMap$SimpleEntry lambda$getMetadata$1(java.nio.file.Path)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.lang.String getObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.lang.String presignedGetObject(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: boolean exist(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioFileInfo getFileInfo(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: void removeObject(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String getObjectUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String createUploadUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: boolean composeObject(java.lang.String,java.lang.String,java.util.List,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: boolean composeObject(java.lang.String,java.lang.String,java.util.List,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObjectMultipart(java.lang.String,java.io.File,java.lang.String,java.lang.String,java.util.Map)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.io.File,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: void removeObject(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse copyObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse copyObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putDirObject(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.Boolean checkFileIsExist(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: java.lang.Long getObjectEntity(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: void putObjectStream(java.io.InputStream,long,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<io.polaris.framework.core.fs.spi.MinioDfsService: java.io.InputStream download(io.polaris.framework.core.fs.domain.FileInfoDto)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<io.polaris.framework.core.fs.spi.MinioDfsService: void upload(java.io.InputStream,io.polaris.framework.core.fs.domain.FileInfoDto)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<tech.mgl.utils.minio.MinIOUtils: boolean delete()>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void updateObjectTags(java.lang.String,java.util.Map)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.Map getObjectTags(java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void uploadObject(java.lang.String,org.lastaflute.web.ruts.multipart.MultipartFormFile)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void downloadObject(java.lang.String,org.lastaflute.web.servlet.request.stream.WrittenStreamOut)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void deleteObject(java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.File,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(byte[],java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.InputStream,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: org.frameworkset.nosql.minio.OSSFileContent getOssFile(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: java.io.InputStream getOssFileStream(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: void deleteOssFile(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: boolean exist(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: void createPath(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.io.InputStream a(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: void b(java.lang.String,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.io.InputStream getFile(java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.io.InputStream getFileFromFullPath(java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: boolean fileExists(java.lang.String)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrl(java.lang.String,int)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrlFromFullMinioPath(java.lang.String,int)>
<io.minio.ObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void uploadFileWithMetadata(java.lang.String,java.io.InputStream,java.util.Map)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void putObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void doPutObject(org.apache.camel.Exchange,java.lang.String,java.lang.String,java.util.Map,java.util.Map,java.io.InputStream,long)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.util.Map)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String,java.util.Map)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObjectMultipart(java.lang.String,java.io.File,java.lang.String,java.lang.String,java.util.Map)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.io.File,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putDirObject(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: void putObjectStream(java.io.InputStream,long,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<io.polaris.framework.core.fs.spi.MinioDfsService: void upload(java.io.InputStream,io.polaris.framework.core.fs.domain.FileInfoDto)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void uploadObject(java.lang.String,org.lastaflute.web.ruts.multipart.MultipartFormFile)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.File,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(byte[],java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.InputStream,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<org.frameworkset.nosql.minio.Minio: void createPath(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void uploadFileWithMetadata(java.lang.String,java.io.InputStream,java.util.Map)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<org.apache.camel.component.minio.MinioProducer: void doPutObject(org.apache.camel.Exchange,java.lang.String,java.lang.String,java.util.Map,java.util.Map,java.io.InputStream,long)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.util.Map)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String,java.util.Map)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObjectMultipart(java.lang.String,java.io.File,java.lang.String,java.lang.String,java.util.Map)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.io.File,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putDirObject(java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: void putObjectStream(java.io.InputStream,long,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<io.polaris.framework.core.fs.spi.MinioDfsService: void upload(java.io.InputStream,io.polaris.framework.core.fs.domain.FileInfoDto)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void uploadObject(java.lang.String,org.lastaflute.web.ruts.multipart.MultipartFormFile)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.File,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(byte[],java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.InputStream,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<org.frameworkset.nosql.minio.Minio: void createPath(java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void uploadFileWithMetadata(java.lang.String,java.io.InputStream,java.util.Map)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<org.apache.camel.component.minio.MinioProducer: void doPutObject(org.apache.camel.Exchange,java.lang.String,java.lang.String,java.util.Map,java.util.Map,java.io.InputStream,long)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.util.Map)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String,java.util.Map)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObjectMultipart(java.lang.String,java.io.File,java.lang.String,java.lang.String,java.util.Map)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.io.File,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putDirObject(java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: void putObjectStream(java.io.InputStream,long,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<io.polaris.framework.core.fs.spi.MinioDfsService: void upload(java.io.InputStream,io.polaris.framework.core.fs.domain.FileInfoDto)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void uploadObject(java.lang.String,org.lastaflute.web.ruts.multipart.MultipartFormFile)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.File,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(byte[],java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<org.frameworkset.nosql.minio.Minio: java.lang.String saveOssFile(java.io.InputStream,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<org.frameworkset.nosql.minio.Minio: void createPath(java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void uploadFileWithMetadata(java.lang.String,java.io.InputStream,java.util.Map)>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: void connect()>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<org.codelibs.fess.crawler.client.storage.StorageClient: void init()>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<org.apache.camel.component.minio.MinioComponentVerifierExtension: org.apache.camel.component.extension.ComponentVerifierExtension$Result verifyConnectivity(java.util.Map)>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<org.apache.camel.component.minio.MinioEndpoint: io.minio.MinioClient createMinioClient()>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioUtil getInstance(java.lang.String,int,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: void <init>(com.touchbiz.common.utils.minio.configuration.MinioConfig)>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: void <init>(com.touchbiz.common.utils.minio.configuration.MinioConfig)>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: io.milvus.bulkwriter.storage.client.MinioStorageClient getStorageClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,okhttp3.OkHttpClient)>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<tech.mgl.utils.minio.MinIOUtils: boolean delete()>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: io.minio.MinioClient createClient(org.codelibs.fess.mylasta.direction.FessConfig)>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<org.frameworkset.nosql.minio.MinioHelper: boolean init(org.frameworkset.nosql.minio.MinioConfig)>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<org.jeecg.modules.jmreport.common.util.a.a: io.minio.MinioClient a(java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.MinioClient$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapterAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: void connect()>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<org.codelibs.fess.crawler.client.storage.StorageClient: void init()>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<org.apache.camel.component.minio.MinioComponentVerifierExtension: org.apache.camel.component.extension.ComponentVerifierExtension$Result verifyConnectivity(java.util.Map)>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<org.apache.camel.component.minio.MinioEndpoint: io.minio.MinioClient createMinioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioUtil getInstance(java.lang.String,int,java.lang.String,java.lang.String)>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<com.touchbiz.common.utils.minio.MinioUtils: void <init>(com.touchbiz.common.utils.minio.configuration.MinioConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<com.touchbiz.common.utils.minio.MinioUtils: void <init>(com.touchbiz.common.utils.minio.configuration.MinioConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: io.milvus.bulkwriter.storage.client.MinioStorageClient getStorageClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,okhttp3.OkHttpClient)>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<tech.mgl.utils.minio.MinIOUtils: boolean delete()>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: io.minio.MinioClient createClient(org.codelibs.fess.mylasta.direction.FessConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<org.frameworkset.nosql.minio.MinioHelper: boolean init(org.frameworkset.nosql.minio.MinioConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<org.jeecg.modules.jmreport.common.util.a.a: io.minio.MinioClient a(java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient$Builder: io.minio.MinioClient build()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapterAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: java.io.InputStream getInputStream()>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioConsumer: java.io.InputStream getObject(java.lang.String,io.minio.MinioClient,java.lang.String)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void getObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void getObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void getPartialObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void getPartialObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: java.io.InputStream get(java.nio.file.Path)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<com.zcj.ext.minio.MinioUtil: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<io.polaris.framework.core.fs.spi.MinioDfsService: java.io.InputStream download(io.polaris.framework.core.fs.domain.FileInfoDto)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void downloadObject(java.lang.String,org.lastaflute.web.servlet.request.stream.WrittenStreamOut)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.frameworkset.nosql.minio.Minio: org.frameworkset.nosql.minio.OSSFileContent getOssFile(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.frameworkset.nosql.minio.Minio: java.io.InputStream getOssFileStream(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<org.jeecg.modules.jmreport.common.util.a.a: java.io.InputStream a(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.io.InputStream getFile(java.lang.String)>
<io.minio.MinioClient: io.minio.GetObjectResponse getObject(io.minio.GetObjectArgs-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.io.InputStream getFileFromFullPath(java.lang.String)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: void connect()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: void init()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<org.apache.camel.component.minio.MinioComponentVerifierExtension: org.apache.camel.component.extension.ComponentVerifierExtension$Result verifyConnectivity(java.util.Map)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<org.apache.camel.component.minio.MinioEndpoint: io.minio.MinioClient createMinioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: void <init>(com.touchbiz.common.utils.minio.configuration.MinioConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: void <init>(com.touchbiz.common.utils.minio.configuration.MinioConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: io.milvus.bulkwriter.storage.client.MinioStorageClient getStorageClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,okhttp3.OkHttpClient)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<tech.mgl.utils.minio.MinIOUtils: boolean delete()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: io.minio.MinioClient createClient(org.codelibs.fess.mylasta.direction.FessConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<org.frameworkset.nosql.minio.MinioHelper: boolean init(org.frameworkset.nosql.minio.MinioConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: io.minio.MinioClient a(java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapterAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: void connect()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: void init()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<org.apache.camel.component.minio.MinioComponentVerifierExtension: org.apache.camel.component.extension.ComponentVerifierExtension$Result verifyConnectivity(java.util.Map)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<org.apache.camel.component.minio.MinioEndpoint: io.minio.MinioClient createMinioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioUtil getInstance(java.lang.String,int,java.lang.String,java.lang.String)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: void <init>(com.touchbiz.common.utils.minio.configuration.MinioConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: void <init>(com.touchbiz.common.utils.minio.configuration.MinioConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<tech.mgl.utils.minio.MinIOUtils: boolean delete()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: io.minio.MinioClient createClient(org.codelibs.fess.mylasta.direction.FessConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<org.frameworkset.nosql.minio.MinioHelper: boolean init(org.frameworkset.nosql.minio.MinioConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: io.minio.MinioClient a(java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapterAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: java.io.InputStream getInputStream()>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<org.apache.camel.component.minio.MinioConsumer: java.io.InputStream getObject(java.lang.String,io.minio.MinioClient,java.lang.String)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<org.apache.camel.component.minio.MinioProducer: void getObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<org.apache.camel.component.minio.MinioProducer: void getPartialObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: java.io.InputStream get(java.nio.file.Path)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<com.zcj.ext.minio.MinioUtil: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<io.polaris.framework.core.fs.spi.MinioDfsService: java.io.InputStream download(io.polaris.framework.core.fs.domain.FileInfoDto)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void downloadObject(java.lang.String,org.lastaflute.web.servlet.request.stream.WrittenStreamOut)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<org.frameworkset.nosql.minio.Minio: org.frameworkset.nosql.minio.OSSFileContent getOssFile(java.lang.String,java.lang.String)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<org.frameworkset.nosql.minio.Minio: java.io.InputStream getOssFileStream(java.lang.String,java.lang.String)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<org.jeecg.modules.jmreport.common.util.a.a: java.io.InputStream a(java.lang.String,java.lang.String)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.io.InputStream getFile(java.lang.String)>
<io.minio.GetObjectArgs: io.minio.GetObjectArgs$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.io.InputStream getFileFromFullPath(java.lang.String)>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<org.codelibs.fess.crawler.client.storage.StorageClient: boolean bucketExists(java.lang.String)>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<org.apache.camel.component.minio.MinioConsumer: boolean bucketExists(java.lang.String)>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<org.apache.camel.component.minio.MinioEndpoint: boolean bucketExists(java.lang.String)>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<com.zcj.ext.minio.MinioUtil: boolean createBucketIfUnExist(java.lang.String)>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: boolean isBucketExist(java.lang.String)>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: boolean checkBucketExist(java.lang.String)>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<org.frameworkset.nosql.minio.Minio: boolean createBucket(java.lang.String)>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void createBucketIfDoesNotExist()>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<org.codelibs.fess.crawler.client.storage.StorageClient: boolean bucketExists(java.lang.String)>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<org.apache.camel.component.minio.MinioConsumer: boolean bucketExists(java.lang.String)>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<org.apache.camel.component.minio.MinioEndpoint: boolean bucketExists(java.lang.String)>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<com.zcj.ext.minio.MinioUtil: boolean createBucketIfUnExist(java.lang.String)>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: boolean isBucketExist(java.lang.String)>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: boolean checkBucketExist(java.lang.String)>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<org.frameworkset.nosql.minio.Minio: boolean createBucket(java.lang.String)>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void createBucketIfDoesNotExist()>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<org.apache.camel.component.minio.MinioProducer: void listObjects(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: java.util.List list()>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: java.util.List fullList()>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: java.util.List list(java.nio.file.Path)>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: java.util.List getFullList(java.nio.file.Path)>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<com.zcj.ext.minio.MinioUtil: java.util.List listObjectByBucket(java.lang.String)>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.List listFiles(java.lang.String)>
<io.minio.ListObjectsArgs: io.minio.ListObjectsArgs$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.Map getFileMetadata(java.lang.String)>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void listObjects(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void listObjects(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: java.util.List list()>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: java.util.List fullList()>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: java.util.List list(java.nio.file.Path)>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: java.util.List getFullList(java.nio.file.Path)>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<com.zcj.ext.minio.MinioUtil: java.util.List listObjectByBucket(java.lang.String)>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.List listFiles(java.lang.String)>
<io.minio.MinioClient: java.lang.Iterable listObjects(io.minio.ListObjectsArgs-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.Map getFileMetadata(java.lang.String)>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<org.apache.camel.component.minio.MinioConsumer: void makeBucket(java.lang.String)>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<org.apache.camel.component.minio.MinioEndpoint: void makeBucket(java.lang.String)>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<com.zcj.ext.minio.MinioUtil: boolean createBucketIfUnExist(java.lang.String)>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: boolean createBucket(java.lang.String)>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<org.frameworkset.nosql.minio.Minio: boolean createBucket(java.lang.String)>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void createBucketIfDoesNotExist()>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<org.apache.camel.component.minio.MinioConsumer: void makeBucket(java.lang.String)>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<org.apache.camel.component.minio.MinioEndpoint: void makeBucket(java.lang.String)>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<com.roncoo.spring.boot.autoconfigure.minio.MinioAutoConfiguration: io.minio.MinioClient minioClient()>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<com.zcj.ext.minio.MinioUtil: boolean createBucketIfUnExist(java.lang.String)>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: boolean createBucket(java.lang.String)>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<io.polaris.framework.core.fs.spi.MinioDfsService: io.minio.MinioClient buildClient()>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<org.frameworkset.nosql.minio.Minio: boolean createBucket(java.lang.String)>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void createBucketIfDoesNotExist()>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: io.minio.StatObjectResponse getStatObject()>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.StatObjectResponse getStatObject(java.lang.String,java.lang.String)>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: io.minio.StatObjectResponse getMetadata(java.nio.file.Path)>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: java.util.AbstractMap$SimpleEntry lambda$getMetadata$1(java.nio.file.Path)>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<com.zcj.ext.minio.MinioUtil: boolean exist(java.lang.String,java.lang.String)>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioFileInfo getFileInfo(java.lang.String,java.lang.String)>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.Boolean checkFileIsExist(java.lang.String,java.lang.String)>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: java.lang.Long getObjectEntity(java.lang.String,java.lang.String)>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<org.frameworkset.nosql.minio.Minio: boolean exist(java.lang.String,java.lang.String)>
<io.minio.StatObjectArgs: io.minio.StatObjectArgs$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: boolean fileExists(java.lang.String)>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: io.minio.StatObjectResponse getStatObject()>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.StatObjectResponse getStatObject(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: io.minio.StatObjectResponse getMetadata(java.nio.file.Path)>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: java.util.AbstractMap$SimpleEntry lambda$getMetadata$1(java.nio.file.Path)>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<com.zcj.ext.minio.MinioUtil: boolean exist(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioFileInfo getFileInfo(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.Boolean checkFileIsExist(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: java.io.InputStream getObject(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: java.lang.Long getObjectEntity(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<org.frameworkset.nosql.minio.Minio: boolean exist(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.StatObjectResponse statObject(io.minio.StatObjectArgs-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: boolean fileExists(java.lang.String)>
<io.minio.Result: java.lang.Object get()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.Result: java.lang.Object get()><---<org.apache.camel.component.minio.MinioConsumer: java.util.Deque createExchanges(java.util.Iterator)>
<io.minio.Result: java.lang.Object get()><---<org.apache.camel.component.minio.MinioConsumer: java.util.Deque createExchanges(java.util.Iterator)>
<io.minio.Result: java.lang.Object get()><---<com.gomyck.util.minio.MinioService: io.minio.messages.Item lambda$getItems$0(io.minio.Result)>
<io.minio.Result: java.lang.Object get()><---<com.zcj.ext.minio.MinioUtil: java.util.List listObjectByBucket(java.lang.String)>
<io.minio.Result: java.lang.Object get()><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.Result: java.lang.Object get()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.Result: java.lang.Object get()><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.Result: java.lang.Object get()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void deleteFiles(java.util.List)>
<io.minio.Result: java.lang.Object get()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.Map getFileMetadata(java.lang.String)>
<io.minio.Result: java.lang.Object get()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: boolean filterDirectoryFiles(io.minio.Result)>
<io.minio.Result: java.lang.Object get()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String getFileSubPath(io.minio.Result)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder prefix(java.lang.String)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder prefix(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder prefix(java.lang.String)><---<com.gomyck.util.minio.MinioService: java.util.List list()>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder prefix(java.lang.String)><---<com.gomyck.util.minio.MinioService: java.util.List list(java.nio.file.Path)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder prefix(java.lang.String)><---<com.gomyck.util.minio.MinioService: java.util.List getFullList(java.nio.file.Path)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder prefix(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder prefix(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder prefix(java.lang.String)><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder prefix(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.List listFiles(java.lang.String)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder prefix(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.Map getFileMetadata(java.lang.String)>
<io.minio.GenericResponse: okhttp3.Headers headers()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.GenericResponse: okhttp3.Headers headers()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.GenericResponse: okhttp3.Headers headers()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.GenericResponse: okhttp3.Headers headers()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.GenericResponse: okhttp3.Headers headers()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.GenericResponse: okhttp3.Headers headers()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.GenericResponse: okhttp3.Headers headers()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.GenericResponse: okhttp3.Headers headers()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.GenericResponse: okhttp3.Headers headers()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.GenericResponse: okhttp3.Headers headers()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.MinioClient: void removeObject(io.minio.RemoveObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioConsumer: void removeObject(java.lang.String,java.lang.String)>
<io.minio.MinioClient: void removeObject(io.minio.RemoveObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void deleteObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: void removeObject(io.minio.RemoveObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void deleteObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: void removeObject(io.minio.RemoveObjectArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: void remove(java.nio.file.Path)>
<io.minio.MinioClient: void removeObject(io.minio.RemoveObjectArgs-SuperClass)><---<com.zcj.ext.minio.MinioUtil: void removeObject(java.lang.String,java.lang.String)>
<io.minio.MinioClient: void removeObject(io.minio.RemoveObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: void removeObject(java.lang.String,java.lang.String)>
<io.minio.MinioClient: void removeObject(io.minio.RemoveObjectArgs-SuperClass)><---<tech.mgl.utils.minio.MinIOUtils: boolean delete()>
<io.minio.MinioClient: void removeObject(io.minio.RemoveObjectArgs-SuperClass)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void deleteObject(java.lang.String)>
<io.minio.MinioClient: void removeObject(io.minio.RemoveObjectArgs-SuperClass)><---<org.frameworkset.nosql.minio.Minio: void deleteOssFile(java.lang.String,java.lang.String)>
<io.minio.MinioClient: void removeObject(io.minio.RemoveObjectArgs-SuperClass)><---<org.jeecg.modules.jmreport.common.util.a.a: void b(java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder contentType(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String,java.util.Map)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder contentType(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder contentType(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder contentType(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder contentType(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder contentType(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObjectMultipart(java.lang.String,java.io.File,java.lang.String,java.lang.String,java.util.Map)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder contentType(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.io.File,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder contentType(java.lang.String)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void uploadObject(java.lang.String,org.lastaflute.web.ruts.multipart.MultipartFormFile)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder contentType(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(org.springframework.web.multipart.MultipartFile,java.lang.String,java.lang.String)>
<io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder contentType(java.lang.String)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.io.InputStream,java.lang.String)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder recursive(boolean)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder recursive(boolean)><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder recursive(boolean)><---<com.gomyck.util.minio.MinioService: java.util.List list()>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder recursive(boolean)><---<com.gomyck.util.minio.MinioService: java.util.List list(java.nio.file.Path)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder recursive(boolean)><---<com.zcj.ext.minio.MinioUtil: java.util.List listObjectByBucket(java.lang.String)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder recursive(boolean)><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder recursive(boolean)><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder recursive(boolean)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder recursive(boolean)><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.messages.Item: java.lang.String objectName()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.messages.Item: java.lang.String objectName()><---<org.apache.camel.component.minio.MinioConsumer: java.util.Deque createExchanges(java.util.Iterator)>
<io.minio.messages.Item: java.lang.String objectName()><---<org.apache.camel.component.minio.MinioConsumer: java.util.Deque createExchanges(java.util.Iterator)>
<io.minio.messages.Item: java.lang.String objectName()><---<com.zcj.ext.minio.MinioUtil: java.util.List listObjectByBucket(java.lang.String)>
<io.minio.messages.Item: java.lang.String objectName()><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List listObjectNames(java.lang.String,java.lang.String,java.lang.Boolean)>
<io.minio.messages.Item: java.lang.String objectName()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.messages.Item: java.lang.String objectName()><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.messages.Item: java.lang.String objectName()><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.messages.Item: java.lang.String objectName()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String getFileSubPath(io.minio.Result)>
<io.minio.RemoveObjectArgs: io.minio.RemoveObjectArgs$Builder builder()><---<org.apache.camel.component.minio.MinioConsumer: void removeObject(java.lang.String,java.lang.String)>
<io.minio.RemoveObjectArgs: io.minio.RemoveObjectArgs$Builder builder()><---<org.apache.camel.component.minio.MinioProducer: void deleteObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.RemoveObjectArgs: io.minio.RemoveObjectArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: void remove(java.nio.file.Path)>
<io.minio.RemoveObjectArgs: io.minio.RemoveObjectArgs$Builder builder()><---<com.zcj.ext.minio.MinioUtil: void removeObject(java.lang.String,java.lang.String)>
<io.minio.RemoveObjectArgs: io.minio.RemoveObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: void removeObject(java.lang.String,java.lang.String)>
<io.minio.RemoveObjectArgs: io.minio.RemoveObjectArgs$Builder builder()><---<tech.mgl.utils.minio.MinIOUtils: boolean delete()>
<io.minio.RemoveObjectArgs: io.minio.RemoveObjectArgs$Builder builder()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void deleteObject(java.lang.String)>
<io.minio.RemoveObjectArgs: io.minio.RemoveObjectArgs$Builder builder()><---<org.frameworkset.nosql.minio.Minio: void deleteOssFile(java.lang.String,java.lang.String)>
<io.minio.RemoveObjectArgs: io.minio.RemoveObjectArgs$Builder builder()><---<org.jeecg.modules.jmreport.common.util.a.a: void b(java.lang.String,java.lang.String)>
<io.minio.MinioClient: java.lang.String getPresignedObjectUrl(io.minio.GetPresignedObjectUrlArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void createPresignedUrl(io.minio.MinioClient,org.apache.camel.Exchange,io.minio.http.Method)>
<io.minio.MinioClient: java.lang.String getPresignedObjectUrl(io.minio.GetPresignedObjectUrlArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void createPresignedUrl(io.minio.MinioClient,org.apache.camel.Exchange,io.minio.http.Method)>
<io.minio.MinioClient: java.lang.String getPresignedObjectUrl(io.minio.GetPresignedObjectUrlArgs-SuperClass)><---<com.zcj.ext.minio.MinioUtil: java.lang.String presignedGetObject(java.lang.String,java.lang.String)>
<io.minio.MinioClient: java.lang.String getPresignedObjectUrl(io.minio.GetPresignedObjectUrlArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String getObjectUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.MinioClient: java.lang.String getPresignedObjectUrl(io.minio.GetPresignedObjectUrlArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String createUploadUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.MinioClient: java.lang.String getPresignedObjectUrl(io.minio.GetPresignedObjectUrlArgs-SuperClass)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.MinioClient: java.lang.String getPresignedObjectUrl(io.minio.GetPresignedObjectUrlArgs-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrl(java.lang.String,int)>
<io.minio.MinioClient: java.lang.String getPresignedObjectUrl(io.minio.GetPresignedObjectUrlArgs-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrlFromFullMinioPath(java.lang.String,int)>
<io.minio.http.HttpUtils: void validateNotNull(java.lang.Object,java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder endpoint(okhttp3.HttpUrl)>
<io.minio.http.HttpUtils: void validateNotNull(java.lang.Object,java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder endpoint(java.net.URL)>
<io.minio.http.HttpUtils: void validateNotNull(java.lang.Object,java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder region(java.lang.String)>
<io.minio.http.HttpUtils: void validateNotNull(java.lang.Object,java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder credentialsProvider(io.minio.credentials.Provider)>
<io.minio.http.HttpUtils: void validateNotNull(java.lang.Object,java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder httpClient(okhttp3.OkHttpClient)>
<io.minio.http.HttpUtils: void validateNotNull(java.lang.Object,java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient build()>
<io.minio.http.HttpUtils: void validateNotNull(java.lang.Object,java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient build()>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder method(io.minio.http.Method-Enum-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void createPresignedUrl(io.minio.MinioClient,org.apache.camel.Exchange,io.minio.http.Method)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder method(io.minio.http.Method-Enum-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void createPresignedUrl(io.minio.MinioClient,org.apache.camel.Exchange,io.minio.http.Method)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder method(io.minio.http.Method-Enum-SuperClass)><---<com.zcj.ext.minio.MinioUtil: java.lang.String presignedGetObject(java.lang.String,java.lang.String)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder method(io.minio.http.Method-Enum-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String getObjectUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder method(io.minio.http.Method-Enum-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String createUploadUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder method(io.minio.http.Method-Enum-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrl(java.lang.String,int)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder method(io.minio.http.Method-Enum-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrlFromFullMinioPath(java.lang.String,int)>
<io.minio.GetPresignedObjectUrlArgs: io.minio.GetPresignedObjectUrlArgs$Builder builder()><---<org.apache.camel.component.minio.MinioProducer: void createPresignedUrl(io.minio.MinioClient,org.apache.camel.Exchange,io.minio.http.Method)>
<io.minio.GetPresignedObjectUrlArgs: io.minio.GetPresignedObjectUrlArgs$Builder builder()><---<com.zcj.ext.minio.MinioUtil: java.lang.String presignedGetObject(java.lang.String,java.lang.String)>
<io.minio.GetPresignedObjectUrlArgs: io.minio.GetPresignedObjectUrlArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String getObjectUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.GetPresignedObjectUrlArgs: io.minio.GetPresignedObjectUrlArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String createUploadUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.GetPresignedObjectUrlArgs: io.minio.GetPresignedObjectUrlArgs$Builder builder()><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.GetPresignedObjectUrlArgs: io.minio.GetPresignedObjectUrlArgs$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrl(java.lang.String,int)>
<io.minio.GetPresignedObjectUrlArgs: io.minio.GetPresignedObjectUrlArgs$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrlFromFullMinioPath(java.lang.String,int)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder region(java.lang.String)><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: void connect()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder region(java.lang.String)><---<org.apache.camel.component.minio.MinioComponentVerifierExtension: org.apache.camel.component.extension.ComponentVerifierExtension$Result verifyConnectivity(java.util.Map)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder region(java.lang.String)><---<org.apache.camel.component.minio.MinioEndpoint: io.minio.MinioClient createMinioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder region(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: void <init>(com.touchbiz.common.utils.minio.configuration.MinioConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder region(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: void <init>(com.touchbiz.common.utils.minio.configuration.MinioConfig)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder region(java.lang.String)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: io.milvus.bulkwriter.storage.client.MinioStorageClient getStorageClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,okhttp3.OkHttpClient)>
<io.minio.StatObjectResponse: long size()><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: long getContentLengthLong()>
<io.minio.StatObjectResponse: long size()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.StatObjectResponse: long size()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.StatObjectResponse: long size()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.StatObjectResponse: long size()><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioFileInfo getFileInfo(java.lang.String,java.lang.String)>
<io.minio.StatObjectResponse: long size()><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: java.lang.Long getObjectEntity(java.lang.String,java.lang.String)>
<io.minio.ObjectWriteResponse: java.lang.String versionId()><---<org.apache.camel.component.minio.MinioProducer: void putObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ObjectWriteResponse: java.lang.String versionId()><---<org.apache.camel.component.minio.MinioProducer: void putObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ObjectWriteResponse: java.lang.String versionId()><---<org.apache.camel.component.minio.MinioProducer: void doPutObject(org.apache.camel.Exchange,java.lang.String,java.lang.String,java.util.Map,java.util.Map,java.io.InputStream,long)>
<io.minio.ObjectWriteResponse: java.lang.String versionId()><---<org.apache.camel.component.minio.MinioProducer: void doPutObject(org.apache.camel.Exchange,java.lang.String,java.lang.String,java.util.Map,java.util.Map,java.io.InputStream,long)>
<io.minio.ObjectWriteResponse: java.lang.String versionId()><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ObjectWriteResponse: java.lang.String versionId()><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.errors.ErrorResponseException: io.minio.messages.ErrorResponse errorResponse()><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.StatObjectResponse getStatObject(java.lang.String,java.lang.String)>
<io.minio.errors.ErrorResponseException: io.minio.messages.ErrorResponse errorResponse()><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.messages.Tags getObjectTags(java.lang.String,java.lang.String)>
<io.minio.errors.ErrorResponseException: io.minio.messages.ErrorResponse errorResponse()><---<io.milvus.bulkwriter.RemoteBulkWriter: boolean objectExists(java.lang.String)>
<io.minio.errors.ErrorResponseException: io.minio.messages.ErrorResponse errorResponse()><---<io.milvus.bulkwriter.RemoteBulkWriter: boolean objectExists(java.lang.String)>
<io.minio.errors.ErrorResponseException: io.minio.messages.ErrorResponse errorResponse()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.messages.Item: boolean isDir()><---<org.apache.camel.component.minio.MinioConsumer: java.util.Deque createExchanges(java.util.Iterator)>
<io.minio.messages.Item: boolean isDir()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.messages.Item: boolean isDir()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.messages.Item: boolean isDir()><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.messages.Item: boolean isDir()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: boolean filterDirectoryFiles(io.minio.Result)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder expiry(int)><---<org.apache.camel.component.minio.MinioProducer: void createPresignedUrl(io.minio.MinioClient,org.apache.camel.Exchange,io.minio.http.Method)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder expiry(int)><---<org.apache.camel.component.minio.MinioProducer: void createPresignedUrl(io.minio.MinioClient,org.apache.camel.Exchange,io.minio.http.Method)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder expiry(int)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String getObjectUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder expiry(int)><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String createUploadUrl(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder expiry(int)><---<org.jeecg.modules.jmreport.common.util.a.a: java.lang.String a(java.lang.String,java.lang.String,java.lang.Integer)>
<io.minio.StatObjectResponse: java.lang.String contentType()><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: java.lang.String getContentType()>
<io.minio.StatObjectResponse: java.lang.String contentType()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.StatObjectResponse: java.lang.String contentType()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.StatObjectResponse: java.lang.String contentType()><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioFileInfo getFileInfo(java.lang.String,java.lang.String)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder includeUserMetadata(boolean)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder includeUserMetadata(boolean)><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder includeUserMetadata(boolean)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder includeUserMetadata(boolean)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.Map getFileMetadata(java.lang.String)>
<io.minio.GenericResponse: java.lang.String object()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.GenericResponse: java.lang.String object()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.GenericResponse: java.lang.String object()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.GenericResponse: java.lang.String object()><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String getFilePath(io.minio.ObjectWriteResponse)>
<io.minio.messages.ErrorResponse: java.lang.String code()><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.StatObjectResponse getStatObject(java.lang.String,java.lang.String)>
<io.minio.messages.ErrorResponse: java.lang.String code()><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.messages.Tags getObjectTags(java.lang.String,java.lang.String)>
<io.minio.messages.ErrorResponse: java.lang.String code()><---<io.milvus.bulkwriter.RemoteBulkWriter: boolean objectExists(java.lang.String)>
<io.minio.messages.ErrorResponse: java.lang.String code()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse copyObject(io.minio.CopyObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioConsumer: void copyObject(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse copyObject(io.minio.CopyObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse copyObject(io.minio.CopyObjectArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse copyObject(io.minio.CopyObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse copyObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder httpClient(okhttp3.OkHttpClient)><---<org.apache.camel.component.minio.MinioEndpoint: io.minio.MinioClient createMinioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder httpClient(okhttp3.OkHttpClient)><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder httpClient(okhttp3.OkHttpClient)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: io.milvus.bulkwriter.storage.client.MinioStorageClient getStorageClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,okhttp3.OkHttpClient)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder httpClient(okhttp3.OkHttpClient)><---<org.frameworkset.nosql.minio.MinioHelper: boolean init(org.frameworkset.nosql.minio.MinioConfig)>
<io.minio.ObjectWriteArgs$Builder: io.minio.ObjectWriteArgs$Builder userMetadata(java.util.Map)><---<org.apache.camel.component.minio.MinioProducer: void doPutObject(org.apache.camel.Exchange,java.lang.String,java.lang.String,java.util.Map,java.util.Map,java.io.InputStream,long)>
<io.minio.ObjectWriteArgs$Builder: io.minio.ObjectWriteArgs$Builder userMetadata(java.util.Map)><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.ObjectWriteArgs$Builder: io.minio.ObjectWriteArgs$Builder userMetadata(java.util.Map)><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.ObjectWriteArgs$Builder: io.minio.ObjectWriteArgs$Builder userMetadata(java.util.Map)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void uploadFileWithMetadata(java.lang.String,java.io.InputStream,java.util.Map)>
<io.minio.ObjectWriteArgs$Builder: io.minio.ObjectWriteArgs$Builder headers(java.util.Map)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.util.Map)>
<io.minio.ObjectWriteArgs$Builder: io.minio.ObjectWriteArgs$Builder headers(java.util.Map)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.InputStream,java.lang.String,java.util.Map)>
<io.minio.ObjectWriteArgs$Builder: io.minio.ObjectWriteArgs$Builder headers(java.util.Map)><---<com.touchbiz.common.utils.minio.MinioUtils: boolean composeObject(java.lang.String,java.lang.String,java.util.List,java.lang.String)>
<io.minio.ObjectWriteArgs$Builder: io.minio.ObjectWriteArgs$Builder headers(java.util.Map)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObjectMultipart(java.lang.String,java.io.File,java.lang.String,java.lang.String,java.util.Map)>
<io.minio.UploadObjectArgs: io.minio.UploadObjectArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.File)>
<io.minio.UploadObjectArgs: io.minio.UploadObjectArgs$Builder builder()><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.UploadObjectArgs: io.minio.UploadObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String)>
<io.minio.UploadObjectArgs: io.minio.UploadObjectArgs$Builder builder()><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.UploadObjectArgs$Builder: io.minio.UploadObjectArgs$Builder filename(java.lang.String)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.File)>
<io.minio.UploadObjectArgs$Builder: io.minio.UploadObjectArgs$Builder filename(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.UploadObjectArgs$Builder: io.minio.UploadObjectArgs$Builder filename(java.lang.String)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String)>
<io.minio.UploadObjectArgs$Builder: io.minio.UploadObjectArgs$Builder filename(java.lang.String)><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.MinioClient: io.minio.ObjectWriteResponse uploadObject(io.minio.UploadObjectArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: void upload(java.nio.file.Path,java.io.File)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse uploadObject(io.minio.UploadObjectArgs-SuperClass)><---<com.zcj.ext.minio.MinioUtil: java.lang.String putObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse uploadObject(io.minio.UploadObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse putObject(java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse uploadObject(io.minio.UploadObjectArgs-SuperClass)><---<tech.mgl.utils.minio.MinIOUtils: java.lang.String upload()>
<io.minio.StatObjectResponse: java.time.ZonedDateTime lastModified()><---<org.codelibs.fess.net.protocol.storage.Handler$StorageURLConnection: long getLastModified()>
<io.minio.StatObjectResponse: java.time.ZonedDateTime lastModified()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.StatObjectResponse: java.time.ZonedDateTime lastModified()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder useApiVersion1(boolean)><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder useApiVersion1(boolean)><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder useApiVersion1(boolean)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.credentials.Credentials: java.lang.String secretKey()><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: okhttp3.Response execute(io.minio.http.Method,com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Command,com.google.common.collect.Multimap,byte[])>
<io.minio.credentials.Credentials: java.lang.String secretKey()><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: void addUser(java.lang.String,com.wl4g.infra.common.minio.v8_4.UserInfo$Status,java.lang.String,java.lang.String,java.util.List)>
<io.minio.credentials.Credentials: java.lang.String secretKey()><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: java.util.Map listUsers()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String,int,boolean)><---<org.apache.camel.component.minio.MinioComponentVerifierExtension: org.apache.camel.component.extension.ComponentVerifierExtension$Result verifyConnectivity(java.util.Map)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String,int,boolean)><---<org.apache.camel.component.minio.MinioEndpoint: io.minio.MinioClient createMinioClient()>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String,int,boolean)><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioUtil getInstance(java.lang.String,int,java.lang.String,java.lang.String)>
<io.minio.MinioClient: java.util.List listBuckets()><---<org.apache.camel.component.minio.MinioComponentVerifierExtension: org.apache.camel.component.extension.ComponentVerifierExtension$Result verifyConnectivity(java.util.Map)>
<io.minio.MinioClient: java.util.List listBuckets()><---<org.apache.camel.component.minio.MinioProducer: void listBuckets(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: java.util.List listBuckets()><---<com.touchbiz.common.utils.minio.MinioUtils: java.util.List getAllBuckets()>
<io.minio.CopySource: io.minio.CopySource$Builder builder()><---<org.apache.camel.component.minio.MinioConsumer: void copyObject(java.lang.String,java.lang.String)>
<io.minio.CopySource: io.minio.CopySource$Builder builder()><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.CopySource: io.minio.CopySource$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse copyObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.CopyObjectArgs: io.minio.CopyObjectArgs$Builder builder()><---<org.apache.camel.component.minio.MinioConsumer: void copyObject(java.lang.String,java.lang.String)>
<io.minio.CopyObjectArgs: io.minio.CopyObjectArgs$Builder builder()><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.CopyObjectArgs: io.minio.CopyObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse copyObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.CopyObjectArgs$Builder: io.minio.CopyObjectArgs$Builder source(io.minio.CopySource-SuperClass)><---<org.apache.camel.component.minio.MinioConsumer: void copyObject(java.lang.String,java.lang.String)>
<io.minio.CopyObjectArgs$Builder: io.minio.CopyObjectArgs$Builder source(io.minio.CopySource-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void copyObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.CopyObjectArgs$Builder: io.minio.CopyObjectArgs$Builder source(io.minio.CopySource-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: io.minio.ObjectWriteResponse copyObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder expiry(int,java.util.concurrent.TimeUnit)><---<com.zcj.ext.minio.MinioUtil: java.lang.String presignedGetObject(java.lang.String,java.lang.String)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder expiry(int,java.util.concurrent.TimeUnit)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrl(java.lang.String,int)>
<io.minio.GetPresignedObjectUrlArgs$Builder: io.minio.GetPresignedObjectUrlArgs$Builder expiry(int,java.util.concurrent.TimeUnit)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.lang.String generatePreSignedUrlFromFullMinioPath(java.lang.String,int)>
<io.minio.MinioClient: void setTimeout(long,long,long)><---<org.codelibs.fess.crawler.client.storage.StorageClient: void init()>
<io.minio.MinioClient: void setTimeout(long,long,long)><---<com.gomyck.util.minio.MinioAutoConfig: io.minio.MinioClient minioClient()>
<io.minio.messages.Tags: java.util.Map get()><---<org.codelibs.fess.crawler.client.storage.StorageClient: org.codelibs.fess.crawler.entity.ResponseData getResponseData(java.lang.String,boolean)>
<io.minio.messages.Tags: java.util.Map get()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.Map getObjectTags(java.lang.String)>
<io.minio.GetObjectTagsArgs: io.minio.GetObjectTagsArgs$Builder builder()><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.messages.Tags getObjectTags(java.lang.String,java.lang.String)>
<io.minio.GetObjectTagsArgs: io.minio.GetObjectTagsArgs$Builder builder()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.Map getObjectTags(java.lang.String)>
<io.minio.MinioClient: io.minio.messages.Tags getObjectTags(io.minio.GetObjectTagsArgs-SuperClass)><---<org.codelibs.fess.crawler.client.storage.StorageClient: io.minio.messages.Tags getObjectTags(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.messages.Tags getObjectTags(io.minio.GetObjectTagsArgs-SuperClass)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.Map getObjectTags(java.lang.String)>
<io.minio.MinioClient: boolean bucketExists(java.lang.String)><---<loci.common.services.S3ClientServiceImpl: boolean bucketExists(java.lang.String)>
<io.minio.MinioClient: boolean bucketExists(java.lang.String)><---<org.molgenis.data.file.minio.MinioClientFactoryImpl: void createBucketIfNotExists(io.minio.MinioClient,java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectStat statObject(java.lang.String,java.lang.String)><---<loci.common.services.S3ClientServiceImpl: loci.common.services.S3ClientStat statObject(java.lang.String,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectStat statObject(java.lang.String,java.lang.String)><---<org.molgenis.data.file.minio.MinioClientFacade: io.minio.ObjectStat statObject(java.lang.String)>
<io.minio.ObjectStat: long length()><---<loci.common.services.S3ClientServiceImpl: loci.common.services.S3ClientStat statObject(java.lang.String,java.lang.String)>
<io.minio.ObjectStat: long length()><---<org.molgenis.data.file.minio.MinioBlobStore: org.molgenis.data.file.BlobMetadata store(java.nio.channels.ReadableByteChannel)>
<io.minio.MinioProperties: java.lang.String getDefaultUserAgent()><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: void <init>(okhttp3.HttpUrl,java.lang.String,io.minio.credentials.Provider,okhttp3.OkHttpClient)>
<io.minio.MinioProperties: java.lang.String getDefaultUserAgent()><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: void setAppInfo(java.lang.String,java.lang.String)>
<io.minio.S3Escaper: java.lang.String encode(java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: okhttp3.Response execute(io.minio.http.Method,com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Command,com.google.common.collect.Multimap,byte[])>
<io.minio.S3Escaper: java.lang.String encode(java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: okhttp3.Response execute(io.minio.http.Method,com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Command,com.google.common.collect.Multimap,byte[])>
<io.minio.credentials.Credentials: java.lang.String sessionToken()><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: okhttp3.Response execute(io.minio.http.Method,com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Command,com.google.common.collect.Multimap,byte[])>
<io.minio.credentials.Credentials: java.lang.String sessionToken()><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: okhttp3.Response execute(io.minio.http.Method,com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Command,com.google.common.collect.Multimap,byte[])>
<io.minio.http.HttpUtils: okhttp3.HttpUrl getBaseUrl(java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder endpoint(java.lang.String)>
<io.minio.http.HttpUtils: okhttp3.HttpUrl getBaseUrl(java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder endpoint(java.lang.String,int,boolean)>
<io.minio.credentials.StaticProvider: void <init>(java.lang.String,java.lang.String,java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder credentials(java.lang.String,java.lang.String)>
<io.minio.credentials.StaticProvider: void <init>(java.lang.String,java.lang.String,java.lang.String)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: io.milvus.bulkwriter.storage.client.MinioStorageClient getStorageClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,okhttp3.OkHttpClient)>
<io.minio.MakeBucketArgs$Builder: io.minio.MakeBucketArgs$Builder objectLock(boolean)><---<org.apache.camel.component.minio.MinioConsumer: void makeBucket(java.lang.String)>
<io.minio.MakeBucketArgs$Builder: io.minio.MakeBucketArgs$Builder objectLock(boolean)><---<org.apache.camel.component.minio.MinioEndpoint: void makeBucket(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder region(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: void makeBucket(java.lang.String)>
<io.minio.BucketArgs$Builder: io.minio.BucketArgs$Builder region(java.lang.String)><---<org.apache.camel.component.minio.MinioEndpoint: void makeBucket(java.lang.String)>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder startAfter(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder startAfter(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.GenericResponse: java.lang.String bucket()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.GenericResponse: java.lang.String bucket()><---<com.touchbiz.common.utils.minio.MinioUtils: java.lang.String getFilePath(io.minio.ObjectWriteResponse)>
<io.minio.ObjectWriteResponse: java.lang.String etag()><---<org.apache.camel.component.minio.MinioProducer: void putObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ObjectWriteResponse: java.lang.String etag()><---<org.apache.camel.component.minio.MinioProducer: void doPutObject(org.apache.camel.Exchange,java.lang.String,java.lang.String,java.util.Map,java.util.Map,java.io.InputStream,long)>
<io.minio.MinioClient: java.lang.Iterable removeObjects(io.minio.RemoveObjectsArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void deleteObjects(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: java.lang.Iterable removeObjects(io.minio.RemoveObjectsArgs-SuperClass)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void deleteFiles(java.util.List)>
<io.minio.MinioClient: void removeBucket(io.minio.RemoveBucketArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void deleteBucket(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.MinioClient: void removeBucket(io.minio.RemoveBucketArgs-SuperClass)><---<org.apache.camel.component.minio.MinioProducer: void deleteBucket(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.DownloadObjectArgs: io.minio.DownloadObjectArgs$Builder builder()><---<com.gomyck.util.minio.MinioService: void getAndSave(java.nio.file.Path,java.lang.String)>
<io.minio.DownloadObjectArgs: io.minio.DownloadObjectArgs$Builder builder()><---<com.zcj.ext.minio.MinioUtil: java.lang.String getObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.DownloadObjectArgs$Builder: io.minio.DownloadObjectArgs$Builder filename(java.lang.String)><---<com.gomyck.util.minio.MinioService: void getAndSave(java.nio.file.Path,java.lang.String)>
<io.minio.DownloadObjectArgs$Builder: io.minio.DownloadObjectArgs$Builder filename(java.lang.String)><---<com.zcj.ext.minio.MinioUtil: java.lang.String getObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient: void downloadObject(io.minio.DownloadObjectArgs-SuperClass)><---<com.gomyck.util.minio.MinioService: void getAndSave(java.nio.file.Path,java.lang.String)>
<io.minio.MinioClient: void downloadObject(io.minio.DownloadObjectArgs-SuperClass)><---<com.zcj.ext.minio.MinioUtil: java.lang.String getObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient-SuperClass: void <init>(io.minio.MinioClient-SuperClass)><---<com.touchbiz.common.utils.minio.configuration.CustomMinioClient: void <init>(io.minio.MinioClient)>
<io.minio.MinioClient-SuperClass: void <init>(io.minio.MinioClient-SuperClass)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: void <init>(io.minio.MinioClient)>
<io.minio.messages.Item: long size()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.messages.Item: long size()><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.messages.Item: java.time.ZonedDateTime lastModified()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: java.util.List getFileItems(java.lang.String)>
<io.minio.messages.Item: java.time.ZonedDateTime lastModified()><---<org.frameworkset.nosql.minio.Minio: java.util.List listOssFile(java.lang.String,java.lang.String)>
<io.minio.MinioClient: void <init>(java.lang.String,int,java.lang.String,java.lang.String)><---<loci.common.services.S3ClientServiceImpl: void initialize(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient: void setAppInfo(java.lang.String,java.lang.String)><---<loci.common.services.S3ClientServiceImpl: void initialize(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.minio.MinioClient: java.io.InputStream getObject(java.lang.String,java.lang.String,long)><---<loci.common.services.S3ClientServiceImpl: java.io.InputStream getObject(java.lang.String,java.lang.String,long)>
<io.minio.MinioClient: void getObject(java.lang.String,java.lang.String,java.lang.String)><---<loci.common.services.S3ClientServiceImpl: void getObject(java.lang.String,java.lang.String,java.lang.String)>
<io.minio.credentials.Provider: io.minio.credentials.Credentials fetch()><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: io.minio.credentials.Credentials getCredentials()>
<io.minio.S3Escaper: java.lang.String encodePath(java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: okhttp3.Response execute(io.minio.http.Method,com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Command,com.google.common.collect.Multimap,byte[])>
<io.minio.http.HttpUtils: java.lang.String getHostHeader(okhttp3.HttpUrl)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: okhttp3.Response execute(io.minio.http.Method,com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Command,com.google.common.collect.Multimap,byte[])>
<io.minio.Digest: java.lang.String sha256Hash(byte[],int)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: okhttp3.Response execute(io.minio.http.Method,com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Command,com.google.common.collect.Multimap,byte[])>
<io.minio.credentials.Credentials: java.lang.String accessKey()><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: okhttp3.Response execute(io.minio.http.Method,com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Command,com.google.common.collect.Multimap,byte[])>
<io.minio.Signer: okhttp3.Request signV4S3(okhttp3.Request,java.lang.String,java.lang.String,java.lang.String,java.lang.String)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: okhttp3.Response execute(io.minio.http.Method,com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Command,com.google.common.collect.Multimap,byte[])>
<io.minio.http.HttpUtils: okhttp3.OkHttpClient setTimeout(okhttp3.OkHttpClient,long,long,long)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: void setTimeout(long,long,long)>
<io.minio.http.HttpUtils: okhttp3.OkHttpClient disableCertCheck(okhttp3.OkHttpClient)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient: void ignoreCertCheck()>
<io.minio.http.HttpUtils: void validateUrl(okhttp3.HttpUrl)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder endpoint(okhttp3.HttpUrl)>
<io.minio.http.HttpUtils: okhttp3.OkHttpClient newDefaultHttpClient(long,long,long)><---<com.wl4g.infra.common.minio.v8_4.MinioAdminClient$Builder: com.wl4g.infra.common.minio.v8_4.MinioAdminClient build()>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder includeVersions(boolean)><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder delimiter(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.ListObjectsArgs$Builder: io.minio.ListObjectsArgs$Builder maxKeys(int)><---<org.apache.camel.component.minio.MinioConsumer: int poll()>
<io.minio.RemoveObjectArgs$Builder: io.minio.RemoveObjectArgs$Builder bypassGovernanceMode(boolean)><---<org.apache.camel.component.minio.MinioConsumer: void removeObject(java.lang.String,java.lang.String)>
<io.minio.ObjectVersionArgs$Builder: io.minio.ObjectVersionArgs$Builder versionId(java.lang.String)><---<org.apache.camel.component.minio.MinioConsumer: void removeObject(java.lang.String,java.lang.String)>
<io.minio.SetBucketPolicyArgs: io.minio.SetBucketPolicyArgs$Builder builder()><---<org.apache.camel.component.minio.MinioEndpoint: void setBucketPolicy(java.lang.String)>
<io.minio.SetBucketPolicyArgs$Builder: io.minio.SetBucketPolicyArgs$Builder config(java.lang.String)><---<org.apache.camel.component.minio.MinioEndpoint: void setBucketPolicy(java.lang.String)>
<io.minio.MinioClient: void setBucketPolicy(io.minio.SetBucketPolicyArgs-SuperClass)><---<org.apache.camel.component.minio.MinioEndpoint: void setBucketPolicy(java.lang.String)>
<io.minio.StatObjectResponse: java.lang.String etag()><---<org.apache.camel.component.minio.MinioEndpoint: void getObjectStat(java.lang.String,org.apache.camel.Message)>
<io.minio.BaseArgs$Builder: io.minio.BaseArgs$Builder extraHeaders(java.util.Map)><---<org.apache.camel.component.minio.MinioProducer: void doPutObject(org.apache.camel.Exchange,java.lang.String,java.lang.String,java.util.Map,java.util.Map,java.io.InputStream,long)>
<io.minio.RemoveBucketArgs: io.minio.RemoveBucketArgs$Builder builder()><---<org.apache.camel.component.minio.MinioProducer: void deleteBucket(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ObjectConditionalReadArgs$Builder: io.minio.ObjectConditionalReadArgs$Builder offset(java.lang.Long)><---<org.apache.camel.component.minio.MinioProducer: void getPartialObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.ObjectConditionalReadArgs$Builder: io.minio.ObjectConditionalReadArgs$Builder length(java.lang.Long)><---<org.apache.camel.component.minio.MinioProducer: void getPartialObject(io.minio.MinioClient,org.apache.camel.Exchange)>
<io.minio.StatObjectResponse: java.util.Map userMetadata()><---<com.zcj.ext.minio.MinioUtil: com.zcj.ext.minio.MinioFileInfo getFileInfo(java.lang.String,java.lang.String)>
<io.minio.ComposeSource: io.minio.ComposeSource$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: boolean composeObject(java.lang.String,java.lang.String,java.util.List,java.lang.String)>
<io.minio.ComposeObjectArgs: io.minio.ComposeObjectArgs$Builder builder()><---<com.touchbiz.common.utils.minio.MinioUtils: boolean composeObject(java.lang.String,java.lang.String,java.util.List,java.lang.String)>
<io.minio.ComposeObjectArgs$Builder: io.minio.ComposeObjectArgs$Builder sources(java.util.List)><---<com.touchbiz.common.utils.minio.MinioUtils: boolean composeObject(java.lang.String,java.lang.String,java.util.List,java.lang.String)>
<io.minio.MinioClient: io.minio.ObjectWriteResponse composeObject(io.minio.ComposeObjectArgs-SuperClass)><---<com.touchbiz.common.utils.minio.MinioUtils: boolean composeObject(java.lang.String,java.lang.String,java.util.List,java.lang.String)>
<io.minio.messages.ErrorResponse: java.lang.String message()><---<io.milvus.bulkwriter.RemoteBulkWriter: boolean objectExists(java.lang.String)>
<io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentialsProvider(io.minio.credentials.Provider-InterfaceClass-SuperClass)><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: io.milvus.bulkwriter.storage.client.MinioStorageClient getStorageClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,okhttp3.OkHttpClient)>
<io.minio.MinioClient: void enableVirtualStyleEndpoint()><---<io.milvus.bulkwriter.storage.client.MinioStorageClient: io.milvus.bulkwriter.storage.client.MinioStorageClient getStorageClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,okhttp3.OkHttpClient)>
<io.minio.MinioClient: void putObject(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)><---<org.molgenis.data.file.minio.MinioClientFacade: void putObject(java.lang.String,java.io.InputStream,java.lang.String)>
<io.minio.MinioClient: void removeObject(java.lang.String,java.lang.String)><---<org.molgenis.data.file.minio.MinioClientFacade: void removeObject(java.lang.String)>
<io.minio.MinioClient: java.io.InputStream getObject(java.lang.String,java.lang.String)><---<org.molgenis.data.file.minio.MinioClientFacade: java.io.InputStream getObject(java.lang.String)>
<io.minio.MinioClient: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)><---<org.molgenis.data.file.minio.MinioClientFactoryImpl: io.minio.MinioClient createClient()>
<io.minio.MinioClient: void makeBucket(java.lang.String,java.lang.String)><---<org.molgenis.data.file.minio.MinioClientFactoryImpl: void createBucketIfNotExists(io.minio.MinioClient,java.lang.String,java.lang.String)>
<io.minio.SetObjectTagsArgs: io.minio.SetObjectTagsArgs$Builder builder()><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void updateObjectTags(java.lang.String,java.util.Map)>
<io.minio.SetObjectTagsArgs$Builder: io.minio.SetObjectTagsArgs$Builder tags(java.util.Map)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void updateObjectTags(java.lang.String,java.util.Map)>
<io.minio.MinioClient: void setObjectTags(io.minio.SetObjectTagsArgs-SuperClass)><---<org.codelibs.fess.app.web.admin.storage.AdminStorageAction: void updateObjectTags(java.lang.String,java.util.Map)>
<io.minio.MinioClient: void close()><---<org.frameworkset.nosql.minio.Minio: void shutdown()>
<io.minio.RemoveObjectsArgs: io.minio.RemoveObjectsArgs$Builder builder()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void deleteFiles(java.util.List)>
<io.minio.RemoveObjectsArgs$Builder: io.minio.RemoveObjectsArgs$Builder objects(java.lang.Iterable)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void deleteFiles(java.util.List)>
<io.minio.messages.ErrorResponse: java.lang.String objectName()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: void deleteFiles(java.util.List)>
<io.minio.messages.Item: java.util.Map userMetadata()><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: java.util.Map getFileMetadata(java.lang.String)>
<io.minio.messages.DeleteObject: void <init>(java.lang.String)><---<com.farao_community.farao.minio_adapter.starter.MinioAdapter: io.minio.messages.DeleteObject lambda$buildDeleteObjects$0(java.lang.String,java.lang.String)>
