<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreatePersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreatePersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateSecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateSecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyRoute(io.fabric8.openshift.api.model.Route,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyRoute(io.fabric8.openshift.api.model.Route,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyBuildConfig(io.fabric8.openshift.api.model.BuildConfig,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyBuildConfig(io.fabric8.openshift.api.model.BuildConfig,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyBuildConfig(io.fabric8.openshift.api.model.BuildConfig,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateBuildConfig(io.fabric8.openshift.api.model.BuildConfig,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyRoleBinding(io.fabric8.openshift.api.model.RoleBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyRoleBinding(io.fabric8.openshift.api.model.RoleBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyRoleBinding(io.fabric8.openshift.api.model.RoleBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateRoleBinding(io.fabric8.openshift.api.model.RoleBinding,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPolicyBinding(io.fabric8.openshift.api.model.PolicyBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPolicyBinding(io.fabric8.openshift.api.model.PolicyBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPolicyBinding(io.fabric8.openshift.api.model.PolicyBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreatePolicyBinding(io.fabric8.openshift.api.model.PolicyBinding,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyImageStream(io.fabric8.openshift.api.model.ImageStream,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateService(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateService(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreatePod(io.fabric8.kubernetes.api.model.Pod,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreatePod(io.fabric8.kubernetes.api.model.Pod,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getPodMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getFilteredPodMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,io.fabric8.utils.Filter)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getServiceMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getReplicationControllerMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getSelectedReplicationControllerMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: io.fabric8.kubernetes.api.model.Secret validateSecretExists(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.builds.BuildWatcher: void poll()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String findSpaceNamespace(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: void savePipelineConfiguration(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,io.fabric8.kubernetes.api.pipelines.PipelineConfiguration)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.spaces.Spaces: io.fabric8.kubernetes.api.spaces.Spaces load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForReplicationController(io.fabric8.kubernetes.api.model.ReplicationController)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForReplicationController(io.fabric8.kubernetes.api.model.ReplicationController)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForReplicationController(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForService(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForService(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: io.fabric8.kubernetes.api.model.ReplicationController requireReplicationController(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: io.fabric8.kubernetes.api.model.Service requireService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.PodsAssert: io.fabric8.kubernetes.assertions.PodLogsAssert logs(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert deployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert deployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.PodsAssert podList()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: java.util.List getPods(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: org.assertj.core.api.ListAssert replicationControllers()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.ServiceListAssert serviceList()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.ServicesAssert services()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.ServicePodsAssert service(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.ReplicationController getReplicationController(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.Service getService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.Pod getPod(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.assertions.support.PodLogWatcher: void <init>(io.fabric8.kubernetes.assertions.support.PodWatcher,java.lang.String,io.fabric8.kubernetes.api.model.Pod,java.lang.String,java.io.File)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.await.SessionPodsAreReady: java.lang.Boolean call()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.await.SessionPodsAreReady: java.lang.Boolean call()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.await.SessionServicesAreReady: java.lang.Boolean call()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.await.SessionServicesAreReady: boolean isEndpointAvailable(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.SessionListener: java.util.Set generateSecrets(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,io.fabric8.kubernetes.api.model.ObjectMeta)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.SessionListener: java.util.Set generateSecrets(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,io.fabric8.kubernetes.api.model.ObjectMeta)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.ReplicationControllerListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.ReplicationControllerListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.PodListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.PodListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.ServiceListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.ServiceListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.ReplicationControllerResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.PodResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.PodResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.ServiceResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.ConfigMaps: io.fabric8.kubernetes.api.model.ConfigMap updateConfigMapStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.ConfigMaps: io.fabric8.kubernetes.api.model.ConfigMap updateConfigMapTestStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getRecentEvents()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.openshift.client.impl.URLFromOpenshiftRouteImpl: java.lang.String getURL(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.config.ConfigMapPropertySource: java.util.Map getData(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodWatcher: void check()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodWatcher: void removeAsyncStoragePodWithoutDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: io.fabric8.kubernetes.client.dsl.RollableScalableResource getAsyncStorageDeploymentResource(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: void removeAsyncStoragePodWithoutDeployment(org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod createDeployment(io.fabric8.kubernetes.api.model.apps.Deployment,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod createDeployment(io.fabric8.kubernetes.api.model.apps.Deployment,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod create(io.fabric8.kubernetes.api.model.Pod)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod wait(java.lang.String,int,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture waitRunningAsync(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void handleStartingPodStatus(java.util.concurrent.CompletableFuture,io.fabric8.kubernetes.api.model.Pod)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void watch(org.eclipse.che.workspace.infrastructure.kubernetes.namespace.event.PodActionHandler)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void watchEvents(org.eclipse.che.workspace.infrastructure.kubernetes.namespace.event.PodEventHandler)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[],java.util.function.BiConsumer)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[])>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.lang.String getPodLogs(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeletePod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.api.model.PersistentVolumeClaim create(io.fabric8.kubernetes.api.model.PersistentVolumeClaim)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: java.util.List getByLabel(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: void delete(java.util.Map)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.api.model.PersistentVolumeClaim waitBound(java.lang.String,long)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.client.Watch pvcIsWaitingForConsumerWatcher(java.util.concurrent.CompletableFuture,io.fabric8.kubernetes.api.model.PersistentVolumeClaim)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createPvcIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createPvcIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createConfigMapIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createConfigMapIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createAsyncStoragePodIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createAsyncStoragePodIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createStorageServiceIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createStorageServiceIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.KubernetesTrustedCAProvisioner: void provision(org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment,org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.CheNamespace: io.fabric8.kubernetes.api.model.ConfigMap createConfigMap(io.fabric8.kubernetes.api.model.ConfigMap,org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.CheNamespace: void cleanUpConfigMaps(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: io.fabric8.kubernetes.api.model.Service create(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: void delete()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void run()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void waitDefaultServiceAccount(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: java.util.Optional get(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: io.fabric8.kubernetes.api.model.ConfigMap create(io.fabric8.kubernetes.api.model.ConfigMap)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: void delete()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void prepare()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createRoleWithBinding(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.List,java.util.List,java.util.List,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createExplicitClusterRoleBindings(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createWorkspaceServiceAccount(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createRole(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.List,java.util.List,java.util.List)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createRole(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.List,java.util.List,java.util.List)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress create(io.fabric8.kubernetes.api.model.extensions.Ingress)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress wait(java.lang.String,long,java.util.concurrent.TimeUnit,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: void delete()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: void create(io.fabric8.kubernetes.api.model.Secret)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: java.util.List get(io.fabric8.kubernetes.api.model.LabelSelector)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: void delete()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getNewestApplicationPodName(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.Collection)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable getListenPod(org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.dsl.LogWatch getPodLogWatcher(org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void createJob(java.lang.String,io.fabric8.kubernetes.api.model.batch.v1.Job)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void deleteJob(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.Boolean jobExist(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.String getPodLog(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.String getPodLog(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.cdi.Services: java.util.List toServiceEndpointUrl(java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyOAuthClient(io.fabric8.openshift.api.model.OAuthClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyOAuthClient(io.fabric8.openshift.api.model.OAuthClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyOAuthClient(io.fabric8.openshift.api.model.OAuthClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void installTemplate(io.fabric8.openshift.api.model.Template,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void installTemplate(io.fabric8.openshift.api.model.Template,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void installTemplate(io.fabric8.openshift.api.model.Template,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyRoute(io.fabric8.openshift.api.model.Route,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyBuildConfig(io.fabric8.openshift.api.model.BuildConfig,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyBuildConfig(io.fabric8.openshift.api.model.BuildConfig,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyBuildConfig(io.fabric8.openshift.api.model.BuildConfig,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyRoleBinding(io.fabric8.openshift.api.model.RoleBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyRoleBinding(io.fabric8.openshift.api.model.RoleBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyRoleBinding(io.fabric8.openshift.api.model.RoleBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPolicyBinding(io.fabric8.openshift.api.model.PolicyBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPolicyBinding(io.fabric8.openshift.api.model.PolicyBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPolicyBinding(io.fabric8.openshift.api.model.PolicyBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyImageStream(io.fabric8.openshift.api.model.ImageStream,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: boolean checkNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: boolean deleteNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: boolean deleteNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: boolean applyNamespace(io.fabric8.kubernetes.api.model.Namespace)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: io.fabric8.kubernetes.api.model.Secret validateSecretExists(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String findSpaceNamespace(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: void savePipelineConfiguration(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,io.fabric8.kubernetes.api.pipelines.PipelineConfiguration)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.spaces.Spaces: io.fabric8.kubernetes.api.spaces.Spaces load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: io.fabric8.kubernetes.api.model.ReplicationController requireReplicationController(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: io.fabric8.kubernetes.api.model.Service requireService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.assertions.PodsAssert: io.fabric8.kubernetes.assertions.PodLogsAssert logs(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert deployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert deployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.ServicePodsAssert service(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.ReplicationController getReplicationController(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.Service getService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.Pod getPod(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.assertions.support.PodLogWatcher: void <init>(io.fabric8.kubernetes.assertions.support.PodWatcher,java.lang.String,io.fabric8.kubernetes.api.model.Pod,java.lang.String,java.io.File)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.await.SessionPodsAreReady: java.lang.Boolean call()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.await.SessionServicesAreReady: boolean isEndpointAvailable(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.SessionListener: boolean applyConfiguration(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.kubernetes.api.Controller,io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.SessionListener: boolean applyConfiguration(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.kubernetes.api.Controller,io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.SessionListener: java.util.Set generateSecrets(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,io.fabric8.kubernetes.api.model.ObjectMeta)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.ReplicationControllerResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.PodResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.kubernetes.enricher.ServiceResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.utils.ConfigMaps: io.fabric8.kubernetes.api.model.ConfigMap updateConfigMapStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.utils.ConfigMaps: io.fabric8.kubernetes.api.model.ConfigMap updateConfigMapTestStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.openshift.client.impl.URLFromOpenshiftRouteImpl: java.lang.String getURL(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.config.ConfigMapPropertySource: java.util.Map getData(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodWatcher: void check()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodWatcher: void removeAsyncStoragePodWithoutDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: io.fabric8.kubernetes.client.dsl.RollableScalableResource getAsyncStorageDeploymentResource(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: void removeAsyncStoragePodWithoutDeployment(org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.Optional fetchNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: boolean checkNamespaceExists(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod wait(java.lang.String,int,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture waitRunningAsync(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void handleStartingPodStatus(java.util.concurrent.CompletableFuture,io.fabric8.kubernetes.api.model.Pod)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[],java.util.function.BiConsumer)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.lang.String getPodLogs(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeletePod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.api.model.PersistentVolumeClaim waitBound(java.lang.String,long)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createPvcIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createConfigMapIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createAsyncStoragePodIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createStorageServiceIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.KubernetesTrustedCAProvisioner: void provision(org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment,org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void run()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void delete(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void waitDefaultServiceAccount(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: io.fabric8.kubernetes.api.model.Namespace get(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: java.util.Optional get(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void prepare()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createRole(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.List,java.util.List,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress create(io.fabric8.kubernetes.api.model.extensions.Ingress)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress wait(java.lang.String,long,java.util.concurrent.TimeUnit,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.dsl.LogWatch getPodLogWatcher(org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void deleteJob(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.String getPodLog(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.cdi.Services: java.util.List toServiceEndpointUrl(java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation apiServers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation authentications()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation builds()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation clusterOperators()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation consoles()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation clusterVersions()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation dnses()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation featureGates()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation infrastructures()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation ingresses()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation images()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation imageContentPolicies()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation imageDigestMirrorSets()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation imageTagMirrorSets()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation networks()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation oAuths()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation operatorHubs()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation projects()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation proxies()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation schedulers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConsoleAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation consoleCLIDownloads()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConsoleAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation consoleExternalLogLinks()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConsoleAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation consoleLinks()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConsoleAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation consoleNotifications()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConsoleAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation consoleYAMLSamples()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConsoleAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation consoleQuickStarts()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftConsoleAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation consolePlugins()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation checkpoints()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation clusterClaims()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation clusterDeployments()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation clusterDeprovisions()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation clusterProvisions()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation clusterImageSets()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation clusterPools()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation clusterRelocates()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation clusterStates()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation dnsZones()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation hiveConfigs()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation machinePoolNameLeases()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation machinePools()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation selectorSyncIdentityProviders()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation selectorSyncSets()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation syncIdentityProviders()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation syncSets()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMachineAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation machines()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMachineAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation machineSets()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMachineAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation machineHealthChecks()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMachineAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation controlPlaneMachineSets()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMachineConfigurationAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation containerRuntimeConfigs()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMachineConfigurationAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation controllerConfigs()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMachineConfigurationAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation kubeletConfigs()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMachineConfigurationAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation machineConfigPools()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMachineConfigurationAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation machineConfigs()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMonitoringAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation alertmanagerConfigs()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMonitoringAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation prometheuses()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMonitoringAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation podMonitors()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMonitoringAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation probes()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMonitoringAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation alertmanagers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMonitoringAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation prometheusRules()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMonitoringAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceMonitors()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftMonitoringAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation thanosRulers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation etcds()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation kubeStorageVersionMigrators()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation kubeControllerManagers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation csiSnapshotControllers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation networks()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation kubeSchedulers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation consoles()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation serviceCatalogControllerManagers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation serviceCAs()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation imageContentSourcePolicies()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation dnses()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation dnsRecords()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation openShiftControllerManagers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation openShiftAPIServers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation kubeAPIServers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation ingressControllers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation imagePruners()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation podNetworkConnectivityChecks()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation serviceCatalogAPIServers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation storages()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation authentications()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation cloudCredentials()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation clusterCSIDrivers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation configs()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorHubAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation catalogSources()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorHubAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation operatorGroups()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorHubAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation subscriptions()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorHubAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation installPlans()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorHubAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation clusterServiceVersions()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorHubAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation packageManifests()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorHubAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation operatorConditions()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorHubAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation operators()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftOperatorHubAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation olmConfigs()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftQuotaAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation appliedClusterResourceQuotas()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftQuotaAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation clusterResourceQuotas()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftStorageVersionMigratorApiGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation storageStates()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftStorageVersionMigratorApiGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation storageVersionMigrations()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftTunedAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation tuneds()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftTunedAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation profiles()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftWhereaboutsAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation ippools()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftWhereaboutsAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation overlappingRangeIpReservations()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.V1OpenShiftClusterAutoscalingAPIGroupClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation clusterAutoscalers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.V1beta1OpenShiftClusterAutoscalingAPIGroupClient: io.fabric8.kubernetes.client.dsl.MixedOperation machineAutoscalers()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.serving.v1.DefaultServingV1Client: io.fabric8.kubernetes.client.dsl.MixedOperation services()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.serving.v1.DefaultServingV1Client: io.fabric8.kubernetes.client.dsl.MixedOperation routes()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.serving.v1.DefaultServingV1Client: io.fabric8.kubernetes.client.dsl.MixedOperation revisions()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.serving.v1.DefaultServingV1Client: io.fabric8.kubernetes.client.dsl.MixedOperation configurations()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.api.Controller: void doCreatePod(io.fabric8.kubernetes.api.model.Pod,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.api.Controller: void doCreatePod(io.fabric8.kubernetes.api.model.Pod,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getPodMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getFilteredPodMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,io.fabric8.utils.Filter)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForReplicationController(io.fabric8.kubernetes.api.model.ReplicationController)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForReplicationController(io.fabric8.kubernetes.api.model.ReplicationController)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForReplicationController(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForService(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForService(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForService(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForService(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.assertions.PodsAssert: io.fabric8.kubernetes.assertions.PodLogsAssert logs(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.PodsAssert podList()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: java.util.List getPods(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.Pod getPod(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.assertions.PodSelectionAssert: io.fabric8.kubernetes.assertions.PodSelectionAssert isPodReadyForPeriod(long,long)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.assertions.PodSelectionAssert: java.util.List getPods()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.kubernetes.assertions.support.PodLogWatcher: void <init>(io.fabric8.kubernetes.assertions.support.PodWatcher,java.lang.String,io.fabric8.kubernetes.api.model.Pod,java.lang.String,java.io.File)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.arquillian.kubernetes.await.SessionPodsAreReady: java.lang.Boolean call()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.arquillian.kubernetes.await.SessionPodsAreReady: java.lang.Boolean call()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.arquillian.kubernetes.enricher.PodListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.arquillian.kubernetes.enricher.PodListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.arquillian.kubernetes.enricher.PodResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.arquillian.kubernetes.enricher.PodResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.springframework.cloud.kubernetes.StandardPodUtils: io.fabric8.kubernetes.api.model.Pod internalGetPod()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<io.fabric8.spring.cloud.kubernetes.StandardPodUtils: io.fabric8.kubernetes.api.model.Pod internalGetPod()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodWatcher: void removeAsyncStoragePodWithoutDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: void removeAsyncStoragePodWithoutDeployment(org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod createDeployment(io.fabric8.kubernetes.api.model.apps.Deployment,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod create(io.fabric8.kubernetes.api.model.Pod)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.List get()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod wait(java.lang.String,int,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture waitRunningAsync(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void handleStartingPodStatus(java.util.concurrent.CompletableFuture,io.fabric8.kubernetes.api.model.Pod)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void watch(org.eclipse.che.workspace.infrastructure.kubernetes.namespace.event.PodActionHandler)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[],java.util.function.BiConsumer)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.lang.String getPodLogs(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeletePod(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void run()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getNewestApplicationPodName(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.Collection)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getNewestApplicationPodName(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.Collection)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable getListenPod(org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.dsl.LogWatch getPodLogWatcher(org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.String getPodLog(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation pods()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.String getPodLog(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applyOAuthClient(io.fabric8.openshift.api.model.OAuthClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applyRoute(io.fabric8.openshift.api.model.Route,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applyRoleBinding(io.fabric8.openshift.api.model.RoleBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applyPolicyBinding(io.fabric8.openshift.api.model.PolicyBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applyImageStream(io.fabric8.openshift.api.model.ImageStream,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applyResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: boolean checkNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: boolean applyNamespace(io.fabric8.kubernetes.api.model.Namespace)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURLInCurrentNamespace(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.KubernetesHelper: io.fabric8.kubernetes.api.model.Secret validateSecretExists(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String findSpaceNamespace(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.api.spaces.Spaces: io.fabric8.kubernetes.api.spaces.Spaces load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: io.fabric8.kubernetes.api.model.Service requireService(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: io.fabric8.kubernetes.api.model.Service requireService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.arquillian.kubernetes.await.SessionServicesAreReady: boolean isEndpointAvailable(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.arquillian.kubernetes.SessionListener: boolean applyConfiguration(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.kubernetes.api.Controller,io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.arquillian.kubernetes.SessionListener: java.util.Set generateSecrets(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,io.fabric8.kubernetes.api.model.ObjectMeta)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.arquillian.kubernetes.enricher.ServiceResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.openshift.client.impl.URLFromOpenshiftRouteImpl: java.lang.String getURL(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.spring.cloud.kubernetes.config.ConfigMapPropertySource: java.util.Map getData(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.spring.cloud.kubernetes.config.ConfigMapPropertySource: java.util.Map getData(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims$1: void onClose(io.fabric8.kubernetes.client.KubernetesClientException)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.Optional fetchNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: boolean checkNamespaceExists(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.api.model.PersistentVolumeClaim waitBound(java.lang.String,long)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createPvcIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createConfigMapIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.KubernetesTrustedCAProvisioner: void provision(org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment,org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void waitDefaultServiceAccount(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: io.fabric8.kubernetes.api.model.Namespace get(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: java.util.Optional get(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void prepare()>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createExplicitClusterRoleBindings(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createRole(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.List,java.util.List,java.util.List)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress wait(java.lang.String,long,java.util.concurrent.TimeUnit,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object get()><---<io.fabric8.cdi.Services: java.util.List toServiceEndpointUrl(java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.Watch: void close()><---<io.fabric8.kubernetes.assertions.PodSelectionAssert: io.fabric8.kubernetes.assertions.PodSelectionAssert isPodReadyForPeriod(long,long)>
<io.fabric8.kubernetes.client.Watch: void close()><---<io.fabric8.kubernetes.assertions.PodSelectionAssert: io.fabric8.kubernetes.assertions.PodSelectionAssert isPodReadyForPeriod(long,long)>
<io.fabric8.kubernetes.client.Watch: void close()><---<io.fabric8.kubernetes.assertions.PodSelectionAssert: io.fabric8.kubernetes.assertions.PodSelectionAssert isPodReadyForPeriod(long,long)>
<io.fabric8.kubernetes.client.Watch: void close()><---<io.fabric8.kubernetes.assertions.PodSelectionAssert: io.fabric8.kubernetes.assertions.PodSelectionAssert isPodReadyForPeriod(long,long)>
<io.fabric8.kubernetes.client.Watch: void close()><---<io.fabric8.spring.cloud.kubernetes.reload.EventBasedConfigurationChangeDetector: void unwatch()>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: java.util.concurrent.CompletableFuture deleteAsyncStorageDeployment(io.fabric8.kubernetes.client.dsl.RollableScalableResource)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: java.util.concurrent.CompletableFuture deleteAsyncStorageDeployment(io.fabric8.kubernetes.client.dsl.RollableScalableResource)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: java.util.concurrent.CompletableFuture deleteAsyncStoragePod(io.fabric8.kubernetes.client.dsl.PodResource)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: java.util.concurrent.CompletableFuture deleteAsyncStoragePod(io.fabric8.kubernetes.client.dsl.PodResource)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: void lambda$deleteAsyncStoragePod$1(io.fabric8.kubernetes.client.Watch,java.lang.Void,java.lang.Throwable)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: void lambda$deleteAsyncStorageDeployment$0(io.fabric8.kubernetes.client.Watch,java.lang.Void,java.lang.Throwable)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod createDeployment(io.fabric8.kubernetes.api.model.apps.Deployment,java.lang.String)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod createDeployment(io.fabric8.kubernetes.api.model.apps.Deployment,java.lang.String)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod wait(java.lang.String,int,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod wait(java.lang.String,int,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod wait(java.lang.String,int,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void stopWatch(boolean)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void stopWatch(boolean)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeletePod(java.lang.String)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeletePod(java.lang.String)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void lambda$doDeletePod$3(java.lang.String,io.fabric8.kubernetes.client.Watch,java.lang.Void,java.lang.Throwable)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void lambda$doDeleteDeployment$2(java.lang.String,io.fabric8.kubernetes.client.Watch,java.lang.Void,java.lang.Throwable)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void lambda$waitRunningAsync$0(io.fabric8.kubernetes.client.Watch,java.lang.Void,java.lang.Throwable)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.api.model.PersistentVolumeClaim waitBound(java.lang.String,long)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.api.model.PersistentVolumeClaim waitBound(java.lang.String,long)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.api.model.PersistentVolumeClaim waitBound(java.lang.String,long)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.api.model.PersistentVolumeClaim waitBound(java.lang.String,long)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void waitDefaultServiceAccount(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void waitDefaultServiceAccount(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void waitDefaultServiceAccount(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress wait(java.lang.String,long,java.util.concurrent.TimeUnit,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress wait(java.lang.String,long,java.util.concurrent.TimeUnit,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress wait(java.lang.String,long,java.util.concurrent.TimeUnit,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.k8s.impl.K8sTaskExecutor: void registerBatchJobWatcher(io.fabric8.kubernetes.api.model.batch.v1.Job,java.lang.String,org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.k8s.impl.K8sTaskExecutor: void registerBatchJobWatcher(io.fabric8.kubernetes.api.model.batch.v1.Job,java.lang.String,org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.k8s.impl.K8sTaskExecutor: void registerBatchJobWatcher(io.fabric8.kubernetes.api.model.batch.v1.Job,java.lang.String,org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse)>
<io.fabric8.kubernetes.client.Watch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.k8s.impl.K8sTaskExecutor: void registerBatchJobWatcher(io.fabric8.kubernetes.api.model.batch.v1.Job,java.lang.String,org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load()>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load()>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load()>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load()>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String namespaceForEnvironment(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String namespaceForEnvironment(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String namespaceForEnvironment(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String namespaceForEnvironment(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String namespaceForEnvironment(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String namespaceForEnvironment(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String namespaceForEnvironment(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String namespaceForEnvironment(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration()>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration()>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration()>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration()>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.Pipelines: io.fabric8.kubernetes.api.pipelines.Pipeline getPipeline(java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.Pipelines: io.fabric8.kubernetes.api.pipelines.Pipeline getPipeline(java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.Pipelines: io.fabric8.kubernetes.api.pipelines.Pipeline getPipeline(java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.Pipelines: io.fabric8.kubernetes.api.pipelines.Pipeline getPipeline(java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.Pipelines: io.fabric8.kubernetes.api.pipelines.Pipeline getPipeline(java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.Pipelines: io.fabric8.kubernetes.api.pipelines.Pipeline getPipeline(java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.Pipelines: io.fabric8.kubernetes.api.pipelines.Pipeline getPipeline(java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.kubernetes.api.pipelines.Pipelines: io.fabric8.kubernetes.api.pipelines.Pipeline getPipeline(java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.spring.cloud.kubernetes.reload.ConfigurationChangeDetector: void shutdown()>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: void removeCache(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: void removeCache(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: void close()><---<io.fabric8.cdi.bean.KubernetesClientBean: void destroy(io.fabric8.kubernetes.client.KubernetesClient,javax.enterprise.context.spi.CreationalContext)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.api.Controller: boolean checkNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getPodMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getFilteredPodMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,io.fabric8.utils.Filter)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getServiceMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getReplicationControllerMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.api.builds.BuildWatcher: void poll()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForReplicationController(io.fabric8.kubernetes.api.model.ReplicationController)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForReplicationController(io.fabric8.kubernetes.api.model.ReplicationController)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForReplicationController(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForService(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForService(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.PodsAssert podList()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: java.util.List getPods(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: org.assertj.core.api.ListAssert replicationControllers()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.ServiceListAssert serviceList()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.ServicesAssert services()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.arquillian.kubernetes.await.SessionPodsAreReady: java.lang.Boolean call()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.arquillian.kubernetes.await.SessionServicesAreReady: java.lang.Boolean call()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.arquillian.kubernetes.enricher.ReplicationControllerListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.arquillian.kubernetes.enricher.PodListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.arquillian.kubernetes.enricher.ServiceListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getRecentEvents()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.List fetchNamespaces()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.Boolean jobExist(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object list()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.String getPodLog(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation routes()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation revisions()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation configurations()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation domainMappings()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation brokers()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation triggers()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation channels()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation subscriptions()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation eventTypes()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation sequences()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation parallels()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation inMemoryChannels()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation pingSources()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation sinkBindings()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation containerSources()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation apiServerSources()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation awsSqsSources()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation couchDbSources()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation gitHubSources()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation gitHubBindings()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation gitLabSources()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation gitLabBindings()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation prometheusSources()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation kafkaChannels()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation kafkasSources()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.MixedOperation kafkaBindings()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.api.Controller: void doCreateService(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.api.Controller: void doCreateService(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getServiceMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURLInCurrentNamespace(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: io.fabric8.kubernetes.api.model.Service requireService(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: io.fabric8.kubernetes.api.model.Service requireService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.ServiceListAssert serviceList()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.ServicesAssert services()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.ServicePodsAssert service(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.Service getService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.arquillian.kubernetes.await.SessionServicesAreReady: java.lang.Boolean call()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.arquillian.kubernetes.enricher.ServiceListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.arquillian.kubernetes.enricher.ServiceListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.arquillian.kubernetes.enricher.ServiceResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createStorageServiceIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createStorageServiceIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: io.fabric8.kubernetes.api.model.Service create(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: java.util.List get()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation services()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: void delete()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateOAuthClient(io.fabric8.openshift.api.model.OAuthClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateTemplate(io.fabric8.openshift.api.model.Template,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreatePersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreatePersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateSecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateSecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void applyRoute(io.fabric8.openshift.api.model.Route,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateBuildConfig(io.fabric8.openshift.api.model.BuildConfig,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateRoleBinding(io.fabric8.openshift.api.model.RoleBinding,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreatePolicyBinding(io.fabric8.openshift.api.model.PolicyBinding,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateService(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateService(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: boolean applyNamespace(io.fabric8.kubernetes.api.model.Namespace)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreateReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreatePod(io.fabric8.kubernetes.api.model.Pod,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void doCreatePod(io.fabric8.kubernetes.api.model.Pod,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.arquillian.kubernetes.SessionListener: boolean applyConfiguration(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.kubernetes.api.Controller,io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object[])><---<io.fabric8.arquillian.kubernetes.SessionListener: boolean applyConfiguration(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.kubernetes.api.Controller,io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getSelectedReplicationControllerMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<io.fabric8.kubernetes.assertions.PodSelectionAssert: java.util.List getPods()>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<io.fabric8.kubernetes.assertions.ServicePodsAssert: io.fabric8.kubernetes.assertions.ServicePodsAssert hasEndpointOrReadyPod(long,long)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<io.fabric8.arquillian.kubernetes.enricher.ReplicationControllerListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<io.fabric8.arquillian.kubernetes.enricher.PodListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<io.fabric8.arquillian.kubernetes.enricher.ServiceListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<io.fabric8.arquillian.kubernetes.enricher.PodResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.List findPreparedNamespaces(org.eclipse.che.api.workspace.server.spi.NamespaceResolutionContext)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete()>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete()>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: java.util.List getByLabel(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: java.util.List get(io.fabric8.kubernetes.api.model.LabelSelector)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getNewestApplicationPodName(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.Collection)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getNewestApplicationPodName(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.Collection)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable getListenPod(org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus getApplicationStatus(org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext,io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object list()><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.dsl.LogWatch getPodLogWatcher(org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String findSpaceNamespace(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: void savePipelineConfiguration(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,io.fabric8.kubernetes.api.pipelines.PipelineConfiguration)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.kubernetes.api.spaces.Spaces: io.fabric8.kubernetes.api.spaces.Spaces load(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.arquillian.utils.ConfigMaps: io.fabric8.kubernetes.api.model.ConfigMap updateConfigMapStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.arquillian.utils.ConfigMaps: io.fabric8.kubernetes.api.model.ConfigMap updateConfigMapTestStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.spring.cloud.kubernetes.config.ConfigMapPropertySource: java.util.Map getData(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.spring.cloud.kubernetes.config.ConfigMapPropertySource: java.util.Map getData(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<io.fabric8.spring.cloud.kubernetes.reload.EventBasedConfigurationChangeDetector: void watch()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createConfigMapIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createConfigMapIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.KubernetesTrustedCAProvisioner: void provision(org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment,org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.CheNamespace: io.fabric8.kubernetes.api.model.ConfigMap createConfigMap(io.fabric8.kubernetes.api.model.ConfigMap,org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.CheNamespace: void cleanUpConfigMaps(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: java.util.Optional get(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: io.fabric8.kubernetes.api.model.ConfigMap create(io.fabric8.kubernetes.api.model.ConfigMap)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation configMaps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: void delete()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.api.Controller: void doCreateReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.api.Controller: void doCreateReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getReplicationControllerMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getSelectedReplicationControllerMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForReplicationController(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: io.fabric8.kubernetes.api.model.ReplicationController requireReplicationController(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert replicas(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.ReplicationControllerListAssert replicationControllerList()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: org.assertj.core.api.ListAssert replicationControllers()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.ReplicationController getReplicationController(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.arquillian.kubernetes.enricher.ReplicationControllerListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.arquillian.kubernetes.enricher.ReplicationControllerListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.arquillian.kubernetes.enricher.ReplicationControllerResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation replicationControllers()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.kubernetes.api.Controller: void doCreateSecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.kubernetes.api.Controller: void doCreateSecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.kubernetes.api.KubernetesHelper: io.fabric8.kubernetes.api.model.Secret validateSecretExists(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.arquillian.kubernetes.SessionListener: java.util.Set generateSecrets(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,io.fabric8.kubernetes.api.model.ObjectMeta)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.arquillian.kubernetes.SessionListener: java.util.Set generateSecrets(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,io.fabric8.kubernetes.api.model.ObjectMeta)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<io.fabric8.spring.cloud.kubernetes.reload.EventBasedConfigurationChangeDetector: void watch()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: void create(io.fabric8.kubernetes.api.model.Secret)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: java.util.List get(io.fabric8.kubernetes.api.model.LabelSelector)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation secrets()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: void delete()>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getPodMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<io.fabric8.kubernetes.api.KubernetesHelper: io.fabric8.kubernetes.api.model.Secret validateSecretExists(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<io.fabric8.kubernetes.api.KubernetesHelper: io.fabric8.kubernetes.api.model.Secret validateSecretExists(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<io.fabric8.arquillian.utils.Util: void cleanupSession(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.kubernetes.api.Controller,io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.arquillian.kubernetes.Session,java.util.List,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<io.fabric8.openshift.client.impl.URLFromOpenshiftRouteImpl: java.lang.String getURL(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesInfrastructureException: java.lang.String extractMessage(io.fabric8.kubernetes.client.KubernetesClientException)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.List fetchNamespaces()>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.List findPreparedNamespaces(org.eclipse.che.api.workspace.server.spi.NamespaceResolutionContext)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: boolean checkNamespaceExists(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void label(io.fabric8.kubernetes.api.model.Namespace,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void delete()>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: io.fabric8.kubernetes.api.model.Namespace create(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void delete(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void delete(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClientException: int getCode()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: io.fabric8.kubernetes.api.model.Namespace get(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftClusterAutoscalingAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftConfigAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftConsoleAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftHiveAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftMachineAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftMachineConfigurationAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftMonitoringAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftOperatorAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftOperatorHubAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftQuotaAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftStorageVersionMigratorApiGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftTunedAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.OpenShiftWhereaboutsAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.V1OpenShiftClusterAutoscalingAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.openshift.client.impl.V1beta1OpenShiftClusterAutoscalingAPIGroupClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: void <init>()><---<io.fabric8.knative.client.serving.v1.DefaultServingV1Client: void <init>()>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory: void register(java.lang.Class,io.fabric8.kubernetes.client.extension.ClientAdapter)><---<io.fabric8.knative.client.KnativeExtensionAdapter: void registerClients(io.fabric8.kubernetes.client.extension.ExtensionAdapter$ClientFactory)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.kubernetes.api.Controller: void <init>()>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load()>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.kubernetes.api.environments.Environments: io.fabric8.kubernetes.api.environments.Environments load(java.lang.String)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String namespaceForEnvironment(java.lang.String)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String namespaceForEnvironment(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration()>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: io.fabric8.kubernetes.api.pipelines.PipelineConfiguration loadPipelineConfiguration(java.lang.String)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.kubernetes.api.pipelines.Pipelines: io.fabric8.kubernetes.api.pipelines.Pipeline getPipeline(java.util.Map)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.kubernetes.api.pipelines.Pipelines: io.fabric8.kubernetes.api.pipelines.Pipeline getPipeline(java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: void <init>()>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<org.springframework.cloud.kubernetes.profile.KubernetesProfileEnvironmentPostProcessor: boolean isInsideKubernetes()>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.spring.cloud.kubernetes.profile.KubernetesApplicationContextInitializer: void <init>()>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.cdi.KubernetesHolder: io.fabric8.kubernetes.client.KubernetesClient getClient()>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>()><---<io.fabric8.cdi.bean.KubernetesClientBean: io.fabric8.kubernetes.client.KubernetesClient create(javax.enterprise.context.spi.CreationalContext)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert deployment(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert replicas(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress create(io.fabric8.kubernetes.api.model.extensions.Ingress)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: java.util.List get()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress wait(java.lang.String,long,java.util.concurrent.TimeUnit,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL extensions()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: void delete()>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.kubernetes.api.Controller: void applyNamespace(java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.kubernetes.api.Controller: void applyNamespace(java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getNamespace(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.kubernetes.api.environments.Environments: java.lang.String getDefaultNamespace(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.kubernetes.api.spaces.Spaces: java.lang.String getDefaultNamespace(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: java.lang.String namespace()>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.arquillian.kubernetes.Configuration fromMap(java.util.Map,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.arquillian.kubernetes.Configuration fromMap(java.util.Map,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.arquillian.utils.Namespaces: void createNamespace(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.kubernetes.api.Controller,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.spring.cloud.kubernetes.config.ConfigMapPropertySource: java.lang.String getName(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.spring.cloud.kubernetes.config.ConfigUtils: java.lang.String getApplicationNamespace(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.AbstractConfigProperties)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.spring.cloud.kubernetes.config.ConfigUtils: java.lang.String getApplicationNamespace(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.AbstractConfigProperties)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.cdi.Services: java.lang.String toServiceUrl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.String getNamespace()><---<io.fabric8.cdi.Services: java.util.List toServiceEndpointUrl(java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<io.fabric8.openshift.client.impl.URLFromOpenshiftRouteImpl: java.lang.String getURL(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesRecipeParser: java.util.List parse(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesInfrastructureException: java.lang.String extractMessage(io.fabric8.kubernetes.client.KubernetesClientException)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesInfrastructureException: java.lang.String extractMessage(io.fabric8.kubernetes.client.KubernetesClientException)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.devfile.KubernetesEnvironmentProvisioner: java.lang.String asYaml(java.util.List)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.Optional fetchNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.List fetchNamespaces()>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.List fetchNamespaces()>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.List findPreparedNamespaces(org.eclipse.che.api.workspace.server.spi.NamespaceResolutionContext)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.List findPreparedNamespaces(org.eclipse.che.api.workspace.server.spi.NamespaceResolutionContext)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: boolean checkNamespaceExists(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void stopWatch(boolean)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void stopWatch(boolean)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.String getMessage()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: void handleKubernetesClientException(io.fabric8.kubernetes.client.KubernetesClientException,org.eclipse.jkube.kit.common.KitLogger)>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<io.fabric8.kubernetes.assertions.support.PodLogWatcher: void close()>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void run()>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void run()>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void run()>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void run()>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void close()>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.AbstractCommandExecutor: void lambda$collectPodLogIfNeeded$0()>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.AbstractCommandExecutor: void lambda$collectPodLogIfNeeded$0()>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.AbstractCommandExecutor: void lambda$collectPodLogIfNeeded$0()>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.AbstractCommandExecutor: void lambda$collectPodLogIfNeeded$0()>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.k8s.impl.K8sTaskExecutor: void lambda$parsePodLogOutput$0(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.k8s.impl.K8sTaskExecutor: void lambda$parsePodLogOutput$0(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.k8s.impl.K8sTaskExecutor: void lambda$parsePodLogOutput$0(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.LogWatch: void close()><---<org.apache.dolphinscheduler.plugin.task.api.k8s.impl.K8sTaskExecutor: void lambda$parsePodLogOutput$0(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForReplicationController(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: io.fabric8.kubernetes.api.model.ReplicationController requireReplicationController(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert deployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert replicas(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert replicas(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.ReplicationController getReplicationController(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<io.fabric8.arquillian.kubernetes.enricher.ReplicationControllerResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodWatcher: void check()>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: void intercept(org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment,org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createAsyncStoragePodIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.Pod getPod(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<io.fabric8.arquillian.kubernetes.enricher.J4pClientProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<io.fabric8.arquillian.kubernetes.enricher.PodResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<org.springframework.cloud.kubernetes.StandardPodUtils: io.fabric8.kubernetes.api.model.Pod internalGetPod()>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<io.fabric8.spring.cloud.kubernetes.StandardPodUtils: io.fabric8.kubernetes.api.model.Pod internalGetPod()>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodWatcher: void removeAsyncStoragePodWithoutDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: void removeAsyncStoragePodWithoutDeployment(org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod wait(java.lang.String,int,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture waitRunningAsync(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeletePod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod createDeployment(io.fabric8.kubernetes.api.model.apps.Deployment,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod create(io.fabric8.kubernetes.api.model.Pod)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.api.model.PersistentVolumeClaim create(io.fabric8.kubernetes.api.model.PersistentVolumeClaim)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createPvcIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createConfigMapIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesEnvironment)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createAsyncStoragePodIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createStorageServiceIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.CheNamespace: io.fabric8.kubernetes.api.model.ConfigMap createConfigMap(io.fabric8.kubernetes.api.model.ConfigMap,org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: io.fabric8.kubernetes.api.model.Service create(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: io.fabric8.kubernetes.api.model.ConfigMap create(io.fabric8.kubernetes.api.model.ConfigMap)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createRole(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.List,java.util.List,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: void create(io.fabric8.kubernetes.api.model.Secret)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object create(java.lang.Object)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void createJob(java.lang.String,io.fabric8.kubernetes.api.model.batch.v1.Job)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void watch(org.eclipse.che.workspace.infrastructure.kubernetes.namespace.event.PodActionHandler)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: java.util.List getByLabel(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.CheNamespace: void cleanUpConfigMaps(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: void delete()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: void delete()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: void delete()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: void delete()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabel(java.lang.String,java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable getListenPod(org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: void applyOAuthClient(io.fabric8.openshift.api.model.OAuthClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: void applyRoleBinding(io.fabric8.openshift.api.model.RoleBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: void applyPolicyBinding(io.fabric8.openshift.api.model.PolicyBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: void applyResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: boolean deleteNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: boolean deleteNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.arquillian.kubernetes.SessionListener: boolean applyConfiguration(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.kubernetes.api.Controller,io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object delete()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<io.fabric8.kubernetes.api.Controller: void doCreatePersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<io.fabric8.kubernetes.api.Controller: void doCreatePersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.api.model.PersistentVolumeClaim create(io.fabric8.kubernetes.api.model.PersistentVolumeClaim)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: java.util.List get()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: java.util.List getByLabel(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: void delete(java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.api.model.PersistentVolumeClaim waitBound(java.lang.String,long)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createPvcIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation persistentVolumeClaims()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createPvcIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<io.fabric8.kubernetes.api.Controller: boolean checkNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<io.fabric8.kubernetes.api.Controller: boolean deleteNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<io.fabric8.kubernetes.api.Controller: boolean applyNamespace(io.fabric8.kubernetes.api.model.Namespace)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<io.fabric8.kubernetes.api.Controller: boolean applyNamespace(io.fabric8.kubernetes.api.model.Namespace)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.Optional fetchNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.List fetchNamespaces()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.List findPreparedNamespaces(org.eclipse.che.api.workspace.server.spi.NamespaceResolutionContext)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: boolean checkNamespaceExists(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void label(io.fabric8.kubernetes.api.model.Namespace,java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: io.fabric8.kubernetes.api.model.Namespace create(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void delete(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation namespaces()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: io.fabric8.kubernetes.api.model.Namespace get(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getQueryParameters()>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getQueryParameters()>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getQueryParameters()>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList processLocally(java.util.Map)>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: okhttp3.Response lambda$buildKubernetesInterceptor$0(io.fabric8.kubernetes.client.Config,okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: okhttp3.Response lambda$buildKubernetesInterceptor$0(io.fabric8.kubernetes.client.Config,okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: okhttp3.Response lambda$buildKubernetesInterceptor$0(io.fabric8.kubernetes.client.Config,okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<org.eclipse.jkube.kit.common.util.PropertiesUtil: java.lang.String getValueFromProperties(java.util.Properties,java.lang.String[])>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<io.fabric8.knative.client.util.ApiVersionUtil: java.lang.String apiGroup(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNotNullOrEmpty(java.lang.String)><---<io.fabric8.knative.client.util.ApiVersionUtil: java.lang.String apiVersion(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<io.fabric8.arquillian.utils.Util: void cleanupItem(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,io.fabric8.kubernetes.api.model.HasMetadata,java.util.List)>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: java.util.concurrent.CompletableFuture deleteAsyncStorageDeployment(io.fabric8.kubernetes.client.dsl.RollableScalableResource)>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: java.util.concurrent.CompletableFuture deleteAsyncStoragePod(io.fabric8.kubernetes.client.dsl.PodResource)>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeletePod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: void delete(java.util.Map)>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.CheNamespace: void cleanUpConfigMaps(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: void delete()>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void delete(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: void delete()>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: void delete()>
<io.fabric8.kubernetes.client.dsl.Deletable: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: void delete()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceAccounts()><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceAccounts()><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceAccounts()><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceAccounts()><---<io.fabric8.kubernetes.api.Controller: void doCreateServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceAccounts()><---<io.fabric8.kubernetes.api.Controller: void doCreateServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceAccounts()><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceAccounts()><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceAccounts()><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceAccounts()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void waitDefaultServiceAccount(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceAccounts()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void prepare()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation serviceAccounts()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createWorkspaceServiceAccount(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabels(java.util.Map)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabels(java.util.Map)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.util.Map getSelectedReplicationControllerMap(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabels(java.util.Map)><---<io.fabric8.arquillian.kubernetes.enricher.ReplicationControllerListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabels(java.util.Map)><---<io.fabric8.arquillian.kubernetes.enricher.PodListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabels(java.util.Map)><---<io.fabric8.arquillian.kubernetes.enricher.ServiceListResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabels(java.util.Map)><---<io.fabric8.arquillian.kubernetes.enricher.PodResourceProvider: java.lang.Object lookup(org.jboss.arquillian.test.api.ArquillianResource,java.lang.'annotation'.Annotation[])>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabels(java.util.Map)><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabels(java.util.Map)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespaceFactory: java.util.List findPreparedNamespaces(org.eclipse.che.api.workspace.server.spi.NamespaceResolutionContext)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabels(java.util.Map)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod createDeployment(io.fabric8.kubernetes.api.model.apps.Deployment,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabels(java.util.Map)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabels(java.util.Map)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: void delete(java.util.Map)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURLInCurrentNamespace(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForReplicationController(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: io.fabric8.kubernetes.api.model.Service requireService(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert replicas(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert replicas(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withName(java.lang.String)><---<org.springframework.cloud.kubernetes.StandardPodUtils: io.fabric8.kubernetes.api.model.Pod internalGetPod()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.StandardPodUtils: io.fabric8.kubernetes.api.model.Pod internalGetPod()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withName(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.config.ConfigMapPropertySource: java.util.Map getData(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withName(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createExplicitClusterRoleBindings(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withName(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: io.fabric8.kubernetes.client.Watch createBatchJobWatcher(java.lang.String,io.fabric8.kubernetes.client.Watcher)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applyOAuthClient(io.fabric8.openshift.api.model.OAuthClient,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applyServiceAccount(io.fabric8.kubernetes.api.model.ServiceAccount,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applyPersistentVolumeClaim(io.fabric8.kubernetes.api.model.PersistentVolumeClaim,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applySecret(io.fabric8.kubernetes.api.model.Secret,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applyRoleBinding(io.fabric8.openshift.api.model.RoleBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applyPolicyBinding(io.fabric8.openshift.api.model.PolicyBinding,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applyImageStream(io.fabric8.openshift.api.model.ImageStream,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applyService(io.fabric8.kubernetes.api.model.Service,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applyResource(io.fabric8.kubernetes.api.model.HasMetadata,java.lang.String,io.fabric8.kubernetes.client.dsl.MixedOperation)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.Config build()><---<io.fabric8.kubernetes.api.KubernetesHelper: void <clinit>()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.Config build()><---<io.fabric8.arquillian.kubernetes.Configuration: void resetFallbackConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.Config build()><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.kubernetes.client.KubernetesClient getOrCreateKubernetesClient(io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.Config build()><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.kubernetes.client.KubernetesClient getOrCreateKubernetesClient(io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.Config build()><---<io.fabric8.arquillian.kubernetes.Configuration: void <clinit>()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.Config build()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.Config build()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.Config build()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: io.fabric8.kubernetes.client.Config buildDefaultConfig(java.lang.String,java.lang.Boolean)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.Config build()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.Config build()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getDefaultNamespace()>
<io.fabric8.kubernetes.client.utils.URLUtils: java.lang.String join(java.lang.String[])><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForContainer(java.lang.String,io.fabric8.kubernetes.api.model.Container,io.fabric8.kubernetes.api.model.Pod)>
<io.fabric8.kubernetes.client.utils.URLUtils: java.lang.String join(java.lang.String[])><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: java.net.URL getResourceLogUrl(java.lang.Boolean)>
<io.fabric8.kubernetes.client.utils.URLUtils: java.lang.String join(java.lang.String[])><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: java.net.URL getResourceLogUrl(java.lang.Boolean)>
<io.fabric8.kubernetes.client.utils.URLUtils: java.lang.String join(java.lang.String[])><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build instantiate(io.fabric8.openshift.api.model.BuildRequest)>
<io.fabric8.kubernetes.client.utils.URLUtils: java.lang.String join(java.lang.String[])><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.Void trigger(io.fabric8.openshift.api.model.WebHookTrigger)>
<io.fabric8.kubernetes.client.utils.URLUtils: java.lang.String join(java.lang.String[])><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getQueryParameters()>
<io.fabric8.kubernetes.client.utils.URLUtils: java.lang.String join(java.lang.String[])><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: java.lang.Object doGetLog(java.lang.Class)>
<io.fabric8.kubernetes.client.utils.URLUtils: java.lang.String join(java.lang.String[])><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.utils.URLUtils: java.lang.String join(java.lang.String[])><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletableFuture authorize(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient)>
<io.fabric8.kubernetes.client.utils.URLUtils: java.lang.String join(java.lang.String[])><---<io.fabric8.openshift.client.osgi.ManagedOpenShiftClient: void activate(java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL apps()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL apps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodWatcher: void check()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL apps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: io.fabric8.kubernetes.client.dsl.RollableScalableResource getAsyncStorageDeploymentResource(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL apps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod createDeployment(io.fabric8.kubernetes.api.model.apps.Deployment,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL apps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL apps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL apps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL apps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createAsyncStoragePodIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL apps()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createAsyncStoragePodIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.Config: java.lang.String getNamespace()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String defaultNamespace()>
<io.fabric8.kubernetes.client.Config: java.lang.String getNamespace()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getNamespace()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getNamespace()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getNamespace()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getNamespace()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getNamespace()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getNamespace()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getNamespace()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getDefaultNamespace()>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.utils.KubernetesSerialization getKubernetesSerialization()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build instantiate(io.fabric8.openshift.api.model.BuildRequest)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.utils.KubernetesSerialization getKubernetesSerialization()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.Void trigger(io.fabric8.openshift.api.model.WebHookTrigger)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.utils.KubernetesSerialization getKubernetesSerialization()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.io.InputStream)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.utils.KubernetesSerialization getKubernetesSerialization()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.util.Map)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.utils.KubernetesSerialization getKubernetesSerialization()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList processLocally(java.io.InputStream)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.utils.KubernetesSerialization getKubernetesSerialization()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList processLocally(java.util.Map)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.utils.KubernetesSerialization getKubernetesSerialization()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList processLocally(java.util.Map)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.utils.KubernetesSerialization getKubernetesSerialization()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.api.model.Template processParameters(io.fabric8.openshift.api.model.Template)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.utils.KubernetesSerialization getKubernetesSerialization()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.api.model.Template processParameters(io.fabric8.openshift.api.model.Template)>
<io.fabric8.kubernetes.client.Config: java.lang.String getUsername()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient$2: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.Config: java.lang.String getUsername()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getUsername()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getUsername()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.Config: java.lang.String getUsername()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getUsername()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: okhttp3.Response lambda$buildKubernetesInterceptor$0(io.fabric8.kubernetes.client.Config,okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.Config: java.lang.String getUsername()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: okhttp3.Response lambda$buildKubernetesInterceptor$0(io.fabric8.kubernetes.client.Config,okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.Config: java.lang.String getUsername()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getPassword()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient$2: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.Config: java.lang.String getPassword()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getPassword()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getPassword()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.Config: java.lang.String getPassword()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getPassword()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: okhttp3.Response lambda$buildKubernetesInterceptor$0(io.fabric8.kubernetes.client.Config,okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.Config: java.lang.String getPassword()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: okhttp3.Response lambda$buildKubernetesInterceptor$0(io.fabric8.kubernetes.client.Config,okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.Config: java.lang.String getPassword()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.ConfigBuilder: void <init>()><---<io.fabric8.kubernetes.api.KubernetesHelper: void <clinit>()>
<io.fabric8.kubernetes.client.ConfigBuilder: void <init>()><---<io.fabric8.arquillian.kubernetes.Configuration: void resetFallbackConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: void <init>()><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.kubernetes.client.KubernetesClient getOrCreateKubernetesClient(io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.ConfigBuilder: void <init>()><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.kubernetes.client.KubernetesClient getOrCreateKubernetesClient(io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.ConfigBuilder: void <init>()><---<io.fabric8.arquillian.kubernetes.Configuration: void <clinit>()>
<io.fabric8.kubernetes.client.ConfigBuilder: void <init>()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: io.fabric8.kubernetes.client.Config buildDefaultConfig(java.lang.String,java.lang.Boolean)>
<io.fabric8.kubernetes.client.ConfigBuilder: void <init>()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: void <init>()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getDefaultNamespace()>
<io.fabric8.kubernetes.client.Config: java.lang.String getMasterUrl()><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.arquillian.kubernetes.Configuration fromMap(java.util.Map,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.Config: java.lang.String getMasterUrl()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getMasterUrl()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletableFuture authorize(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient)>
<io.fabric8.kubernetes.client.Config: java.lang.String getMasterUrl()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getMasterUrl()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesInfrastructure: javax.ws.rs.core.Response sendDirectInfrastructureRequest(java.lang.String,java.net.URI,javax.ws.rs.core.HttpHeaders,java.io.InputStream)>
<io.fabric8.kubernetes.client.Config: java.lang.String getMasterUrl()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getMasterUrl()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedCluster createKubeConfigClusterFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getMasterUrl()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedCluster createKubeConfigClusterFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object delete()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object delete()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object delete()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object delete()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object delete()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object delete()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object delete()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object delete()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodWatcher: void check()>
<io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: io.fabric8.kubernetes.client.dsl.RollableScalableResource getAsyncStorageDeploymentResource(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod createDeployment(io.fabric8.kubernetes.api.model.apps.Deployment,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete()>
<io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.Optional findPod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createAsyncStoragePodIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createAsyncStoragePodIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.api.model.NamedContext getCurrentContext()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.api.model.NamedContext getCurrentContext()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.nio.file.Path exportKubernetesClientConfigToFile(io.fabric8.kubernetes.client.Config,java.nio.file.Path)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.api.model.NamedContext getCurrentContext()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.nio.file.Path exportKubernetesClientConfigToFile(io.fabric8.kubernetes.client.Config,java.nio.file.Path)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.api.model.NamedContext getCurrentContext()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedCluster createKubeConfigClusterFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.api.model.NamedContext getCurrentContext()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.api.model.NamedContext getCurrentContext()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.api.model.NamedContext getCurrentContext()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.api.model.NamedContext getCurrentContext()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation ingresses()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation ingresses()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation ingresses()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation ingresses()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress create(io.fabric8.kubernetes.api.model.extensions.Ingress)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation ingresses()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: java.util.List get()>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation ingresses()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress wait(java.lang.String,long,java.util.concurrent.TimeUnit,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation ingresses()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: void delete()>
<io.fabric8.kubernetes.client.Config: java.lang.String getOauthToken()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient$3: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.Config: java.lang.String getOauthToken()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getOauthToken()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient createJolokiaClient(io.fabric8.kubernetes.api.model.Container,java.lang.String)>
<io.fabric8.kubernetes.client.Config: java.lang.String getOauthToken()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: okhttp3.Response lambda$buildKubernetesInterceptor$0(io.fabric8.kubernetes.client.Config,okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.Config: java.lang.String getOauthToken()><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: okhttp3.Response lambda$buildKubernetesInterceptor$0(io.fabric8.kubernetes.client.Config,okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.Config: java.lang.String getOauthToken()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getOauthToken()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: boolean isTrustCerts()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: boolean isTrustCerts()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: boolean isTrustCerts()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: boolean isTrustCerts()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: boolean isTrustCerts()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedCluster createKubeConfigClusterFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: boolean isTrustCerts()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedCluster createKubeConfigClusterFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: boolean isTrustCerts()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedCluster createKubeConfigClusterFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.client.OperationInfo forOperationType(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: java.lang.Object doGetLog(java.lang.Class)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.client.OperationInfo forOperationType(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.client.OperationInfo forOperationType(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: java.lang.Object doGetLog(java.lang.Class)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.client.OperationInfo forOperationType(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.client.OperationInfo forOperationType(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.io.File)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.client.OperationInfo forOperationType(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.util.Map)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.client.OperationInfo forOperationType(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList processLocally(java.io.File)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(io.fabric8.kubernetes.client.OperationInfo-InterfaceClass,java.lang.Throwable)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: java.lang.Object doGetLog(java.lang.Class)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(io.fabric8.kubernetes.client.OperationInfo-InterfaceClass,java.lang.Throwable)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(io.fabric8.kubernetes.client.OperationInfo-InterfaceClass,java.lang.Throwable)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: java.lang.Object doGetLog(java.lang.Class)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(io.fabric8.kubernetes.client.OperationInfo-InterfaceClass,java.lang.Throwable)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(io.fabric8.kubernetes.client.OperationInfo-InterfaceClass,java.lang.Throwable)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.io.File)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(io.fabric8.kubernetes.client.OperationInfo-InterfaceClass,java.lang.Throwable)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(io.fabric8.kubernetes.client.OperationInfo-InterfaceClass,java.lang.Throwable)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList processLocally(java.io.File)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.net.URL getResourceUrl()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: java.net.URL getResourceLogUrl(java.lang.Boolean)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.net.URL getResourceUrl()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: java.net.URL getResourceLogUrl(java.lang.Boolean)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.net.URL getResourceUrl()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build instantiate(io.fabric8.openshift.api.model.BuildRequest)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.net.URL getResourceUrl()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.Void trigger(io.fabric8.openshift.api.model.WebHookTrigger)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.net.URL getResourceUrl()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getQueryParameters()>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.net.URL getResourceUrl()><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: java.lang.Object doGetLog(java.lang.Class)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.net.URL getResourceUrl()><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.http.HttpClient: io.fabric8.kubernetes.client.http.HttpRequest$Builder newHttpRequestBuilder()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build instantiate(io.fabric8.openshift.api.model.BuildRequest)>
<io.fabric8.kubernetes.client.http.HttpClient: io.fabric8.kubernetes.client.http.HttpRequest$Builder newHttpRequestBuilder()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.Void trigger(io.fabric8.openshift.api.model.WebHookTrigger)>
<io.fabric8.kubernetes.client.http.HttpClient: io.fabric8.kubernetes.client.http.HttpRequest$Builder newHttpRequestBuilder()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.http.HttpClient: io.fabric8.kubernetes.client.http.HttpRequest$Builder newHttpRequestBuilder()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.util.Map)>
<io.fabric8.kubernetes.client.http.HttpClient: io.fabric8.kubernetes.client.http.HttpRequest$Builder newHttpRequestBuilder()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletableFuture authorize(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient)>
<io.fabric8.kubernetes.client.http.HttpClient: io.fabric8.kubernetes.client.http.HttpRequest$Builder newHttpRequestBuilder()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpClient: io.fabric8.kubernetes.client.http.HttpRequest$Builder newHttpRequestBuilder()><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(java.lang.Throwable)><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(java.lang.Throwable)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build instantiate(io.fabric8.openshift.api.model.BuildRequest)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(java.lang.Throwable)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.Void trigger(io.fabric8.openshift.api.model.WebHookTrigger)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(java.lang.Throwable)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build fromFile(java.io.File)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(java.lang.Throwable)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletableFuture authorize(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.RuntimeException launderThrowable(java.lang.Throwable)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object inContainer(java.lang.Object)><---<io.fabric8.kubernetes.assertions.support.PodLogWatcher: void <init>(io.fabric8.kubernetes.assertions.support.PodWatcher,java.lang.String,io.fabric8.kubernetes.api.model.Pod,java.lang.String,java.io.File)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object inContainer(java.lang.Object)><---<io.fabric8.arquillian.kubernetes.await.SessionPodsAreReady: java.lang.Boolean call()>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object inContainer(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[],java.util.function.BiConsumer)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object inContainer(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[])>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object inContainer(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void run()>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object inContainer(java.lang.Object)><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.dsl.LogWatch getPodLogWatcher(org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>(io.fabric8.kubernetes.client.Config)><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.kubernetes.client.KubernetesClient getOrCreateKubernetesClient(io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>(io.fabric8.kubernetes.client.Config)><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.kubernetes.client.KubernetesClient getOrCreateKubernetesClient(io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>(io.fabric8.kubernetes.client.Config)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.KubernetesClient kubernetesClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>(io.fabric8.kubernetes.client.Config)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>(io.fabric8.kubernetes.client.Config)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.KubernetesClient kubernetesClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>(io.fabric8.kubernetes.client.Config)><---<io.dekorate.utils.Clients: io.fabric8.kubernetes.client.KubernetesClient fromConfig(java.lang.Object)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperationsImpl: io.fabric8.kubernetes.client.dsl.internal.OperationContext defaultContext(io.fabric8.kubernetes.client.Client-InterfaceClass)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: void <init>(io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperationsImpl: io.fabric8.kubernetes.client.dsl.internal.OperationContext defaultContext(io.fabric8.kubernetes.client.Client-InterfaceClass)><---<io.fabric8.openshift.client.dsl.internal.authorization.RoleBindingOperationsImpl: void <init>(io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperationsImpl: io.fabric8.kubernetes.client.dsl.internal.OperationContext defaultContext(io.fabric8.kubernetes.client.Client-InterfaceClass)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: void <init>(io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperationsImpl: io.fabric8.kubernetes.client.dsl.internal.OperationContext defaultContext(io.fabric8.kubernetes.client.Client-InterfaceClass)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: void <init>(io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperationsImpl: io.fabric8.kubernetes.client.dsl.internal.OperationContext defaultContext(io.fabric8.kubernetes.client.Client-InterfaceClass)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: void <init>(io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperationsImpl: io.fabric8.kubernetes.client.dsl.internal.OperationContext defaultContext(io.fabric8.kubernetes.client.Client-InterfaceClass)><---<io.fabric8.openshift.client.dsl.internal.project.ProjectOperationsImpl: void <init>(io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withApiGroupName(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.PodOperationContext,io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withApiGroupName(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.authorization.RoleBindingOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withApiGroupName(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: void <init>(io.fabric8.openshift.client.dsl.internal.BuildConfigOperationContext,io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withApiGroupName(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.PodOperationContext,io.fabric8.kubernetes.client.dsl.internal.OperationContext,java.lang.Integer)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withApiGroupName(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withApiGroupName(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.project.ProjectOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withPlural(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.PodOperationContext,io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withPlural(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.authorization.RoleBindingOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withPlural(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: void <init>(io.fabric8.openshift.client.dsl.internal.BuildConfigOperationContext,io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withPlural(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.PodOperationContext,io.fabric8.kubernetes.client.dsl.internal.OperationContext,java.lang.Integer)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withPlural(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withPlural(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.project.ProjectOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperation: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext-SuperClass,java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.PodOperationContext,io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperation: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext-SuperClass,java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.authorization.RoleBindingOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperation: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext-SuperClass,java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: void <init>(io.fabric8.openshift.client.dsl.internal.BuildConfigOperationContext,io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperation: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext-SuperClass,java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.PodOperationContext,io.fabric8.kubernetes.client.dsl.internal.OperationContext,java.lang.Integer)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperation: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext-SuperClass,java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperation: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext-SuperClass,java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.project.ProjectOperationsImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.String asJson(java.lang.Object)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build instantiate(io.fabric8.openshift.api.model.BuildRequest)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.String asJson(java.lang.Object)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.Void trigger(io.fabric8.openshift.api.model.WebHookTrigger)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.String asJson(java.lang.Object)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.util.Map)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.String asJson(java.lang.Object)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList processLocally(java.util.Map)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.String asJson(java.lang.Object)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.api.model.Template processParameters(io.fabric8.openshift.api.model.Template)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.String asJson(java.lang.Object)><---<org.eclipse.jkube.kit.common.util.Serialization: java.lang.String asJson(java.lang.Object)>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNullOrEmpty(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getQueryParameters()>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNullOrEmpty(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getQueryParameters()>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNullOrEmpty(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getQueryParameters()>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNullOrEmpty(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getQueryParameters()>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNullOrEmpty(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getQueryParameters()>
<io.fabric8.kubernetes.client.utils.Utils: boolean isNullOrEmpty(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getQueryParameters()>
<io.fabric8.kubernetes.client.impl.BaseClient: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl: io.fabric8.openshift.client.dsl.OpenShiftConfigAPIGroupDSL config()>
<io.fabric8.kubernetes.client.impl.BaseClient: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl: io.fabric8.openshift.client.dsl.OpenShiftConsoleAPIGroupDSL console()>
<io.fabric8.kubernetes.client.impl.BaseClient: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl: io.fabric8.openshift.client.dsl.OpenShiftClusterAutoscalingAPIGroupDSL clusterAutoscaling()>
<io.fabric8.kubernetes.client.impl.BaseClient: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl: io.fabric8.openshift.client.dsl.OpenShiftHiveAPIGroupDSL hive()>
<io.fabric8.kubernetes.client.impl.BaseClient: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl: io.fabric8.openshift.client.dsl.OpenShiftOperatorAPIGroupDSL operator()>
<io.fabric8.kubernetes.client.impl.BaseClient: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl: io.fabric8.openshift.client.dsl.OpenShiftOperatorHubAPIGroupDSL operatorHub()>
<io.fabric8.kubernetes.client.impl.Handlers: void register(java.lang.Class,java.util.function.Function)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerHandlers(io.fabric8.kubernetes.client.impl.Handlers)>
<io.fabric8.kubernetes.client.impl.Handlers: void register(java.lang.Class,java.util.function.Function)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerHandlers(io.fabric8.kubernetes.client.impl.Handlers)>
<io.fabric8.kubernetes.client.impl.Handlers: void register(java.lang.Class,java.util.function.Function)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerHandlers(io.fabric8.kubernetes.client.impl.Handlers)>
<io.fabric8.kubernetes.client.impl.Handlers: void register(java.lang.Class,java.util.function.Function)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerHandlers(io.fabric8.kubernetes.client.impl.Handlers)>
<io.fabric8.kubernetes.client.impl.Handlers: void register(java.lang.Class,java.util.function.Function)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerHandlers(io.fabric8.kubernetes.client.impl.Handlers)>
<io.fabric8.kubernetes.client.impl.Handlers: void register(java.lang.Class,java.util.function.Function)><---<io.fabric8.openshift.client.impl.OpenShiftExtensionAdapter: void registerHandlers(io.fabric8.kubernetes.client.impl.Handlers)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object withPropagationPolicy(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: void delete(java.util.Map)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object withPropagationPolicy(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.CheNamespace: void cleanUpConfigMaps(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object withPropagationPolicy(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesServices: void delete()>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object withPropagationPolicy(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesConfigsMaps: void delete()>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object withPropagationPolicy(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: void delete()>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object withPropagationPolicy(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: void delete()>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.Object adapt(java.lang.Class)><---<io.fabric8.kubernetes.api.Controller: io.fabric8.openshift.client.OpenShiftClient getOpenShiftClientOrNull()>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.Object adapt(java.lang.Class)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.Object adapt(java.lang.Class)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURLInCurrentNamespace(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.Object adapt(java.lang.Class)><---<io.fabric8.arquillian.kubernetes.SessionListener: boolean applyConfiguration(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.kubernetes.api.Controller,io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.Object adapt(java.lang.Class)><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object list()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURLInCurrentNamespace(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object list()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForService(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object list()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: java.util.List clientsForService(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object list()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.ReplicationControllerListAssert replicationControllerList()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object list()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.utils.Utils: java.lang.String getSystemPropertyOrEnvVar(java.lang.String,java.lang.String)><---<io.fabric8.arquillian.kubernetes.Configuration: java.net.URL getKubernetesConfigurationUrl(java.util.Map)>
<io.fabric8.kubernetes.client.utils.Utils: java.lang.String getSystemPropertyOrEnvVar(java.lang.String,java.lang.String)><---<io.fabric8.arquillian.kubernetes.Configuration: java.net.URL getKubernetesConfigurationUrl(java.util.Map)>
<io.fabric8.kubernetes.client.utils.Utils: java.lang.String getSystemPropertyOrEnvVar(java.lang.String,java.lang.String)><---<io.fabric8.arquillian.kubernetes.Configuration: java.net.URL getKubernetesConfigurationUrl(java.util.Map)>
<io.fabric8.kubernetes.client.utils.Utils: java.lang.String getSystemPropertyOrEnvVar(java.lang.String,java.lang.String)><---<io.fabric8.arquillian.kubernetes.Configuration: java.lang.String getStringProperty(java.lang.String,java.util.Map,java.lang.String)>
<io.fabric8.kubernetes.client.utils.Utils: java.lang.String getSystemPropertyOrEnvVar(java.lang.String,java.lang.String)><---<io.fabric8.arquillian.kubernetes.Configuration: java.lang.Long getLongProperty(java.lang.String,java.util.Map,java.lang.Long)>
<io.fabric8.kubernetes.client.Config: java.lang.String getCaCertFile()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getCaCertFile()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getCaCertFile()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getCaCertFile()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedCluster createKubeConfigClusterFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getCaCertFile()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedCluster createKubeConfigClusterFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getCaCertData()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getCaCertData()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getCaCertData()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getCaCertData()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedCluster createKubeConfigClusterFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getCaCertData()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedCluster createKubeConfigClusterFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyFile()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyFile()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyFile()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyFile()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyFile()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyData()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyData()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyData()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyData()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyData()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientCertFile()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientCertFile()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientCertFile()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientCertFile()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientCertFile()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientCertData()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientCertData()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientCertData()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientCertData()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientCertData()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder url(java.net.URL)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build instantiate(io.fabric8.openshift.api.model.BuildRequest)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder url(java.net.URL)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.util.Map)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder url(java.net.URL)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletableFuture authorize(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder url(java.net.URL)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder url(java.net.URL)><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: java.util.concurrent.CompletableFuture deleteAsyncStoragePod(io.fabric8.kubernetes.client.dsl.PodResource)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod wait(java.lang.String,int,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture waitRunningAsync(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeletePod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.LogWatch: java.io.InputStream getOutput()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void run()>
<io.fabric8.kubernetes.client.dsl.LogWatch: java.io.InputStream getOutput()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void run()>
<io.fabric8.kubernetes.client.dsl.LogWatch: java.io.InputStream getOutput()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.util.concurrent.CompletableFuture printLogsAsync(io.fabric8.kubernetes.client.dsl.LogWatch,java.util.function.Consumer)>
<io.fabric8.kubernetes.client.dsl.LogWatch: java.io.InputStream getOutput()><---<org.apache.dolphinscheduler.plugin.task.api.AbstractCommandExecutor: void lambda$collectPodLogIfNeeded$0()>
<io.fabric8.kubernetes.client.dsl.LogWatch: java.io.InputStream getOutput()><---<org.apache.dolphinscheduler.plugin.task.api.k8s.impl.K8sTaskExecutor: void lambda$parsePodLogOutput$0(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert deployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation deployments()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.ParameterMixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void installTemplate(io.fabric8.openshift.api.model.Template,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ParameterMixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void installTemplate(io.fabric8.openshift.api.model.Template,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ParameterMixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void installTemplate(io.fabric8.openshift.api.model.Template,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ParameterMixedOperation: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void doCreateTemplate(io.fabric8.openshift.api.model.Template,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.Config: int getConnectionTimeout()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: int getConnectionTimeout()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: int getConnectionTimeout()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: int getConnectionTimeout()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: int getRequestTimeout()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: int getRequestTimeout()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: int getRequestTimeout()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: int getRequestTimeout()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.KubernetesClient: java.net.URL getMasterUrl()><---<io.fabric8.kubernetes.api.KubernetesHelper: boolean isOpenShift(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: java.net.URL getMasterUrl()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient clientForContainer(java.lang.String,io.fabric8.kubernetes.api.model.Container,io.fabric8.kubernetes.api.model.Pod)>
<io.fabric8.kubernetes.client.KubernetesClient: java.net.URL getMasterUrl()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient createJolokiaClient(io.fabric8.kubernetes.api.model.Container,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: java.net.URL getMasterUrl()><---<io.fabric8.arquillian.kubernetes.SessionListener: void start(io.fabric8.arquillian.kubernetes.event.Start,io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.kubernetes.api.Controller,io.fabric8.arquillian.kubernetes.Configuration)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withLabels(java.util.Map)><---<io.fabric8.kubernetes.assertions.PodSelectionAssert: io.fabric8.kubernetes.assertions.PodSelectionAssert isPodReadyForPeriod(long,long)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withLabels(java.util.Map)><---<io.fabric8.kubernetes.assertions.PodSelectionAssert: java.util.List getPods()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withLabels(java.util.Map)><---<io.fabric8.kubernetes.assertions.ServicePodsAssert: io.fabric8.kubernetes.assertions.ServicePodsAssert hasEndpointOrReadyPod(long,long)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withLabels(java.util.Map)><---<io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySource: java.util.Map getSourceData(io.fabric8.kubernetes.client.KubernetesClient,org.springframework.core.env.Environment,io.fabric8.spring.cloud.kubernetes.config.SecretsConfigProperties)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object watch(java.lang.Object)><---<io.fabric8.kubernetes.assertions.PodSelectionAssert: io.fabric8.kubernetes.assertions.PodSelectionAssert isPodReadyForPeriod(long,long)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: io.fabric8.kubernetes.api.model.Pod createDeployment(io.fabric8.kubernetes.api.model.apps.Deployment,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void watch(org.eclipse.che.workspace.infrastructure.kubernetes.namespace.event.PodActionHandler)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.client.Watch pvcIsWaitingForConsumerWatcher(java.util.concurrent.CompletableFuture,io.fabric8.kubernetes.api.model.PersistentVolumeClaim)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object createNew()><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object createNew()><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object createNew()><---<io.fabric8.arquillian.kubernetes.SessionListener: java.util.Set generateSecrets(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,io.fabric8.kubernetes.api.model.ObjectMeta)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object createNew()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: io.fabric8.kubernetes.api.model.Namespace create(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withMasterUrl(java.lang.String)><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.kubernetes.client.KubernetesClient getOrCreateKubernetesClient(io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withMasterUrl(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withMasterUrl(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withMasterUrl(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: io.fabric8.kubernetes.client.Config buildDefaultConfig(java.lang.String,java.lang.Boolean)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.kubernetes.client.KubernetesClient getOrCreateKubernetesClient(io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withNamespace(java.lang.String)><---<io.fabric8.arquillian.kubernetes.Configuration: io.fabric8.kubernetes.client.KubernetesClient getOrCreateKubernetesClient(io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withNamespace(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withNamespace(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void close()><---<org.springframework.cloud.kubernetes.profile.KubernetesProfileEnvironmentPostProcessor: boolean isInsideKubernetes()>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void close()><---<org.springframework.cloud.kubernetes.profile.KubernetesProfileEnvironmentPostProcessor: boolean isInsideKubernetes()>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void close()><---<org.springframework.cloud.kubernetes.profile.KubernetesProfileEnvironmentPostProcessor: boolean isInsideKubernetes()>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void close()><---<org.springframework.cloud.kubernetes.profile.KubernetesProfileEnvironmentPostProcessor: boolean isInsideKubernetes()>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withPrettyOutput(boolean)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: java.lang.String getLog(boolean)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withPrettyOutput(boolean)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.Loggable withPrettyOutput()>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withPrettyOutput(boolean)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: java.lang.String getLog(boolean)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withPrettyOutput(boolean)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.Loggable withPrettyOutput()>
<io.fabric8.kubernetes.client.http.HttpResponse: int code()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: boolean shouldFail(io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: int code()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.lang.String lambda$authorize$3(io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: int code()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: int code()><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.http.HttpResponse: java.lang.Object body()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: java.lang.Object body()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: java.lang.Object body()><---<org.eclipse.jkube.kit.common.util.IoUtil: void lambda$downloadArchive$1(java.io.File,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: java.lang.Object body()><---<org.eclipse.jkube.kit.common.util.IoUtil: void lambda$download$0(java.io.File,org.eclipse.jkube.kit.common.KitLogger,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object require()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object require()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object require()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object require()><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.ExecWatch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[],java.util.function.BiConsumer)>
<io.fabric8.kubernetes.client.dsl.ExecWatch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[],java.util.function.BiConsumer)>
<io.fabric8.kubernetes.client.dsl.ExecWatch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[])>
<io.fabric8.kubernetes.client.dsl.ExecWatch: void close()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[])>
<io.fabric8.kubernetes.client.http.HttpClient: void close()><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.http.HttpClient: void close()><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.http.HttpClient: void close()><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.http.HttpClient: void close()><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.BatchAPIGroupDSL batch()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void createJob(java.lang.String,io.fabric8.kubernetes.api.model.batch.v1.Job)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.BatchAPIGroupDSL batch()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void deleteJob(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.BatchAPIGroupDSL batch()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.Boolean jobExist(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.BatchAPIGroupDSL batch()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: io.fabric8.kubernetes.client.Watch createBatchJobWatcher(java.lang.String,io.fabric8.kubernetes.client.Watcher)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation replicaSets()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation replicaSets()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.HasPodSelectionAssert replicas(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation replicaSets()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.dsl.NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicable: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicable: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.kubernetes.api.Controller: void applyImageStream(io.fabric8.openshift.api.model.ImageStream,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicable: java.lang.Object inNamespace(java.lang.String)><---<io.fabric8.arquillian.utils.Util: void cleanupItem(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,io.fabric8.kubernetes.api.model.HasMetadata,java.util.List)>
<io.fabric8.kubernetes.client.Config: java.lang.String getUserAgent()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient$4: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>
<io.fabric8.kubernetes.client.Config: java.lang.String getUserAgent()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getUserAgent()><---<io.fabric8.kubernetes.api.KubernetesHelper$JenkinShiftClient: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.dsl.ServiceResource: java.lang.Object get()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.assertions.ServicePodsAssert service(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ServiceResource: java.lang.Object get()><---<io.fabric8.kubernetes.assertions.KubernetesAssert: io.fabric8.kubernetes.api.model.Service getService(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ServiceResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStorageProvisioner: void createStorageServiceIfNotExist(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation endpoints()><---<io.fabric8.kubernetes.assertions.ServicePodsAssert: io.fabric8.kubernetes.assertions.ServicePodsAssert hasEndpointOrReadyPod(long,long)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation endpoints()><---<io.fabric8.arquillian.kubernetes.await.SessionServicesAreReady: boolean isEndpointAvailable(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation endpoints()><---<io.fabric8.cdi.Services: java.util.List toServiceEndpointUrl(java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.Boolean isAdaptable(java.lang.Class)><---<io.fabric8.arquillian.kubernetes.SessionListener: boolean applyConfiguration(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.kubernetes.api.Controller,io.fabric8.arquillian.kubernetes.Configuration,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.Boolean isAdaptable(java.lang.Class)><---<io.fabric8.arquillian.utils.Util: void displaySessionStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session)>
<io.fabric8.kubernetes.client.KubernetesClient: java.lang.Boolean isAdaptable(java.lang.Class)><---<io.fabric8.openshift.client.impl.URLFromOpenshiftRouteImpl: java.lang.String getURL(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation securityContextConstraints()><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation securityContextConstraints()><---<io.fabric8.arquillian.kubernetes.SessionListener: void generateServiceAccount(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.Set,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation securityContextConstraints()><---<io.fabric8.arquillian.utils.Util: void cleanupAllResources(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.util.List)>
<io.fabric8.kubernetes.client.Config: java.lang.String getApiVersion()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getApiVersion()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getApiVersion()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyAlgo()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyAlgo()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyAlgo()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyPassphrase()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyPassphrase()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getClientKeyPassphrase()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withTrustCerts(boolean)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withTrustCerts(boolean)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withTrustCerts(boolean)><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: io.fabric8.kubernetes.client.Config buildDefaultConfig(java.lang.String,java.lang.Boolean)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.api.model.HasMetadata getItemOrRequireFromServer()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.openshift.api.model.DeploymentConfig deployLatest()>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.api.model.HasMetadata getItemOrRequireFromServer()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.openshift.api.model.DeploymentConfig deployLatest()>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.api.model.HasMetadata getItemOrRequireFromServer()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList processLocally(java.util.Map)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.api.model.HasMetadata get()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.api.model.HasMetadata get()><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.api.model.HasMetadata get()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.api.model.Template get()>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: java.lang.String getLogParameters()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: java.net.URL getResourceLogUrl(java.lang.Boolean)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: java.lang.String getLogParameters()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: java.net.URL getResourceLogUrl(java.lang.Boolean)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: java.lang.String getLogParameters()><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: java.lang.String getLogParameters()>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: java.lang.Integer getReadyWaitTimeout()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: void waitUntilDeploymentConfigPodBecomesReady(io.fabric8.openshift.api.model.DeploymentConfig)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: java.lang.Integer getReadyWaitTimeout()><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: void waitUntilBuildPodBecomesReady(io.fabric8.openshift.api.model.Build)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: java.lang.Integer getReadyWaitTimeout()><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: void waitUntilBuildPodBecomesReady(io.fabric8.openshift.api.model.Build)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.lang.String getNamespace()><---<io.fabric8.openshift.client.dsl.internal.authorization.RoleBindingOperationsImpl$1: void visit(io.fabric8.kubernetes.api.model.ObjectReferenceBuilder)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.lang.String getNamespace()><---<io.fabric8.openshift.client.dsl.internal.authorization.RoleBindingOperationsImpl: void enrichFromSubjects(io.fabric8.openshift.api.model.RoleBindingBuilder,java.util.List)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.lang.String getNamespace()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: java.net.URL getProcessUrl()>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder post(java.lang.String,java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build instantiate(io.fabric8.openshift.api.model.BuildRequest)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder post(java.lang.String,java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.Void trigger(io.fabric8.openshift.api.model.WebHookTrigger)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder post(java.lang.String,java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.util.Map)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.Object unmarshal(java.io.InputStream,com.fasterxml.jackson.core.type.TypeReference)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.io.InputStream)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.Object unmarshal(java.io.InputStream,com.fasterxml.jackson.core.type.TypeReference)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList processLocally(java.io.InputStream)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.Object unmarshal(java.io.InputStream,com.fasterxml.jackson.core.type.TypeReference)><---<org.eclipse.jkube.kit.common.util.Serialization: java.lang.Object unmarshal(java.io.InputStream,com.fasterxml.jackson.core.type.TypeReference)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.Object unmarshal(java.lang.String,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList processLocally(java.util.Map)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.Object unmarshal(java.lang.String,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.api.model.Template processParameters(io.fabric8.openshift.api.model.Template)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.Object unmarshal(java.lang.String,java.lang.Class)><---<org.eclipse.jkube.kit.common.util.Serialization: java.lang.Object unmarshal(java.lang.String,java.lang.Class)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.impl.URLFromOpenshiftRouteImpl: java.lang.String getURL(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.osgi.ManagedOpenShiftClient: void activate(java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<org.eclipse.jkube.kit.common.util.OpenshiftHelper: io.fabric8.openshift.client.OpenShiftClient asOpenShiftClient(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest build()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletableFuture authorize(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest build()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest build()><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.http.HttpClient: java.util.concurrent.CompletableFuture sendAsync(io.fabric8.kubernetes.client.http.HttpRequest,java.lang.Class)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletableFuture authorize(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient)>
<io.fabric8.kubernetes.client.http.HttpClient: java.util.concurrent.CompletableFuture sendAsync(io.fabric8.kubernetes.client.http.HttpRequest,java.lang.Class)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpClient: java.util.concurrent.CompletableFuture sendAsync(io.fabric8.kubernetes.client.http.HttpRequest,java.lang.Class)><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.KubernetesClientBuilder: void <init>()><---<io.fabric8.openshift.client.osgi.ManagedOpenShiftClient: void activate(java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClientBuilder: void <init>()><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.KubernetesClient lambda$getClient$0(org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientBuilder: void <init>()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void buildClient(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientBuilder: io.fabric8.kubernetes.client.KubernetesClientBuilder withConfig(io.fabric8.kubernetes.client.Config)><---<io.fabric8.openshift.client.osgi.ManagedOpenShiftClient: void activate(java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClientBuilder: io.fabric8.kubernetes.client.KubernetesClientBuilder withConfig(io.fabric8.kubernetes.client.Config)><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.KubernetesClient lambda$getClient$0(org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientBuilder: io.fabric8.kubernetes.client.KubernetesClientBuilder withConfig(io.fabric8.kubernetes.client.Config)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void buildClient(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientBuilder: io.fabric8.kubernetes.client.KubernetesClient build()><---<io.fabric8.openshift.client.osgi.ManagedOpenShiftClient: void activate(java.util.Map)>
<io.fabric8.kubernetes.client.KubernetesClientBuilder: io.fabric8.kubernetes.client.KubernetesClient build()><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.KubernetesClient lambda$getClient$0(org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientBuilder: io.fabric8.kubernetes.client.KubernetesClient build()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void buildClient(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.Throwable getCause()><---<org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesRecipeParser: java.util.List parse(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.Throwable getCause()><---<org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesRecipeParser: java.util.List parse(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClientException: java.lang.Throwable getCause()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: void handleKubernetesClientException(io.fabric8.kubernetes.client.KubernetesClientException,org.eclipse.jkube.kit.common.KitLogger)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.client.Watch pvcIsBoundWatcher(java.util.concurrent.CompletableFuture,io.fabric8.kubernetes.client.dsl.Resource)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void waitDefaultServiceAccount(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress wait(java.lang.String,long,java.util.concurrent.TimeUnit,java.util.function.Predicate)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.RbacAPIGroupDSL rbac()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesWorkspaceServiceAccount: io.fabric8.kubernetes.client.dsl.MixedOperation lambda$new$1(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.RbacAPIGroupDSL rbac()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesWorkspaceServiceAccount: io.fabric8.kubernetes.client.dsl.MixedOperation lambda$new$0(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.RbacAPIGroupDSL rbac()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createExplicitClusterRoleBindings(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object createOrReplace(java.lang.Object[])><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void label(io.fabric8.kubernetes.api.model.Namespace,java.util.Map)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object createOrReplace(java.lang.Object[])><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createRoleWithBinding(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.List,java.util.List,java.util.List,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object createOrReplace(java.lang.Object[])><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createExplicitClusterRoleBindings(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: io.fabric8.kubernetes.model.jackson.UnmatchedFieldTypeModule getUnmatchedFieldTypeModule()><---<org.eclipse.jkube.kit.common.util.Serialization: void <clinit>()>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: io.fabric8.kubernetes.model.jackson.UnmatchedFieldTypeModule getUnmatchedFieldTypeModule()><---<org.eclipse.jkube.kit.common.util.Serialization: void <clinit>()>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: io.fabric8.kubernetes.model.jackson.UnmatchedFieldTypeModule getUnmatchedFieldTypeModule()><---<org.eclipse.jkube.kit.common.util.Serialization: void <clinit>()>
<io.fabric8.kubernetes.client.dsl.BatchAPIGroupDSL: io.fabric8.kubernetes.client.dsl.V1BatchAPIGroupDSL v1()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void createJob(java.lang.String,io.fabric8.kubernetes.api.model.batch.v1.Job)>
<io.fabric8.kubernetes.client.dsl.BatchAPIGroupDSL: io.fabric8.kubernetes.client.dsl.V1BatchAPIGroupDSL v1()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void deleteJob(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.BatchAPIGroupDSL: io.fabric8.kubernetes.client.dsl.V1BatchAPIGroupDSL v1()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: io.fabric8.kubernetes.client.Watch createBatchJobWatcher(java.lang.String,io.fabric8.kubernetes.client.Watcher)>
<io.fabric8.kubernetes.client.dsl.V1BatchAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation jobs()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void createJob(java.lang.String,io.fabric8.kubernetes.api.model.batch.v1.Job)>
<io.fabric8.kubernetes.client.dsl.V1BatchAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation jobs()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void deleteJob(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.V1BatchAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation jobs()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: io.fabric8.kubernetes.client.Watch createBatchJobWatcher(java.lang.String,io.fabric8.kubernetes.client.Watcher)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicable resource(io.fabric8.kubernetes.api.model.HasMetadata)><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicable resource(io.fabric8.kubernetes.api.model.HasMetadata)><---<io.fabric8.arquillian.utils.Util: void cleanupItem(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,io.fabric8.kubernetes.api.model.HasMetadata,java.util.List)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodWatcher: void check()>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object delete()><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodWatcher: void removeAsyncStoragePodWithoutDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.utils.Utils: java.lang.Boolean getSystemPropertyOrEnvVar(java.lang.String,java.lang.Boolean)><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.api.model.Service)>
<io.fabric8.kubernetes.client.utils.Utils: java.lang.Boolean getSystemPropertyOrEnvVar(java.lang.String,java.lang.Boolean)><---<io.fabric8.arquillian.kubernetes.Configuration: java.lang.Boolean getBooleanProperty(java.lang.String,java.util.Map,java.lang.Boolean)>
<io.fabric8.kubernetes.client.Config: void <init>()><---<io.fabric8.kubernetes.api.KubernetesHelper: io.fabric8.kubernetes.client.Config createJenkinshiftConfig(java.lang.String)>
<io.fabric8.kubernetes.client.Config: void <init>()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object createOrReplace(java.lang.Object[])><---<io.fabric8.kubernetes.api.pipelines.PipelineConfiguration: void savePipelineConfiguration(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,io.fabric8.kubernetes.api.pipelines.PipelineConfiguration)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object createOrReplace(java.lang.Object[])><---<io.fabric8.arquillian.utils.ConfigMaps: io.fabric8.kubernetes.api.model.ConfigMap updateConfigMapStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.Config getConfiguration()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient createJolokiaClient(io.fabric8.kubernetes.api.model.Container,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.Config getConfiguration()><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient createJolokiaClient(io.fabric8.kubernetes.api.model.Container,java.lang.String)>
<io.fabric8.kubernetes.client.Watcher$Action: boolean equals(java.lang.Object)><---<io.fabric8.kubernetes.assertions.support.PodWatcher: void eventReceived(io.fabric8.kubernetes.client.Watcher$Action,io.fabric8.kubernetes.api.model.Pod)>
<io.fabric8.kubernetes.client.Watcher$Action: boolean equals(java.lang.Object)><---<io.fabric8.kubernetes.assertions.support.PodWatcher: void eventReceived(io.fabric8.kubernetes.client.Watcher$Action,io.fabric8.kubernetes.api.model.Pod)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.client.Config autoConfigure(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.client.Config autoConfigure(java.lang.String)><---<com.exactpro.th2.common.schema.factory.CommonFactory: com.exactpro.th2.common.schema.factory.CommonFactory createFromKubernetes(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
<io.fabric8.kubernetes.client.ConfigBuilder: void <init>(io.fabric8.kubernetes.client.Config)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: void <init>(io.fabric8.kubernetes.client.Config)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withApiVersion(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withApiVersion(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withUsername(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withUsername(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withPassword(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withPassword(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withCaCertFile(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withCaCertFile(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withCaCertData(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withCaCertData(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientKeyFile(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientKeyFile(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientKeyData(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientKeyData(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientCertFile(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientCertFile(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientCertData(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientCertData(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientKeyAlgo(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientKeyAlgo(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientKeyPassphrase(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withClientKeyPassphrase(java.lang.String)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withConnectionTimeout(int)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withConnectionTimeout(int)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withRequestTimeout(int)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withRequestTimeout(int)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: long getRollingTimeout()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: long getRollingTimeout()><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withRollingTimeout(long)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withRollingTimeout(long)><---<io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(io.fabric8.spring.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: void <init>()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: void <init>(io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: void <init>()><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: void <init>(io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: long getTimeout()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.openshift.api.model.DeploymentConfig deployLatest()>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: long getTimeout()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.lang.Object handleRawGet(java.net.URL,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: java.lang.Object doGetLog(java.lang.Class)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.lang.Object handleRawGet(java.net.URL,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: java.lang.Object doGetLog(java.lang.Class)>
<io.fabric8.kubernetes.client.dsl.internal.LogWatchCallback: void <init>(java.io.OutputStream,io.fabric8.kubernetes.client.dsl.internal.OperationContext-SuperClass)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.dsl.internal.LogWatchCallback: void <init>(java.io.OutputStream,io.fabric8.kubernetes.client.dsl.internal.OperationContext-SuperClass)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.dsl.internal.LogWatchCallback: io.fabric8.kubernetes.client.dsl.internal.LogWatchCallback callAndWait(io.fabric8.kubernetes.client.http.HttpClient,java.net.URL)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.dsl.internal.LogWatchCallback: io.fabric8.kubernetes.client.dsl.internal.LogWatchCallback callAndWait(io.fabric8.kubernetes.client.http.HttpClient,java.net.URL)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.LogWatch watchLog(java.io.OutputStream)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withReadyWaitTimeout(java.lang.Integer)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.Loggable withReadyWaitTimeout(java.lang.Integer)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withReadyWaitTimeout(java.lang.Integer)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.Loggable withReadyWaitTimeout(java.lang.Integer)>
<io.fabric8.kubernetes.client.utils.internal.PodOperationUtil: java.util.List getPodOperationsForController(io.fabric8.kubernetes.client.dsl.internal.OperationContext-SuperClass,io.fabric8.kubernetes.client.dsl.internal.PodOperationContext-SuperClass,java.lang.String,java.util.Map)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: void waitUntilDeploymentConfigPodBecomesReady(io.fabric8.openshift.api.model.DeploymentConfig)>
<io.fabric8.kubernetes.client.utils.internal.PodOperationUtil: java.util.List getPodOperationsForController(io.fabric8.kubernetes.client.dsl.internal.OperationContext-SuperClass,io.fabric8.kubernetes.client.dsl.internal.PodOperationContext-SuperClass,java.lang.String,java.util.Map)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: void waitUntilBuildPodBecomesReady(io.fabric8.openshift.api.model.Build)>
<io.fabric8.kubernetes.client.utils.internal.PodOperationUtil: io.fabric8.kubernetes.api.model.Pod waitUntilReadyOrTerminal(io.fabric8.kubernetes.client.dsl.PodResource-InterfaceClass,int)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: void waitForBuildPodToBecomeReady(java.util.List,java.lang.Integer)>
<io.fabric8.kubernetes.client.utils.internal.PodOperationUtil: io.fabric8.kubernetes.api.model.Pod waitUntilReadyOrTerminal(io.fabric8.kubernetes.client.dsl.PodResource-InterfaceClass,int)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: void waitForBuildPodToBecomeReady(java.util.List,java.lang.Integer)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withLimitBytes(java.lang.Integer)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.TimeTailPrettyLoggable limitBytes(int)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withLimitBytes(java.lang.Integer)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.BytesLimitTerminateTimeTailPrettyLoggable limitBytes(int)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withTerminatedStatus(boolean)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.TimeTailPrettyLoggable terminated()>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withTerminatedStatus(boolean)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.TimeTailPrettyLoggable terminated()>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withTailingLines(java.lang.Integer)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.PrettyLoggable tailingLines(int)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withTailingLines(java.lang.Integer)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.PrettyLoggable tailingLines(int)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withSinceTimestamp(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.TailPrettyLoggable sinceTime(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withSinceTimestamp(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.TailPrettyLoggable sinceTime(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withSinceSeconds(java.lang.Integer)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.TailPrettyLoggable sinceSeconds(int)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withSinceSeconds(java.lang.Integer)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.TailPrettyLoggable sinceSeconds(int)>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withTimestamps(boolean)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.BytesLimitTerminateTimeTailPrettyLoggable usingTimestamps()>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withTimestamps(boolean)><---<io.fabric8.openshift.client.dsl.internal.build.BuildOperationsImpl: io.fabric8.kubernetes.client.dsl.BytesLimitTerminateTimeTailPrettyLoggable usingTimestamps()>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withTimeout(long,java.util.concurrent.TimeUnit)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl withTimeout(long,java.util.concurrent.TimeUnit)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withTimeout(long,java.util.concurrent.TimeUnit)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl withTimeout(long,java.util.concurrent.TimeUnit)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.lang.Object handleResponse(io.fabric8.kubernetes.client.http.HttpRequest$Builder,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build instantiate(io.fabric8.openshift.api.model.BuildRequest)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.lang.Object handleResponse(io.fabric8.kubernetes.client.http.HttpRequest$Builder,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.Void trigger(io.fabric8.openshift.api.model.WebHookTrigger)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder uri(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.Void trigger(io.fabric8.openshift.api.model.WebHookTrigger)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder uri(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.dsl.internal.OperationContext getOperationContext()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.dsl.internal.OperationContext getOperationContext()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder timeout(long,java.util.concurrent.TimeUnit)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder timeout(long,java.util.concurrent.TimeUnit)><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.Client getClient()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getRecentEvents()>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.Client getClient()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.client.dsl.TemplateResource load(java.io.InputStream)>
<io.fabric8.kubernetes.client.utils.Utils: java.lang.String interpolateString(java.lang.String,java.util.Map)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList processLocally(java.util.Map)>
<io.fabric8.kubernetes.client.utils.Utils: java.lang.String interpolateString(java.lang.String,java.util.Map)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.api.model.Template processParameters(io.fabric8.openshift.api.model.Template)>
<io.fabric8.kubernetes.client.Client: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.client.dsl.TemplateResource load(java.io.InputStream)>
<io.fabric8.kubernetes.client.Client: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl: void <init>(io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object create(java.lang.Object)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl$NameableCreateOrDeleteableImpl: io.fabric8.openshift.api.model.ImageSignature create(io.fabric8.openshift.api.model.ImageSignature)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object create(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesIngresses: io.fabric8.kubernetes.api.model.extensions.Ingress create(io.fabric8.kubernetes.api.model.extensions.Ingress)>
<io.fabric8.kubernetes.client.impl.KubernetesClientImpl: void <init>(io.fabric8.kubernetes.client.impl.BaseClient-SuperClass)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl: void <init>(io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.impl.KubernetesClientImpl: void <init>(io.fabric8.kubernetes.client.impl.BaseClient-SuperClass)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl: void <init>(io.fabric8.openshift.client.impl.OpenShiftClientImpl)>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftClusterAutoscalingAPIGroupClient: io.fabric8.openshift.client.dsl.V1ClusterAutoscalingAPIGroupDSL v1()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.Client adapt(java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftClusterAutoscalingAPIGroupClient: io.fabric8.openshift.client.dsl.V1beta1ClusterAutoscalingAPIGroupDSL v1beta1()>
<io.fabric8.kubernetes.client.http.HttpResponse: java.util.Optional previousResponse()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.lang.String lambda$authorize$3(io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: java.util.Optional previousResponse()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.lang.String lambda$authorize$3(io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: java.util.List headers(java.lang.String)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.lang.String lambda$authorize$3(io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: java.util.List headers(java.lang.String)><---<org.eclipse.jkube.kit.common.util.IoUtil: void lambda$download$0(java.io.File,org.eclipse.jkube.kit.common.KitLogger,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: java.lang.String message()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.lang.String lambda$authorize$3(io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: java.lang.String message()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.KubernetesClientException: void <init>(java.lang.String)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.lang.String lambda$authorize$3(io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.KubernetesClientException: void <init>(java.lang.String)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: boolean isSuccessful()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpResponse: boolean isSuccessful()><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object watch(java.lang.Object)><---<io.fabric8.spring.cloud.kubernetes.reload.EventBasedConfigurationChangeDetector: void watch()>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object watch(java.lang.Object)><---<io.fabric8.spring.cloud.kubernetes.reload.EventBasedConfigurationChangeDetector: void watch()>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object withPropagationPolicy(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: java.util.concurrent.CompletableFuture deleteAsyncStoragePod(io.fabric8.kubernetes.client.dsl.PodResource)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object withPropagationPolicy(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeletePod(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object getLog()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void handleStartingPodStatus(java.util.concurrent.CompletableFuture,io.fabric8.kubernetes.api.model.Pod)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object getLog()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.lang.String getPodLogs(java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation events()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void watchEvents(org.eclipse.che.workspace.infrastructure.kubernetes.namespace.event.PodEventHandler)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.MixedOperation events()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.client.Watch pvcIsWaitingForConsumerWatcher(java.util.concurrent.CompletableFuture,io.fabric8.kubernetes.api.model.PersistentVolumeClaim)>
<io.fabric8.kubernetes.client.dsl.TtyExecErrorChannelable: java.lang.Object usingListener(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[],java.util.function.BiConsumer)>
<io.fabric8.kubernetes.client.dsl.TtyExecErrorChannelable: java.lang.Object usingListener(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[])>
<io.fabric8.kubernetes.client.dsl.Execable: java.lang.Object exec(java.lang.Object[])><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[],java.util.function.BiConsumer)>
<io.fabric8.kubernetes.client.dsl.Execable: java.lang.Object exec(java.lang.Object[])><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[])>
<io.fabric8.kubernetes.client.VersionInfo: java.lang.String getMajor()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.K8sVersion: void parseVersions()>
<io.fabric8.kubernetes.client.VersionInfo: java.lang.String getMajor()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.K8sVersion: void parseVersions()>
<io.fabric8.kubernetes.client.VersionInfo: java.lang.String getMinor()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.K8sVersion: void parseVersions()>
<io.fabric8.kubernetes.client.VersionInfo: java.lang.String getMinor()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.K8sVersion: void parseVersions()>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabelSelector(io.fabric8.kubernetes.api.model.LabelSelector)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesSecrets: java.util.List get(io.fabric8.kubernetes.api.model.LabelSelector)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withLabelSelector(io.fabric8.kubernetes.api.model.LabelSelector)><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getNewestApplicationPodName(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.Collection)>
<io.fabric8.kubernetes.client.Config: java.lang.String getAutoOAuthToken()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getAutoOAuthToken()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.api.model.AuthProviderConfig getAuthProvider()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.api.model.AuthProviderConfig getAuthProvider()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.api.model.NamedAuthInfo createKubeConfigUserFromClient(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.client.Config fromKubeconfig(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.KubernetesClient lambda$getClient$0(org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext,java.lang.String)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.client.Config fromKubeconfig(java.lang.String)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void buildClient(java.lang.String)>
<io.fabric8.kubernetes.client.WithRequestCallable: void <init>(io.fabric8.kubernetes.client.Client-InterfaceClass,io.fabric8.kubernetes.client.RequestConfig)><---<io.fabric8.knative.client.DefaultKnativeClient: io.fabric8.kubernetes.client.dsl.FunctionCallable withRequestConfig(io.fabric8.kubernetes.client.RequestConfig)>
<io.fabric8.kubernetes.client.WithRequestCallable: void <init>(io.fabric8.kubernetes.client.Client-InterfaceClass,io.fabric8.kubernetes.client.RequestConfig)><---<io.fabric8.knative.client.serving.v1.DefaultServingV1Client: io.fabric8.kubernetes.client.dsl.FunctionCallable withRequestConfig(io.fabric8.kubernetes.client.RequestConfig)>
<io.fabric8.kubernetes.client.dsl.ExtensionsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation daemonSets()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.AppsAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation statefulSets()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.VisitFromServerGetWatchDeleteRecreateWaitApplicable: java.lang.Object createOrReplace()><---<io.fabric8.kubernetes.api.Controller: void applyEntity(java.lang.Object,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object create(java.lang.Object[])><---<io.fabric8.kubernetes.api.Controller: void applyImageStream(io.fabric8.openshift.api.model.ImageStream,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.VisitFromServerGetWatchDeleteRecreateWaitApplicable: java.lang.Object apply()><---<io.fabric8.kubernetes.api.Controller: void applyImageStream(io.fabric8.openshift.api.model.ImageStream,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object rolling()><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.TimeoutImageEditReplacePatchable: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object delete()><---<io.fabric8.kubernetes.api.Controller: void applyReplicationController(io.fabric8.kubernetes.api.model.ReplicationController,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object replace(java.lang.Object)><---<io.fabric8.kubernetes.api.Controller: void applyPod(io.fabric8.kubernetes.api.model.Pod,java.lang.String)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NonNamespaceOperation nodes()><---<io.fabric8.kubernetes.api.KubernetesHelper: java.lang.String getServiceURL(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<io.fabric8.kubernetes.client.utils.Utils: java.lang.String convertSystemPropertyNameToEnvVar(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: boolean isServiceSsl(java.lang.String,int,boolean)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.api.model.RootPaths rootPaths()><---<io.fabric8.kubernetes.api.KubernetesHelper: boolean isOpenShift(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.Config: void setMasterUrl(java.lang.String)><---<io.fabric8.kubernetes.api.KubernetesHelper: io.fabric8.kubernetes.client.Config createJenkinshiftConfig(java.lang.String)>
<io.fabric8.kubernetes.client.internal.SSLUtils: javax.net.ssl.SSLContext sslContext(io.fabric8.kubernetes.client.Config)><---<io.fabric8.kubernetes.jolokia.JolokiaClients: org.jolokia.client.J4pClient createJolokiaClient(io.fabric8.kubernetes.api.model.Container,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PodResource: java.lang.Object getLog(java.lang.Boolean)><---<io.fabric8.kubernetes.assertions.PodsAssert: io.fabric8.kubernetes.assertions.PodLogsAssert logs(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ContainerResource: java.lang.Object watchLog(java.io.OutputStream)><---<io.fabric8.kubernetes.assertions.support.PodLogWatcher: void <init>(io.fabric8.kubernetes.assertions.support.PodWatcher,java.lang.String,io.fabric8.kubernetes.api.model.Pod,java.lang.String,java.io.File)>
<io.fabric8.kubernetes.client.dsl.ContainerResource: java.lang.Object getLog()><---<io.fabric8.arquillian.kubernetes.await.SessionPodsAreReady: java.lang.Boolean call()>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object edit()><---<io.fabric8.arquillian.utils.ConfigMaps: io.fabric8.kubernetes.api.model.ConfigMap updateConfigMapTestStatus(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.VisitFromServerGetWatchDeleteRecreateWaitApplicable: java.lang.Object cascading(boolean)><---<io.fabric8.arquillian.utils.Util: void cleanupItem(io.fabric8.kubernetes.client.KubernetesClient,io.fabric8.arquillian.kubernetes.Session,io.fabric8.kubernetes.api.model.HasMetadata,java.util.List)>
<io.fabric8.kubernetes.client.Config: java.lang.String getHttpProxy()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withHttpProxy(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getHttpsProxy()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withHttpsProxy(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getProxyUsername()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withProxyUsername(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String getProxyPassword()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withProxyPassword(java.lang.String)><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.Config: java.lang.String[] getNoProxy()><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.ConfigFluent withNoProxy(java.lang.String[])><---<org.springframework.cloud.kubernetes.KubernetesAutoConfiguration: io.fabric8.kubernetes.client.Config kubernetesClientConfig(org.springframework.cloud.kubernetes.KubernetesClientProperties)>
<io.fabric8.kubernetes.client.dsl.internal.extensions.v1beta1.LegacyRollableScalableResourceOperation: io.fabric8.kubernetes.api.model.autoscaling.v1.Scale scale(io.fabric8.kubernetes.api.model.autoscaling.v1.Scale,io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperation-SuperClass)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.api.model.autoscaling.v1.Scale scale(io.fabric8.kubernetes.api.model.autoscaling.v1.Scale)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: io.fabric8.kubernetes.client.RequestConfig getRequestConfig()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.openshift.api.model.DeploymentConfig deployLatest(boolean)>
<io.fabric8.kubernetes.client.RequestConfig: java.lang.Long getScaleTimeout()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.openshift.api.model.DeploymentConfig deployLatest(boolean)>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperation: io.fabric8.kubernetes.api.model.HasMetadata accept(java.util.function.Consumer)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.openshift.api.model.DeploymentConfig deployLatest()>
<io.fabric8.kubernetes.client.dsl.internal.HasMetadataOperation: void waitUntilScaled(int)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.openshift.api.model.DeploymentConfig deployLatest()>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: boolean isPrettyOutput()><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: java.lang.String getLog()>
<io.fabric8.kubernetes.client.dsl.internal.PodOperationContext: io.fabric8.kubernetes.client.dsl.internal.PodOperationContext withContainerId(java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.apps.DeploymentConfigOperationsImpl: io.fabric8.kubernetes.client.dsl.Loggable inContainer(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.api.model.HasMetadata handleCreate(io.fabric8.kubernetes.api.model.HasMetadata)><---<io.fabric8.openshift.client.dsl.internal.authorization.RoleBindingOperationsImpl: io.fabric8.openshift.api.model.RoleBinding handleCreate(io.fabric8.openshift.api.model.RoleBinding)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: void updateApiVersion(io.fabric8.kubernetes.api.model.HasMetadata)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build instantiate(io.fabric8.openshift.api.model.BuildRequest)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder header(java.lang.String,java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.Void trigger(io.fabric8.openshift.api.model.WebHookTrigger)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder post(java.lang.String,java.io.InputStream,long)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder expectContinue()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: java.util.concurrent.TimeUnit getTimeoutUnit()><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.util.concurrent.CompletableFuture handleResponse(io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpRequest$Builder,com.fasterxml.jackson.core.type.TypeReference)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.lang.Object waitForResult(java.util.concurrent.CompletableFuture)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.KubernetesClientException: void <init>(java.lang.String,java.lang.Throwable)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: io.fabric8.openshift.api.model.Build submitToApiServer(java.io.InputStream,long)>
<io.fabric8.kubernetes.client.Client: io.fabric8.kubernetes.client.dsl.MixedOperation resources(java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getRecentEvents()>
<io.fabric8.kubernetes.client.utils.KubernetesResourceUtil: void sortEventListBasedOnTimestamp(java.util.List)><---<io.fabric8.openshift.client.dsl.internal.build.BuildConfigOperationsImpl: java.lang.String getRecentEvents()>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.api.model.HasMetadata handleResponse(io.fabric8.kubernetes.client.http.HttpRequest$Builder)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.kubernetes.api.model.KubernetesList process(java.util.Map)>
<io.fabric8.kubernetes.client.dsl.internal.OperationSupport: java.net.URL getNamespacedUrl(java.lang.String,java.lang.String)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: java.net.URL getProcessUrl()>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.NamespaceListVisitFromServerGetDeleteRecreateWaitApplicable load(java.io.InputStream)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.client.dsl.TemplateResource load(java.io.InputStream)>
<io.fabric8.kubernetes.client.dsl.NamespaceListVisitFromServerGetDeleteRecreateWaitApplicable: java.util.List items()><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.client.dsl.TemplateResource load(java.io.InputStream)>
<io.fabric8.kubernetes.client.utils.Utils: java.lang.String randomString(int)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.client.dsl.TemplateResource load(java.io.InputStream)>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.client.dsl.Resource resource(io.fabric8.kubernetes.api.model.HasMetadata)><---<io.fabric8.openshift.client.dsl.internal.core.TemplateOperationsImpl: io.fabric8.openshift.client.dsl.TemplateResource load(java.io.InputStream)>
<io.fabric8.kubernetes.client.dsl.internal.CreateOnlyResourceOperation: java.lang.Object create(java.lang.Object)><---<io.fabric8.openshift.client.dsl.internal.project.ProjectOperationsImpl: java.util.List createProjectAndRoleBindings(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.internal.OperationContext: io.fabric8.kubernetes.client.dsl.internal.OperationContext withItem(java.lang.Object)><---<io.fabric8.openshift.client.dsl.internal.project.ProjectOperationsImpl: java.util.List createProjectAndRoleBindings(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.internal.NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl: void <init>(io.fabric8.kubernetes.client.dsl.internal.OperationContext-SuperClass)><---<io.fabric8.openshift.client.dsl.internal.project.ProjectOperationsImpl: java.util.List createProjectAndRoleBindings(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.internal.NamespaceVisitFromServerGetWatchDeleteRecreateWaitApplicableListImpl: java.util.List createOrReplace()><---<io.fabric8.openshift.client.dsl.internal.project.ProjectOperationsImpl: java.util.List createProjectAndRoleBindings(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: java.util.List delete()><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl$NameableCreateOrDeleteableImpl: java.util.List delete()>
<io.fabric8.kubernetes.client.dsl.internal.BaseOperation: io.fabric8.kubernetes.client.dsl.Resource withName(java.lang.String)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl$NameableCreateOrDeleteableImpl: io.fabric8.kubernetes.client.dsl.CreateOrDeleteable withName(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.Resource: io.fabric8.kubernetes.client.dsl.Deletable withTimeout(long,java.util.concurrent.TimeUnit)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl$NameableCreateOrDeleteableImpl: io.fabric8.kubernetes.client.dsl.Deletable withTimeout(long,java.util.concurrent.TimeUnit)>
<io.fabric8.kubernetes.client.dsl.Resource: io.fabric8.kubernetes.client.dsl.Deletable withTimeoutInMillis(long)><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl$NameableCreateOrDeleteableImpl: io.fabric8.kubernetes.client.dsl.Deletable withTimeoutInMillis(long)>
<io.fabric8.kubernetes.client.impl.BaseClient: io.fabric8.kubernetes.client.Config getConfiguration()><---<io.fabric8.openshift.client.impl.OpenShiftClientImpl: io.fabric8.openshift.client.OpenShiftConfig getConfiguration()>
<io.fabric8.kubernetes.client.dsl.base.ResourceDefinitionContext: io.fabric8.kubernetes.client.dsl.base.ResourceDefinitionContext fromResourceType(java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHandlers: io.fabric8.kubernetes.client.dsl.internal.CreateOnlyResourceOperationsImpl getCreateOnlyResourceOperation(java.lang.Class,java.lang.Class,io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.dsl.internal.CreateOnlyResourceOperationsImpl: void <init>(io.fabric8.kubernetes.client.Client-InterfaceClass,io.fabric8.kubernetes.client.dsl.base.ResourceDefinitionContext,java.lang.Class,java.lang.Class)><---<io.fabric8.openshift.client.impl.OpenShiftHandlers: io.fabric8.kubernetes.client.dsl.internal.CreateOnlyResourceOperationsImpl getCreateOnlyResourceOperation(java.lang.Class,java.lang.Class,io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.utils.internal.URLFromServiceUtil: io.fabric8.kubernetes.api.model.ServicePort getServicePortByName(io.fabric8.kubernetes.api.model.Service,java.lang.String)><---<io.fabric8.openshift.client.impl.URLFromOpenshiftRouteImpl: java.lang.String getURL(io.fabric8.kubernetes.api.model.Service,java.lang.String,java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.ServiceToURLProvider$ServiceToUrlImplPriority: int getValue()><---<io.fabric8.openshift.client.impl.URLFromOpenshiftRouteImpl: int getPriority()>
<io.fabric8.kubernetes.client.utils.TokenRefreshInterceptor: void <init>(io.fabric8.kubernetes.client.Config,java.time.Instant,java.util.function.Function)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: void <init>(io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.utils.TokenRefreshInterceptor: boolean isBasicAuth()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: boolean useRemoteRefresh(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.http.HttpClient: io.fabric8.kubernetes.client.http.HttpClient$DerivedClientBuilder newBuilder()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletableFuture authorize(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient)>
<io.fabric8.kubernetes.client.http.HttpClient$DerivedClientBuilder: io.fabric8.kubernetes.client.http.HttpClient$DerivedClientBuilder addOrReplaceInterceptor(java.lang.String,io.fabric8.kubernetes.client.http.Interceptor)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletableFuture authorize(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient)>
<io.fabric8.kubernetes.client.http.HttpClient$DerivedClientBuilder: io.fabric8.kubernetes.client.http.HttpClient build()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletableFuture authorize(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient)>
<io.fabric8.kubernetes.client.http.HttpResponse: io.fabric8.kubernetes.client.http.HttpRequest request()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: boolean shouldFail(io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpRequest: java.net.URI uri()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: boolean shouldFail(io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpRequest: java.lang.String method()><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: boolean shouldFail(io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.utils.OpenIDConnectionUtils: io.fabric8.kubernetes.client.utils.OpenIDConnectionUtils$OAuthToken persistOAuthToken(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.utils.OpenIDConnectionUtils$OAuthToken,java.lang.String)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.lang.String persistNewOAuthTokenIntoKubeConfig(io.fabric8.kubernetes.client.Config,java.lang.String)>
<io.fabric8.kubernetes.client.utils.Serialization: java.lang.Object unmarshal(java.lang.String,java.lang.Class)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.utils.HttpClientUtils: java.lang.String basicCredentials(java.lang.String,java.lang.String)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.http.HttpRequest$Builder: io.fabric8.kubernetes.client.http.HttpRequest$Builder setHeader(java.lang.String,java.lang.String)><---<io.fabric8.openshift.client.internal.OpenShiftOAuthInterceptor: java.util.concurrent.CompletionStage lambda$authorize$2(io.fabric8.kubernetes.client.Config,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpClient,io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.ParameterNamespaceListVisitFromServerGetDeleteRecreateWaitApplicable load(java.io.InputStream)><---<org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesRecipeParser: java.util.List parse(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ParameterNamespaceListVisitFromServerGetDeleteRecreateWaitApplicable: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.environment.KubernetesRecipeParser: java.util.List parse(java.lang.String)>
<io.fabric8.kubernetes.client.utils.Serialization: java.lang.String asYaml(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.devfile.KubernetesEnvironmentProvisioner: java.lang.String asYaml(java.util.List)>
<io.fabric8.kubernetes.client.DefaultKubernetesClient: void <init>(okhttp3.OkHttpClient,io.fabric8.kubernetes.client.Config)><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory$UnclosableKubernetesClient: void <init>(okhttp3.OkHttpClient,io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: java.util.concurrent.CompletableFuture deleteAsyncStorageDeployment(io.fabric8.kubernetes.client.dsl.RollableScalableResource)>
<io.fabric8.kubernetes.client.dsl.RollableScalableResource: java.lang.Object withPropagationPolicy(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.provision.AsyncStoragePodInterceptor: java.util.concurrent.CompletableFuture deleteAsyncStorageDeployment(io.fabric8.kubernetes.client.dsl.RollableScalableResource)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void watchEvents(org.eclipse.che.workspace.infrastructure.kubernetes.namespace.event.PodEventHandler)>
<io.fabric8.kubernetes.client.dsl.ContainerResource: java.lang.Object writingError(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[],java.util.function.BiConsumer)>
<io.fabric8.kubernetes.client.dsl.ContainerResource: java.lang.Object redirectingError()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void exec(java.lang.String,java.lang.String,int,java.lang.String[])>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object withoutLabel(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: void delete()>
<io.fabric8.kubernetes.client.dsl.ScalableResource: java.lang.Object get()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ScalableResource: java.lang.Object watch(java.lang.Object)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ScalableResource: java.lang.Object withPropagationPolicy(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesDeployments: java.util.concurrent.CompletableFuture doDeleteDeployment(java.lang.String)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object withField(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.client.Watch pvcIsWaitingForConsumerWatcher(java.util.concurrent.CompletableFuture,io.fabric8.kubernetes.api.model.PersistentVolumeClaim)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object withField(java.lang.String,java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesPersistentVolumeClaims: io.fabric8.kubernetes.client.Watch pvcIsWaitingForConsumerWatcher(java.util.concurrent.CompletableFuture,io.fabric8.kubernetes.api.model.PersistentVolumeClaim)>
<io.fabric8.kubernetes.client.utils.HttpClientUtils: okhttp3.OkHttpClient createHttpClient(io.fabric8.kubernetes.client.Config)><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: void <init>(java.lang.String,java.lang.Boolean,int,int,int,int,okhttp3.EventListener)>
<io.fabric8.kubernetes.client.utils.Utils: boolean shutdownExecutorService(java.util.concurrent.ExecutorService)><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: void shutdownClient()>
<io.fabric8.kubernetes.client.utils.ImpersonatorInterceptor: void <init>(io.fabric8.kubernetes.client.Config)><---<org.eclipse.che.workspace.infrastructure.kubernetes.KubernetesClientFactory: io.fabric8.kubernetes.client.KubernetesClient create(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.dsl.RbacAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation roleBindings()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesWorkspaceServiceAccount: io.fabric8.kubernetes.client.dsl.MixedOperation lambda$new$1(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.RbacAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation roles()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesWorkspaceServiceAccount: io.fabric8.kubernetes.client.dsl.MixedOperation lambda$new$0(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.ContainerResource: java.lang.Object watchLog()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.log.ContainerLogWatch: void run()>
<io.fabric8.kubernetes.client.dsl.Resource: java.lang.Object withPropagationPolicy(java.lang.String)><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.KubernetesNamespace: void delete(java.lang.String,io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.VersionInfo getVersion()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.K8sVersion: void initVersionInfo()>
<io.fabric8.kubernetes.client.VersionInfo: java.util.Map getData()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.K8sVersion: void initVersionInfo()>
<io.fabric8.kubernetes.client.dsl.RbacAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation clusterRoles()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createExplicitClusterRoleBindings(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.dsl.NonNamespaceOperation: java.lang.Object createOrReplaceWithNew()><---<org.eclipse.che.workspace.infrastructure.kubernetes.namespace.AbstractWorkspaceServiceAccount: void createWorkspaceServiceAccount(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withUsername(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withPassword(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withMasterUrl(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withApiVersion(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withCaCertData(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withCaCertFile(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withClientCertData(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withClientCertFile(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withClientKeyAlgo(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withClientKeyData(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withClientKeyFile(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withClientKeyPassphrase(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withKeyStoreFile(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withKeyStorePassphrase(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withNamespace(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withTrustStoreFile(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withTrustStorePassphrase(java.lang.String)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withTrustCerts(java.lang.Boolean)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.ConfigBuilder: io.fabric8.kubernetes.client.SundrioConfigFluent withCurrentContext(io.fabric8.kubernetes.api.model.NamedContext)><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: io.fabric8.kubernetes.client.Config getConfig()>
<io.fabric8.kubernetes.client.Config: java.lang.String getTrustStoreFile()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getTrustStorePassphrase()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getKeyStoreFile()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.Config: java.lang.String getKeyStorePassphrase()><---<org.eclipse.jkube.kit.common.access.ClusterConfiguration: org.eclipse.jkube.kit.common.access.ClusterConfiguration$ClusterConfigurationBuilder 'from'(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.http.HttpResponse: java.lang.String header(java.lang.String)><---<org.eclipse.jkube.kit.common.util.Fabric8HttpUtil: java.util.List extractAuthenticationChallengeIntoMap(io.fabric8.kubernetes.client.http.HttpResponse)>
<io.fabric8.kubernetes.client.utils.HttpClientUtils: io.fabric8.kubernetes.client.http.HttpClient$Factory getHttpClientFactory()><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.Config: io.fabric8.kubernetes.client.Config empty()><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.http.HttpClient$Factory: io.fabric8.kubernetes.client.http.HttpClient$Builder newBuilder(io.fabric8.kubernetes.client.Config)><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.http.HttpClient$Builder: io.fabric8.kubernetes.client.http.HttpClient build()><---<org.eclipse.jkube.kit.common.util.IoUtil: void download(java.net.URL,org.eclipse.jkube.kit.common.util.IoUtil$HttpResponseConsumer)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object withLabels(java.util.Map)><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable withSelector(io.fabric8.kubernetes.client.dsl.NonNamespaceOperation,io.fabric8.kubernetes.api.model.LabelSelector,org.eclipse.jkube.kit.common.KitLogger)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object withLabelIn(java.lang.String,java.lang.String[])><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable withSelector(io.fabric8.kubernetes.client.dsl.NonNamespaceOperation,io.fabric8.kubernetes.api.model.LabelSelector,org.eclipse.jkube.kit.common.KitLogger)>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.lang.Object withLabelNotIn(java.lang.String,java.lang.String[])><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable withSelector(io.fabric8.kubernetes.client.dsl.NonNamespaceOperation,io.fabric8.kubernetes.api.model.LabelSelector,org.eclipse.jkube.kit.common.KitLogger)>
<io.fabric8.kubernetes.client.utils.ApiVersionUtil: java.lang.String trimGroup(java.lang.String)><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getFullyQualifiedApiGroupWithKind(io.fabric8.kubernetes.api.model.HasMetadata)>
<io.fabric8.kubernetes.client.utils.ApiVersionUtil: java.lang.String trimVersion(java.lang.String)><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getFullyQualifiedApiGroupWithKind(io.fabric8.kubernetes.api.model.HasMetadata)>
<io.fabric8.kubernetes.client.utils.ApiVersionUtil: java.lang.String joinApiGroupAndVersion(java.lang.String,java.lang.String)><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getFullyQualifiedApiGroupWithKind(io.fabric8.kubernetes.api.model.HasMetadata)>
<io.fabric8.kubernetes.client.dsl.MixedOperation: java.lang.Object withLabelSelector(io.fabric8.kubernetes.api.model.LabelSelector)><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.lang.String getNewestApplicationPodName(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.util.Collection)>
<io.fabric8.kubernetes.client.KubernetesClient: io.fabric8.kubernetes.client.dsl.AuthorizationAPIGroupDSL authorization()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: boolean hasAccessForAction(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.AuthorizationAPIGroupDSL: io.fabric8.kubernetes.client.V1AuthorizationAPIGroupDSL v1()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: boolean hasAccessForAction(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.V1AuthorizationAPIGroupDSL: io.fabric8.kubernetes.client.dsl.InOutCreateable selfSubjectAccessReview()><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: boolean hasAccessForAction(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.InOutCreateable: java.lang.Object create(java.lang.Object)><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: boolean hasAccessForAction(io.fabric8.kubernetes.client.KubernetesClient,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.internal.KubeConfigUtils: void persistKubeConfigIntoFile(io.fabric8.kubernetes.api.model.Config,java.lang.String)><---<org.eclipse.jkube.kit.common.util.KubernetesHelper: java.nio.file.Path exportKubernetesClientConfigToFile(io.fabric8.kubernetes.client.Config,java.nio.file.Path)>
<io.fabric8.kubernetes.client.KubernetesClient: boolean hasApiGroup(java.lang.String,boolean)><---<org.eclipse.jkube.kit.common.util.OpenshiftHelper: boolean isOpenShift(io.fabric8.kubernetes.client.KubernetesClient)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.Object unmarshal(java.io.InputStream,java.lang.Class)><---<org.eclipse.jkube.kit.common.util.Serialization: java.lang.Object unmarshal(java.io.InputStream,java.lang.Class)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: java.lang.String asYaml(java.lang.Object)><---<org.eclipse.jkube.kit.common.util.Serialization: java.lang.String asYaml(java.lang.Object)>
<io.fabric8.kubernetes.client.utils.KubernetesSerialization: void <init>(com.fasterxml.jackson.databind.ObjectMapper,boolean)><---<org.eclipse.jkube.kit.common.util.Serialization: void <clinit>()>
<io.fabric8.kubernetes.client.dsl.FilterWatchListDeletable: java.util.List delete()><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: boolean killApplication(org.apache.dolphinscheduler.plugin.task.api.am.ApplicationManagerContext)>
<io.fabric8.kubernetes.client.dsl.ContainerResource: io.fabric8.kubernetes.client.dsl.LogWatch watchLog()><---<org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager: io.fabric8.kubernetes.client.dsl.LogWatch getPodLogWatcher(org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext)>
<io.fabric8.kubernetes.client.WatcherException: java.lang.String getMessage()><---<org.apache.dolphinscheduler.plugin.task.api.k8s.impl.K8sTaskExecutor$1: void onClose(io.fabric8.kubernetes.client.WatcherException)>
<io.fabric8.kubernetes.client.dsl.ScalableResource: java.util.List delete()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: void deleteJob(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.BatchAPIGroupDSL: io.fabric8.kubernetes.client.dsl.MixedOperation jobs()><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.Boolean jobExist(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.ScalableResource: io.fabric8.kubernetes.client.Watch watch(io.fabric8.kubernetes.client.Watcher-InterfaceClass)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: io.fabric8.kubernetes.client.Watch createBatchJobWatcher(java.lang.String,io.fabric8.kubernetes.client.Watcher)>
<io.fabric8.kubernetes.client.dsl.PodResource: io.fabric8.kubernetes.client.dsl.PrettyLoggable tailingLines(int)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.String getPodLog(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.dsl.PrettyLoggable: java.lang.String getLog(boolean)><---<org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils: java.lang.String getPodLog(java.lang.String,java.lang.String)>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: void <init>()><---<io.fabric8.knative.client.DefaultKnativeClient: void <init>()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: void <init>(io.fabric8.kubernetes.client.Config)><---<io.fabric8.knative.client.DefaultKnativeClient: void <init>(io.fabric8.kubernetes.client.Config)>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: void <init>(io.fabric8.kubernetes.client.Client-InterfaceClass)><---<io.fabric8.knative.client.DefaultKnativeClient: void <init>(io.fabric8.kubernetes.client.Client)>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: boolean hasApiGroup(java.lang.String,boolean)><---<io.fabric8.knative.client.DefaultKnativeClient: boolean isSupported()>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.extension.ClientAdapter inNamespace(java.lang.String)><---<io.fabric8.knative.client.DefaultKnativeClient: java.lang.Object inNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.extension.ExtensionRootClientAdapter: io.fabric8.kubernetes.client.extension.ClientAdapter inAnyNamespace()><---<io.fabric8.knative.client.DefaultKnativeClient: java.lang.Object inAnyNamespace()>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.extension.ClientAdapter inNamespace(java.lang.String)><---<io.fabric8.knative.client.serving.v1.DefaultServingV1Client: java.lang.Object inNamespace(java.lang.String)>
<io.fabric8.kubernetes.client.extension.ClientAdapter: io.fabric8.kubernetes.client.extension.ClientAdapter inAnyNamespace()><---<io.fabric8.knative.client.serving.v1.DefaultServingV1Client: java.lang.Object inAnyNamespace()>
