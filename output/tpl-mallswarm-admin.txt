<com.macro.mall.config.OssConfig: com.aliyun.oss.OSSClient ossClient()>---><com.aliyun.oss.OSSClient: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<com.macro.mall.config.SaTokenConfigure: cn.dev33.satoken.stp.StpLogic getStpLogicJwt()>---><cn.dev33.satoken.jwt.StpLogicJwtForSimple: void <init>()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.MinioClient: io.minio.MinioClient$Builder builder()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.MinioClient$Builder: io.minio.MinioClient build()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.BucketExistsArgs: io.minio.BucketExistsArgs$Builder builder()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.BucketExistsArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.BucketExistsArgs$Builder: io.minio.BaseArgs build()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.MinioClient: boolean bucketExists(io.minio.BucketExistsArgs)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><org.slf4j.Logger: void info(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.MakeBucketArgs: io.minio.MakeBucketArgs$Builder builder()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.MakeBucketArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.MakeBucketArgs$Builder: io.minio.BaseArgs build()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.MinioClient: void makeBucket(io.minio.MakeBucketArgs)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.SetBucketPolicyArgs: io.minio.SetBucketPolicyArgs$Builder builder()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.SetBucketPolicyArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><cn.hutool.json.JSONUtil: java.lang.String toJsonStr(java.lang.Object)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.SetBucketPolicyArgs$Builder: io.minio.SetBucketPolicyArgs$Builder config(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.SetBucketPolicyArgs$Builder: io.minio.BaseArgs build()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.MinioClient: void setBucketPolicy(io.minio.SetBucketPolicyArgs)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.PutObjectArgs: io.minio.PutObjectArgs$Builder builder()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.PutObjectArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.PutObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder contentType(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.PutObjectArgs$Builder: io.minio.PutObjectArgs$Builder stream(java.io.InputStream,long,long)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.PutObjectArgs$Builder: io.minio.BaseArgs build()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><io.minio.MinioClient: io.minio.ObjectWriteResponse putObject(io.minio.PutObjectArgs)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><org.slf4j.Logger: void info(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult upload(org.springframework.web.multipart.MultipartFile)>---><org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>
<com.macro.mall.controller.MinioController: com.macro.mall.dto.BucketPolicyConfigDto createBucketPolicyConfigDto(java.lang.String)>---><cn.hutool.core.collection.CollUtil: java.util.ArrayList toList(java.lang.Object[])>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult delete(java.lang.String)>---><io.minio.MinioClient: io.minio.MinioClient$Builder builder()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult delete(java.lang.String)>---><io.minio.MinioClient$Builder: io.minio.MinioClient$Builder endpoint(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult delete(java.lang.String)>---><io.minio.MinioClient$Builder: io.minio.MinioClient$Builder credentials(java.lang.String,java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult delete(java.lang.String)>---><io.minio.MinioClient$Builder: io.minio.MinioClient build()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult delete(java.lang.String)>---><io.minio.RemoveObjectArgs: io.minio.RemoveObjectArgs$Builder builder()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult delete(java.lang.String)>---><io.minio.RemoveObjectArgs$Builder: io.minio.BucketArgs$Builder bucket(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult delete(java.lang.String)>---><io.minio.RemoveObjectArgs$Builder: io.minio.ObjectArgs$Builder object(java.lang.String)>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult delete(java.lang.String)>---><io.minio.RemoveObjectArgs$Builder: io.minio.BaseArgs build()>
<com.macro.mall.controller.MinioController: com.macro.mall.common.api.CommonResult delete(java.lang.String)>---><io.minio.MinioClient: void removeObject(io.minio.RemoveObjectArgs)>
<com.macro.mall.controller.MinioController: void <clinit>()>---><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.macro.mall.controller.UmsAdminController: com.macro.mall.common.api.CommonResult login(com.macro.mall.dto.UmsAdminLoginParam)>---><cn.dev33.satoken.stp.SaTokenInfo: java.lang.String getTokenValue()>
<com.macro.mall.controller.UmsAdminController: com.macro.mall.common.api.CommonResult getAdminInfo()>---><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<com.macro.mall.service.impl.CmsSubjectServiceImpl: java.util.List list(java.lang.String,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.PmsProductCategoryServiceImpl: int create(com.macro.mall.dto.PmsProductCategoryParam)>---><org.apache.commons.collections.CollectionUtils: boolean isEmpty(java.util.Collection)>
<com.macro.mall.service.impl.PmsProductCategoryServiceImpl: int update(java.lang.Long,com.macro.mall.dto.PmsProductCategoryParam)>---><org.apache.commons.collections.CollectionUtils: boolean isEmpty(java.util.Collection)>
<com.macro.mall.service.impl.PmsProductCategoryServiceImpl: java.util.List getList(java.lang.Long,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.OmsOrderReturnReasonServiceImpl: java.util.List list(java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.UmsRoleServiceImpl: java.util.List list(java.lang.String,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.SmsFlashPromotionProductRelationServiceImpl: java.util.List list(java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.SmsHomeRecommendProductServiceImpl: java.util.List list(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.SmsHomeAdvertiseServiceImpl: java.util.List list(java.lang.String,java.lang.Integer,java.lang.String,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.SmsFlashPromotionServiceImpl: java.util.List list(java.lang.String,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.OmsOrderServiceImpl: java.util.List list(com.macro.mall.dto.OmsOrderQueryParam,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.PmsBrandServiceImpl: java.util.List listBrand(java.lang.String,int,int)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.SmsHomeBrandServiceImpl: java.util.List list(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.SmsCouponHistoryServiceImpl: java.util.List list(java.lang.Long,java.lang.Integer,java.lang.String,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><com.aliyun.oss.model.PolicyConditions: void <init>()>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><com.aliyun.oss.model.PolicyConditions: void addConditionItem(java.lang.String,long,long)>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><com.aliyun.oss.model.PolicyConditions: void addConditionItem(com.aliyun.oss.model.MatchMode,java.lang.String,java.lang.String)>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><com.aliyun.oss.OSSClient: java.lang.String generatePostPolicy(java.util.Date,com.aliyun.oss.model.PolicyConditions)>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><com.aliyun.oss.common.utils.BinaryUtil: java.lang.String toBase64String(byte[])>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><com.aliyun.oss.OSSClient: java.lang.String calculatePostSignature(java.lang.String)>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><cn.hutool.json.JSONUtil: cn.hutool.json.JSON parse(java.lang.Object)>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><com.aliyun.oss.common.utils.BinaryUtil: java.lang.String toBase64String(byte[])>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><com.aliyun.oss.OSSClient: com.aliyun.oss.common.auth.CredentialsProvider getCredentialsProvider()>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><com.aliyun.oss.common.auth.CredentialsProvider: com.aliyun.oss.common.auth.Credentials getCredentials()>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><com.aliyun.oss.common.auth.Credentials: java.lang.String getAccessKeyId()>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssPolicyResult policy()>---><org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssCallbackResult callback(jakarta.servlet.http.HttpServletRequest)>---><jakarta.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssCallbackResult callback(jakarta.servlet.http.HttpServletRequest)>---><jakarta.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssCallbackResult callback(jakarta.servlet.http.HttpServletRequest)>---><jakarta.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssCallbackResult callback(jakarta.servlet.http.HttpServletRequest)>---><jakarta.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>
<com.macro.mall.service.impl.OssServiceImpl: com.macro.mall.dto.OssCallbackResult callback(jakarta.servlet.http.HttpServletRequest)>---><jakarta.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>
<com.macro.mall.service.impl.OssServiceImpl: void <clinit>()>---><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.macro.mall.service.impl.OmsOrderReturnApplyServiceImpl: java.util.List list(com.macro.mall.dto.OmsReturnApplyQueryParam,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.PmsProductServiceImpl: void handleUpdateSkuStockList(java.lang.Long,com.macro.mall.dto.PmsProductParam)>---><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<com.macro.mall.service.impl.PmsProductServiceImpl: void handleUpdateSkuStockList(java.lang.Long,com.macro.mall.dto.PmsProductParam)>---><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<com.macro.mall.service.impl.PmsProductServiceImpl: void handleUpdateSkuStockList(java.lang.Long,com.macro.mall.dto.PmsProductParam)>---><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<com.macro.mall.service.impl.PmsProductServiceImpl: void handleUpdateSkuStockList(java.lang.Long,com.macro.mall.dto.PmsProductParam)>---><cn.hutool.core.collection.CollUtil: boolean isNotEmpty(java.util.Collection)>
<com.macro.mall.service.impl.PmsProductServiceImpl: java.util.List list(com.macro.mall.dto.PmsProductQueryParam,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.PmsProductServiceImpl: void relateAndInsertList(java.lang.Object,java.util.List,java.lang.Long)>---><org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>
<com.macro.mall.service.impl.PmsProductServiceImpl: void <clinit>()>---><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
<com.macro.mall.service.impl.UmsMenuServiceImpl: java.util.List list(java.lang.Long,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.UmsResourceServiceImpl: java.util.List list(java.lang.Long,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.UmsResourceServiceImpl: java.util.List list(java.lang.Long,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer)>---><cn.hutool.core.util.StrUtil: boolean isNotEmpty(java.lang.CharSequence)>
<com.macro.mall.service.impl.UmsResourceServiceImpl: java.util.List list(java.lang.Long,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer)>---><cn.hutool.core.util.StrUtil: boolean isNotEmpty(java.lang.CharSequence)>
<com.macro.mall.service.impl.PmsProductAttributeCategoryServiceImpl: java.util.List getList(java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.PmsProductAttributeServiceImpl: java.util.List getList(java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.SmsHomeNewProductServiceImpl: java.util.List list(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.SmsHomeRecommendSubjectServiceImpl: java.util.List list(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.SmsCouponServiceImpl: java.util.List list(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: com.macro.mall.model.UmsAdmin register(com.macro.mall.dto.UmsAdminParam)>---><cn.hutool.crypto.digest.BCrypt: java.lang.String hashpw(java.lang.String)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: cn.dev33.satoken.stp.SaTokenInfo login(java.lang.String,java.lang.String)>---><cn.hutool.core.util.StrUtil: boolean isEmpty(java.lang.CharSequence)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: cn.dev33.satoken.stp.SaTokenInfo login(java.lang.String,java.lang.String)>---><cn.hutool.core.util.StrUtil: boolean isEmpty(java.lang.CharSequence)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: cn.dev33.satoken.stp.SaTokenInfo login(java.lang.String,java.lang.String)>---><cn.hutool.crypto.digest.BCrypt: boolean checkpw(java.lang.String,java.lang.String)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: cn.dev33.satoken.stp.SaTokenInfo login(java.lang.String,java.lang.String)>---><cn.dev33.satoken.stp.StpUtil: void login(java.lang.Object)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: cn.dev33.satoken.stp.SaTokenInfo login(java.lang.String,java.lang.String)>---><cn.dev33.satoken.stp.StpUtil: cn.dev33.satoken.session.SaSession getSession()>
<com.macro.mall.service.impl.UmsAdminServiceImpl: cn.dev33.satoken.stp.SaTokenInfo login(java.lang.String,java.lang.String)>---><cn.dev33.satoken.session.SaSession: cn.dev33.satoken.session.SaSession set(java.lang.String,java.lang.Object)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: cn.dev33.satoken.stp.SaTokenInfo login(java.lang.String,java.lang.String)>---><cn.dev33.satoken.stp.StpUtil: cn.dev33.satoken.stp.SaTokenInfo getTokenInfo()>
<com.macro.mall.service.impl.UmsAdminServiceImpl: void insertLoginLog(com.macro.mall.model.UmsAdmin)>---><jakarta.servlet.http.HttpServletRequest: java.lang.String getRemoteAddr()>
<com.macro.mall.service.impl.UmsAdminServiceImpl: java.util.List list(java.lang.String,java.lang.Integer,java.lang.Integer)>---><com.github.pagehelper.PageHelper: com.github.pagehelper.Page startPage(int,int)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: int update(java.lang.Long,com.macro.mall.model.UmsAdmin)>---><cn.hutool.core.util.StrUtil: boolean isEmpty(java.lang.CharSequence)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: int update(java.lang.Long,com.macro.mall.model.UmsAdmin)>---><cn.hutool.crypto.digest.BCrypt: java.lang.String hashpw(java.lang.String)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: int updatePassword(com.macro.mall.dto.UpdateAdminPasswordParam)>---><cn.hutool.core.util.StrUtil: boolean isEmpty(java.lang.CharSequence)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: int updatePassword(com.macro.mall.dto.UpdateAdminPasswordParam)>---><cn.hutool.core.util.StrUtil: boolean isEmpty(java.lang.CharSequence)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: int updatePassword(com.macro.mall.dto.UpdateAdminPasswordParam)>---><cn.hutool.core.util.StrUtil: boolean isEmpty(java.lang.CharSequence)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: int updatePassword(com.macro.mall.dto.UpdateAdminPasswordParam)>---><cn.hutool.core.collection.CollUtil: boolean isEmpty(java.util.Collection)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: int updatePassword(com.macro.mall.dto.UpdateAdminPasswordParam)>---><cn.hutool.crypto.digest.BCrypt: boolean checkpw(java.lang.String,java.lang.String)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: int updatePassword(com.macro.mall.dto.UpdateAdminPasswordParam)>---><cn.hutool.crypto.digest.BCrypt: java.lang.String hashpw(java.lang.String)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: com.macro.mall.model.UmsAdmin getCurrentAdmin()>---><cn.dev33.satoken.stp.StpUtil: cn.dev33.satoken.session.SaSession getSession()>
<com.macro.mall.service.impl.UmsAdminServiceImpl: com.macro.mall.model.UmsAdmin getCurrentAdmin()>---><cn.dev33.satoken.session.SaSession: java.lang.Object get(java.lang.String)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: void logout()>---><cn.dev33.satoken.stp.StpUtil: cn.dev33.satoken.session.SaSession getSession()>
<com.macro.mall.service.impl.UmsAdminServiceImpl: void logout()>---><cn.dev33.satoken.session.SaSession: java.lang.Object get(java.lang.String)>
<com.macro.mall.service.impl.UmsAdminServiceImpl: void logout()>---><cn.dev33.satoken.stp.StpUtil: void logout()>
<com.macro.mall.service.impl.UmsAdminServiceImpl: void <clinit>()>---><org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
