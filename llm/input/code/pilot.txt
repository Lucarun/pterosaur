Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 24
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>
Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__10: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__111: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__6: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__12: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__10: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__10 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__10;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__10: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__107: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__108: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__107: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__107 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__107;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__107: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__108: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__108 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__108;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__108: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__12: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__112: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__113: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__114: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__107: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__108: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
Method: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
    public void setUsername(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r3;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String r2, $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r4 = interfaceinvoke $r3.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>(r2, $r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
Method: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
    public void setPassword(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String $r3, r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r4 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r3 = interfaceinvoke $r2.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>($r3, r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
    public com.rabbitmq.client.AMQP$BasicProperties build()
    {
        java.util.Date $r6;
        java.lang.Integer $r11, $r12;
        java.util.Map $r13;
        com.rabbitmq.client.AMQP$BasicProperties$Builder r1;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r14, $r15;
        com.rabbitmq.client.AMQP$BasicProperties $r0;

        r1 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        $r0 = new com.rabbitmq.client.AMQP$BasicProperties;

        $r15 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentType>;

        $r14 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentEncoding>;

        $r13 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Map headers>;

        $r12 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer deliveryMode>;

        $r11 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer priority>;

        $r10 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String correlationId>;

        $r9 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String replyTo>;

        $r8 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String expiration>;

        $r7 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String messageId>;

        $r6 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Date timestamp>;

        $r5 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String type>;

        $r4 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String userId>;

        $r3 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String appId>;

        $r2 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String clusterId>;

        specialinvoke $r0.<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4, $r3, $r2);

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
Method: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
    public void setVirtualHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
Method: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
    public void setAutomaticRecoveryEnabled(boolean)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = z0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>
Method: <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>
    public void setConnectionTimeout(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TCP connection timeout cannot be negative");

        throw $r1;

     label1:
        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>
Related methods: 4
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>
Method: <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>
    public void setRequestedHeartbeat(int)
    {
        java.lang.Object[] $r1;
        org.slf4j.Logger $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.Integer $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i5;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>(i0);

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = $i1;

        $i2 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        if $i2 == i0 goto label1;

        $r2 = <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER>;

        $r1 = newarray (java.lang.Object)[3];

        $i5 = (int) 65535;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1[0] = $r3;

        $i3 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[2] = $r5;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Requested heartbeat must be between 0 and {}, value has been set to {} instead of {}", $r1);

     label1:
        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__112: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__113: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__114: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>
    public static int ensureUnsignedShort(int)
    {
        int i0, $i2, $i4;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return 0;

     label1:
        $i2 = (int) 65535;

        if i0 <= $i2 goto label2;

        $i4 = (int) 65535;

        return $i4;

     label2:
        return i0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void useNio()>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void useNio()>
Method: <com.rabbitmq.client.ConnectionFactory: void useNio()>
    public void useNio()
    {
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
Related methods: 3
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: void basicPublish(java.lang.String,java.lang.String,io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>callee is : <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
Method: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQBasicProperties r0;

        r0 := @this: com.rabbitmq.client.impl.AMQBasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQContentHeader: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQContentHeader: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQContentHeader r0;

        r0 := @this: com.rabbitmq.client.impl.AMQContentHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.AMQContentHeader: long bodySize> = 0L;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>
Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>
    public void useSslProtocol(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        javax.net.ssl.SSLSocketFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__116: com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)>(r1);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory> = $r2;

        $r3 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void setSocketFactory(javax.net.SocketFactory)>($r3);

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Map headers> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setUri(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setUri(java.lang.String)>
Method: <com.rabbitmq.client.ConnectionFactory: void setUri(java.lang.String)>
    public void setUri(java.lang.String) throws java.net.URISyntaxException, java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        java.net.URI $r1;
        java.lang.String r2;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.net.URI;

        specialinvoke $r1.<java.net.URI: void <init>(java.lang.String)>(r2);

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void setUri(java.net.URI)>($r1);

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setRequestedChannelMax(int)>
Related methods: 4
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setRequestedChannelMax(int)>
Method: <com.rabbitmq.client.ConnectionFactory: void setRequestedChannelMax(int)>
    public void setRequestedChannelMax(int)
    {
        java.lang.Object[] $r1;
        org.slf4j.Logger $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.Integer $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i5;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>(i0);

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = $i1;

        $i2 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax>;

        if $i2 == i0 goto label1;

        $r2 = <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER>;

        $r1 = newarray (java.lang.Object)[3];

        $i5 = (int) 65535;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1[0] = $r3;

        $i3 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[2] = $r5;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Requested channel max must be between 0 and {}, value has been set to {} instead of {}", $r1);

     label1:
        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__112: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__113: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__114: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>
    public static int ensureUnsignedShort(int)
    {
        int i0, $i2, $i4;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return 0;

     label1:
        $i2 = (int) 65535;

        if i0 <= $i2 goto label2;

        $i4 = (int) 65535;

        return $i4;

     label2:
        return i0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.Integer r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.Integer;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer deliveryMode> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.Integer r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.Integer;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer priority> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String correlationId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String replyTo> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setHandshakeTimeout(int)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setHandshakeTimeout(int)>
Method: <com.rabbitmq.client.ConnectionFactory: void setHandshakeTimeout(int)>
    public void setHandshakeTimeout(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("handshake timeout cannot be negative");

        throw $r1;

     label1:
        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setSaslConfig(com.rabbitmq.client.SaslConfig)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setSaslConfig(com.rabbitmq.client.SaslConfig)>
Method: <com.rabbitmq.client.ConnectionFactory: void setSaslConfig(com.rabbitmq.client.SaslConfig)>
    public void setSaslConfig(com.rabbitmq.client.SaslConfig)
    {
        com.rabbitmq.client.SaslConfig r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.SaslConfig;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>
Method: <com.rabbitmq.client.ConnectionFactory: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>
    public void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.impl.CredentialsProvider;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setMetricsCollector(com.rabbitmq.client.MetricsCollector)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: void setMetricsCollector(com.rabbitmq.client.MetricsCollector)>
Method: <com.rabbitmq.client.ConnectionFactory: void setMetricsCollector(com.rabbitmq.client.MetricsCollector)>
    public void setMetricsCollector(com.rabbitmq.client.MetricsCollector)
    {
        com.rabbitmq.client.MetricsCollector r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.MetricsCollector;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.lang.String)>
Related methods: 6
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>callee is : <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.lang.String)>
Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.Connection $r6;
        java.util.List $r4;
        int $i0;
        java.lang.String $r3, r5;
        java.util.concurrent.ExecutorService $r2;
        com.rabbitmq.client.Address $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r5 := @parameter0: java.lang.String;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService sharedExecutor>;

        $r1 = new com.rabbitmq.client.Address;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String getHost()>();

        $i0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: int getPort()>();

        specialinvoke $r1.<com.rabbitmq.client.Address: void <init>(java.lang.String,int)>($r3, $i0);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        $r6 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>($r2, $r4, r5);

        return $r6;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int getPort()>
    public int getPort()
    {
        com.rabbitmq.client.ConnectionFactory r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $i0 = r0.<com.rabbitmq.client.ConnectionFactory: int port>;

        $z0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        return $i1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: boolean isSSL()>
    public boolean isSSL()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        boolean $z0, $z1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>();

        $z0 = $r1 instanceof javax.net.ssl.SSLSocketFactory;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        if $r2 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>
    public static int portOrDefault(int, boolean)
    {
        int i0, $i2;
        boolean z0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i2 = (int) -1;

        if i0 == $i2 goto label1;

        return i0;

     label1:
        if z0 == 0 goto label2;

        return 5671;

     label2:
        return 5672;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentType> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentEncoding> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String expiration> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String messageId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.util.Date r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.util.Date;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Date timestamp> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String type> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String userId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String appId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)>
Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String clusterId> = r1;

        return r0;
    }

-----------
