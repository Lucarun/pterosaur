Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <org.springframework.cloud.service.messaging.RabbitConnectionFactoryCreator: com.rabbitmq.client.ConnectionFactory createRabbitConnectionFactory(org.springframework.cloud.service.common.AmqpServiceInfo)>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <com.mware.core.model.workQueue.RabbitMQUtils: com.rabbitmq.client.Connection openConnection(com.rabbitmq.client.Address[],com.mware.core.config.Configuration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <org.apache.james.backends.rabbitmq.RabbitMQConnectionFactory: com.rabbitmq.client.ConnectionFactory 'from'(org.apache.james.backends.rabbitmq.RabbitMQConfiguration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <com.fastchar.extend.rabbitmq.FastRabbitMQProvider: com.rabbitmq.client.ConnectionFactory getConnectFactory()>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <com.alibaba.otter.canal.client.rabbitmq.RabbitMQCanalConnector: void connect()>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <reactor.rabbitmq.ReceiverOptions: com.rabbitmq.client.ConnectionFactory lambda$new$0()>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <reactor.rabbitmq.SenderOptions: com.rabbitmq.client.ConnectionFactory lambda$new$0()>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <com.codahale.metrics.graphite.GraphiteRabbitMQ: void <init>(java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer)>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <net.jodah.lyra.ConnectionOptions: com.rabbitmq.client.ConnectionFactory makeConnectionFactory()>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <de.iip_ecosphere.platform.transport.connectors.rabbitmq.RabbitMqAmqpTransportConnector: void connect(de.iip_ecosphere.platform.transport.connectors.TransportParameter)>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <net.oschina.j2cache.cluster.RabbitMQClusterPolicy: void <init>(java.util.Properties)>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <com.datatorrent.contrib.rabbitmq.AbstractRabbitMQInputOperator: void activate(com.datatorrent.api.Context$OperatorContext)>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void <init>()>
Related methods: 62
caller is : <com.datatorrent.contrib.rabbitmq.AbstractRabbitMQOutputOperator: void <init>()>
callee is : <com.rabbitmq.client.ConnectionFactory: void <init>()>

Method: <com.rabbitmq.client.ConnectionFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler $r10;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.DefaultSaslConfig $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.TrafficListener $r9;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r11;
        java.util.Map $r1;
        int $i0, $i2, $i4, $i6;
        com.rabbitmq.client.observation.ObservationCollector $r7;
        com.rabbitmq.client.impl.nio.NioParams $r12;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = "/";

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = "localhost";

        $i2 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = $i2;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = 2047;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = 0;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = 60;

        $i4 = (int) 60000;

        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = $i4;

        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = 10000;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = $r1;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = null;

        $r2 = <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = $r3;

        $r4 = staticinvoke <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf> = $r4;

        $r10 = new com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke $r10.<com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = $r10;

        $r11 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        specialinvoke $r11.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>("guest", "guest");

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r11;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = 1;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = 5000L;

        $r7 = <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector> = $r7;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 0;

        $r12 = new com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke $r12.<com.rabbitmq.client.impl.nio.NioParams: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams> = $r12;

        $i0 = <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT>;

        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = $i0;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType> = 0;

        $i6 = (int) -1;

        r0.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout> = $i6;

        $r9 = <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP>;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener> = $r9;

        r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize> = 67108864;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.rabbitmq.client.impl.Version $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/AMQConnection;");

        <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.rabbitmq.client.impl.Version;

        specialinvoke $r1.<com.rabbitmq.client.impl.Version: void <init>(int,int)>(0, 9);

        <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion> = $r1;

        <com.rabbitmq.client.impl.AMQConnection: long SOCKET_CLOSE_TIMEOUT> = 10000L;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.Version: void <init>(int,int)>
    public void <init>(int, int)
    {
        int i0, i1;
        com.rabbitmq.client.impl.Version r0;

        r0 := @this: com.rabbitmq.client.impl.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.Version: int _major> = i0;

        r0.<com.rabbitmq.client.impl.Version: int _minor> = i1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.DefaultExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.StrictExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.StrictExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.StrictExceptionHandler;

        specialinvoke r0.<com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.ForgivingExceptionHandler: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.ForgivingExceptionHandler r0;

        r0 := @this: com.rabbitmq.client.impl.ForgivingExceptionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory $r5;
        int $i1, $i3;
        com.rabbitmq.client.impl.nio.NioParams r0;
        com.rabbitmq.client.SocketChannelConfigurator $r1;
        java.util.function.Function $r4;
        com.rabbitmq.client.SslEngineConfigurator $r2;

        r0 := @this: com.rabbitmq.client.impl.nio.NioParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int readByteBufferSize> = $i1;

        $i3 = (int) 32768;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeByteBufferSize> = $i3;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int nbIoThreads> = 1;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeEnqueuingTimeoutInMs> = 10000;

        r0.<com.rabbitmq.client.impl.nio.NioParams: int writeQueueCapacity> = 10000;

        $r1 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator socketChannelConfigurator> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator sslEngineConfigurator> = $r2;

        $r5 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        specialinvoke $r5.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.ByteBufferFactory byteBufferFactory> = $r5;

        $r4 = <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY>;

        r0.<com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function writeQueueFactory> = $r4;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketChannelConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194 $r0;

        $r0 = new com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194;

        specialinvoke $r0.<com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function $r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        $r1 = staticinvoke <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>();

        specialinvoke r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>($r1);

        return;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory$lambda_new_0__3089: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: void <init>(java.util.function.Function)>
    public void <init>(java.util.function.Function)
    {
        com.rabbitmq.client.impl.nio.DefaultByteBufferFactory r0;
        java.util.function.Function r1;

        r0 := @this: com.rabbitmq.client.impl.nio.DefaultByteBufferFactory;

        r1 := @parameter0: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.nio.DefaultByteBufferFactory: java.util.function.Function allocator> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketChannelConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketChannelConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketChannelConfigurator $r0, $r1;

        $r0 = staticinvoke <com.rabbitmq.client.SocketChannelConfigurators$lambda_static_0__3194: com.rabbitmq.client.SocketChannelConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketChannelConfigurators: com.rabbitmq.client.SocketChannelConfigurator DEFAULT> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: com.rabbitmq.client.SslEngineConfigurator bootstrap$()>
    public static com.rabbitmq.client.SslEngineConfigurator bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_new_1__3093;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.DefaultSaslConfig $r0, $r1, $r2;

        $r0 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r0.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("PLAIN");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig PLAIN> = $r0;

        $r1 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r1.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("EXTERNAL");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig EXTERNAL> = $r1;

        $r2 = new com.rabbitmq.client.DefaultSaslConfig;

        specialinvoke $r2.<com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>("ANONYMOUS");

        <com.rabbitmq.client.DefaultSaslConfig: com.rabbitmq.client.DefaultSaslConfig ANONYMOUS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.DefaultSaslConfig: void <init>(java.lang.String)>
    private void <init>(java.lang.String)
    {
        com.rabbitmq.client.DefaultSaslConfig r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.DefaultSaslConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DefaultSaslConfig: java.lang.String mechanism> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 := @this: com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.observation.ObservationCollector: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector $r0;

        $r0 = new com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke $r0.<com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>();

        <com.rabbitmq.client.observation.ObservationCollector: com.rabbitmq.client.observation.ObservationCollector NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.observation.NoOpObservationCollector: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.observation.NoOpObservationCollector r0;

        r0 := @this: com.rabbitmq.client.observation.NoOpObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams: void <clinit>()>
    static void <clinit>()
    {
        java.util.function.Function $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>();

        <com.rabbitmq.client.impl.nio.NioParams: java.util.function.Function DEFAULT_WRITE_QUEUE_FACTORY> = $r0;

        return;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: java.util.function.Function bootstrap$()>
    public static java.util.function.Function bootstrap$()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 = new com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095 $r0;

        $r0 := @this: com.rabbitmq.client.impl.nio.NioParams$lambda_static_0__3095;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.TrafficListener: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.TrafficListener$1 $r0;

        $r0 = new com.rabbitmq.client.TrafficListener$1;

        specialinvoke $r0.<com.rabbitmq.client.TrafficListener$1: void <init>()>();

        <com.rabbitmq.client.TrafficListener: com.rabbitmq.client.TrafficListener NO_OP> = $r0;

        return;
    }

Method: <com.rabbitmq.client.TrafficListener$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.TrafficListener$1 r0;

        r0 := @this: com.rabbitmq.client.TrafficListener$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: java.util.Map defaultClientProperties()>
    public static java.util.Map defaultClientProperties()
    {
        java.util.HashMap $r0, $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11, $r12, $r13;
        com.rabbitmq.client.LongString $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("RabbitMQ");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("product", $r1);

        $r2 = <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION>;

        $r3 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>($r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("version", $r3);

        $r4 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Java");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("platform", $r4);

        $r5 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Copyright (c) 2007-2024 Broadcom Inc. and/or its subsidiaries.");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("copyright", $r5);

        $r6 = staticinvoke <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>("Licensed under the MPL. See https://www.rabbitmq.com/");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("information", $r6);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("publisher_confirms", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exchange_exchange_bindings", $r9);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("basic.nack", $r10);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("consumer_cancel_notify", $r11);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection.blocked", $r12);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("authentication_failure_close", $r13);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("capabilities", $r7);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r3, $r5;
        char[] $r1;
        java.lang.String r6;
        java.lang.Exception $r2, $r4;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/ClientVersion;");

        <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER> = $r0;

        $r1 = newarray (char)[27];

        $r1[0] = 99;

        $r1[1] = 111;

        $r1[2] = 109;

        $r1[3] = 46;

        $r1[4] = 114;

        $r1[5] = 97;

        $r1[6] = 98;

        $r1[7] = 98;

        $r1[8] = 105;

        $r1[9] = 116;

        $r1[10] = 109;

        $r1[11] = 113;

        $r1[12] = 46;

        $r1[13] = 99;

        $r1[14] = 108;

        $r1[15] = 105;

        $r1[16] = 101;

        $r1[17] = 110;

        $r1[18] = 116;

        $r1[19] = 46;

        $r1[20] = 118;

        $r1[21] = 101;

        $r1[22] = 114;

        $r1[23] = 115;

        $r1[24] = 105;

        $r1[25] = 111;

        $r1[26] = 110;

        <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY> = $r1;

     label1:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version from property file", $r4);

     label4:
        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <com.rabbitmq.client.impl.ClientVersion: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t get version with Package#getImplementationVersion", $r4);

        r6 = staticinvoke <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>();

     label7:
        <com.rabbitmq.client.impl.ClientVersion: java.lang.String VERSION> = r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPropertyFile()>
    private static final java.lang.String getVersionFromPropertyFile() throws java.lang.Exception
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r7;
        java.util.Properties $r3;
        char[] $r5;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String $r4, $r6;
        java.io.InputStream $r2;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("rabbitmq-amqp-client.properties");

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

     label1:
        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        if $r2 == null goto label5;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        if $r2 == null goto label4;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        throw $r8;

     label5:
        $r4 = new java.lang.String;

        $r5 = <com.rabbitmq.client.impl.ClientVersion: char[] VERSION_PROPERTY>;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        $r6 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t find version property in property file");

        throw $r7;

     label6:
        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getVersionFromPackage()>
    private static final java.lang.String getVersionFromPackage()
    {
        java.lang.IllegalStateException $r6;
        java.lang.Package $r1, $r4;
        java.lang.Class $r0, $r3;
        java.lang.String $r2, $r5;

        $r0 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Couldn\'t get version with Package#getImplementationVersion");

        throw $r6;

     label1:
        $r3 = class "Lcom/rabbitmq/client/impl/ClientVersion;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getImplementationVersion()>();

        return $r5;
    }

Method: <com.rabbitmq.client.impl.ClientVersion: java.lang.String getDefaultVersion()>
    private static final java.lang.String getDefaultVersion()
    {
        return "0.0.0";
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper: com.rabbitmq.client.LongString asLongString(java.lang.String)>
    public static com.rabbitmq.client.LongString asLongString(java.lang.String)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String r0;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r1.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>($r3);

        return $r1;
    }

Method: <com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: void <init>(byte[])>
    public void <init>(byte[])
    {
        byte[] r1;
        com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString r0;

        r0 := @this: com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.LongStringHelper$ByteArrayLongString: byte[] bytes> = r1;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator defaultConfigurator()>
    public static com.rabbitmq.client.SocketConfigurator defaultConfigurator()
    {
        com.rabbitmq.client.SocketConfigurator $r0;

        $r0 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT>;

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators: void <clinit>()>
    static void <clinit>()
    {
        com.rabbitmq.client.SocketConfigurator $r0, $r1, $r2;

        $r0 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM> = $r0;

        $r1 = <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DISABLE_NAGLE_ALGORITHM>;

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator DEFAULT> = $r1;

        $r2 = staticinvoke <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>();

        <com.rabbitmq.client.SocketConfigurators: com.rabbitmq.client.SocketConfigurator ENABLE_HOSTNAME_VERIFICATION> = $r2;

        return;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_0__3190: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: com.rabbitmq.client.SocketConfigurator bootstrap$()>
    public static com.rabbitmq.client.SocketConfigurator bootstrap$()
    {
        com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191 $r0;

        $r0 = new com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191;

        specialinvoke $r0.<com.rabbitmq.client.SocketConfigurators$lambda_static_1__3191: void <init>()>();

        return $r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection()>
Related methods: 16
caller is : <com.alibaba.otter.canal.client.rabbitmq.RabbitMQCanalConnector: void connect()>
callee is : <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection()>

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection()>
    public com.rabbitmq.client.Connection newConnection() throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List $r4;
        com.rabbitmq.client.ConnectionFactory r0;
        int $i0;
        java.lang.String $r3;
        com.rabbitmq.client.Connection $r5;
        java.util.concurrent.ExecutorService $r2;
        com.rabbitmq.client.Address $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService sharedExecutor>;

        $r1 = new com.rabbitmq.client.Address;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String getHost()>();

        $i0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: int getPort()>();

        specialinvoke $r1.<com.rabbitmq.client.Address: void <init>(java.lang.String,int)>($r3, $i0);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List)>($r2, $r4);

        return $r5;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, java.util.List) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.Connection $r3;
        java.util.concurrent.ExecutorService r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        r2 := @parameter1: java.util.List;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>(r1, r2, null);

        return $r3;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, java.util.List, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.String r4;
        com.rabbitmq.client.Connection $r5;
        java.util.concurrent.ExecutorService r1;
        com.rabbitmq.client.AddressResolver $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        r2 := @parameter1: java.util.List;

        r4 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>(r2);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>(r1, $r3, r4);

        return $r5;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>
    protected com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)
    {
        com.rabbitmq.client.ConnectionFactory r4;
        com.rabbitmq.client.ListAddressResolver $r6;
        java.lang.IllegalArgumentException $r1;
        java.util.List r0;
        com.rabbitmq.client.DnsRecordIpAddressResolver $r2;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, $z1;
        com.rabbitmq.client.Address $r5;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide at least one address to connect to");

        throw $r1;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 1 goto label3;

        $r6 = new com.rabbitmq.client.ListAddressResolver;

        specialinvoke $r6.<com.rabbitmq.client.ListAddressResolver: void <init>(java.util.List)>(r0);

        return $r6;

     label3:
        $r2 = new com.rabbitmq.client.DnsRecordIpAddressResolver;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (com.rabbitmq.client.Address) $r3;

        $z1 = virtualinvoke r4.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        specialinvoke $r2.<com.rabbitmq.client.DnsRecordIpAddressResolver: void <init>(com.rabbitmq.client.Address,boolean)>($r5, $z1);

        return $r2;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, com.rabbitmq.client.AddressResolver, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.lang.Throwable $r24, $r25, r26;
        com.rabbitmq.client.impl.ConnectionParams $r4;
        java.util.concurrent.TimeoutException $r10;
        java.util.HashMap $r21;
        com.rabbitmq.client.MetricsCollector $r1, $r15, $r17, $r20;
        com.rabbitmq.client.NoOpMetricsCollector $r23;
        java.util.Map $r22;
        com.rabbitmq.client.observation.ObservationCollector $r19;
        java.lang.String r5;
        java.util.concurrent.ExecutorService r3;
        com.rabbitmq.client.AddressResolver r6;
        boolean $z0, $z1, $z2, $z3;
        com.rabbitmq.client.impl.FrameHandler $r14;
        com.rabbitmq.client.ConnectionFactory r0;
        java.util.Iterator $r8;
        com.rabbitmq.client.impl.AMQConnection $r16;
        java.io.IOException $r9, $r11;
        com.rabbitmq.client.impl.FrameHandlerFactory $r2;
        java.util.List $r7;
        java.lang.Object $r12;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection $r18;
        com.rabbitmq.client.Address r13;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r3 := @parameter0: java.util.concurrent.ExecutorService;

        r6 := @parameter1: com.rabbitmq.client.AddressResolver;

        r5 := @parameter2: java.lang.String;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        if $r1 != null goto label01;

        $r23 = new com.rabbitmq.client.NoOpMetricsCollector;

        specialinvoke $r23.<com.rabbitmq.client.NoOpMetricsCollector: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector> = $r23;

     label01:
        $r2 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory()>();

        $r4 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)>(r3);

        if r5 == null goto label02;

        $r21 = new java.util.HashMap;

        $r22 = virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map getClientProperties()>();

        specialinvoke $r21.<java.util.HashMap: void <init>(java.util.Map)>($r22);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_name", r5);

        virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>($r21);

     label02:
        $z0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isAutomaticRecoveryEnabled()>();

        if $z0 == 0 goto label03;

        $r18 = new com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        $r20 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r19 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector>;

        specialinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>($r4, $r2, r6, $r20, $r19);

        virtualinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void init()>();

        return $r18;

     label03:
        $r7 = interfaceinvoke r6.<com.rabbitmq.client.AddressResolver: java.util.List getAddresses()>();

        r26 = null;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r12 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.rabbitmq.client.Address) $r12;

     label05:
        $r14 = interfaceinvoke $r2.<com.rabbitmq.client.impl.FrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>(r13, r5);

        $r15 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r16 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector)>($r4, $r14, $r15);

        virtualinvoke $r16.<com.rabbitmq.client.impl.AMQConnection: void start()>();

        $r17 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        interfaceinvoke $r17.<com.rabbitmq.client.MetricsCollector: void newConnection(com.rabbitmq.client.Connection)>($r16);

     label06:
        return $r16;

     label07:
        $r25 := @caughtexception;

        r26 = $r25;

        goto label09;

     label08:
        $r24 := @caughtexception;

        r26 = $r24;

     label09:
        goto label04;

     label10:
        if r26 == null goto label12;

        $z2 = r26 instanceof java.io.IOException;

        if $z2 == 0 goto label11;

        $r11 = (java.io.IOException) r26;

        throw $r11;

     label11:
        $z3 = r26 instanceof java.util.concurrent.TimeoutException;

        if $z3 == 0 goto label12;

        $r10 = (java.util.concurrent.TimeoutException) r26;

        throw $r10;

     label12:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("failed to connect");

        throw $r9;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.util.concurrent.TimeoutException from label05 to label06 with label08;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int getPort()>
    public int getPort()
    {
        com.rabbitmq.client.ConnectionFactory r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $i0 = r0.<com.rabbitmq.client.ConnectionFactory: int port>;

        $z0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        return $i1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: boolean isSSL()>
    public boolean isSSL()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        boolean $z0, $z1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>();

        $z0 = $r1 instanceof javax.net.ssl.SSLSocketFactory;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        if $r2 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>
    public javax.net.SocketFactory getSocketFactory()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory>;

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>
    public static int portOrDefault(int, boolean)
    {
        int i0, $i2;
        boolean z0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i2 = (int) -1;

        if i0 == $i2 goto label1;

        return i0;

     label1:
        if z0 == 0 goto label2;

        return 5671;

     label2:
        return 5672;
    }

Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String getHost()>
    public java.lang.String getHost()
    {
        java.lang.String $r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host>;

        return $r1;
    }

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection()>
Related methods: 16
caller is : <de.iip_ecosphere.platform.transport.connectors.rabbitmq.RabbitMqAmqpTransportConnector: void connect(de.iip_ecosphere.platform.transport.connectors.TransportParameter)>
callee is : <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection()>

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection()>
    public com.rabbitmq.client.Connection newConnection() throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List $r4;
        com.rabbitmq.client.ConnectionFactory r0;
        int $i0;
        java.lang.String $r3;
        com.rabbitmq.client.Connection $r5;
        java.util.concurrent.ExecutorService $r2;
        com.rabbitmq.client.Address $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService sharedExecutor>;

        $r1 = new com.rabbitmq.client.Address;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String getHost()>();

        $i0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: int getPort()>();

        specialinvoke $r1.<com.rabbitmq.client.Address: void <init>(java.lang.String,int)>($r3, $i0);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List)>($r2, $r4);

        return $r5;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, java.util.List) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List r2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.Connection $r3;
        java.util.concurrent.ExecutorService r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        r2 := @parameter1: java.util.List;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>(r1, r2, null);

        return $r3;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, java.util.List, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.String r4;
        com.rabbitmq.client.Connection $r5;
        java.util.concurrent.ExecutorService r1;
        com.rabbitmq.client.AddressResolver $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        r2 := @parameter1: java.util.List;

        r4 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>(r2);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>(r1, $r3, r4);

        return $r5;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>
    protected com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)
    {
        com.rabbitmq.client.ConnectionFactory r4;
        com.rabbitmq.client.ListAddressResolver $r6;
        java.lang.IllegalArgumentException $r1;
        java.util.List r0;
        com.rabbitmq.client.DnsRecordIpAddressResolver $r2;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, $z1;
        com.rabbitmq.client.Address $r5;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide at least one address to connect to");

        throw $r1;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 1 goto label3;

        $r6 = new com.rabbitmq.client.ListAddressResolver;

        specialinvoke $r6.<com.rabbitmq.client.ListAddressResolver: void <init>(java.util.List)>(r0);

        return $r6;

     label3:
        $r2 = new com.rabbitmq.client.DnsRecordIpAddressResolver;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (com.rabbitmq.client.Address) $r3;

        $z1 = virtualinvoke r4.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        specialinvoke $r2.<com.rabbitmq.client.DnsRecordIpAddressResolver: void <init>(com.rabbitmq.client.Address,boolean)>($r5, $z1);

        return $r2;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, com.rabbitmq.client.AddressResolver, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.lang.Throwable $r24, $r25, r26;
        com.rabbitmq.client.impl.ConnectionParams $r4;
        java.util.concurrent.TimeoutException $r10;
        java.util.HashMap $r21;
        com.rabbitmq.client.MetricsCollector $r1, $r15, $r17, $r20;
        com.rabbitmq.client.NoOpMetricsCollector $r23;
        java.util.Map $r22;
        com.rabbitmq.client.observation.ObservationCollector $r19;
        java.lang.String r5;
        java.util.concurrent.ExecutorService r3;
        com.rabbitmq.client.AddressResolver r6;
        boolean $z0, $z1, $z2, $z3;
        com.rabbitmq.client.impl.FrameHandler $r14;
        com.rabbitmq.client.ConnectionFactory r0;
        java.util.Iterator $r8;
        com.rabbitmq.client.impl.AMQConnection $r16;
        java.io.IOException $r9, $r11;
        com.rabbitmq.client.impl.FrameHandlerFactory $r2;
        java.util.List $r7;
        java.lang.Object $r12;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection $r18;
        com.rabbitmq.client.Address r13;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r3 := @parameter0: java.util.concurrent.ExecutorService;

        r6 := @parameter1: com.rabbitmq.client.AddressResolver;

        r5 := @parameter2: java.lang.String;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        if $r1 != null goto label01;

        $r23 = new com.rabbitmq.client.NoOpMetricsCollector;

        specialinvoke $r23.<com.rabbitmq.client.NoOpMetricsCollector: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector> = $r23;

     label01:
        $r2 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory()>();

        $r4 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)>(r3);

        if r5 == null goto label02;

        $r21 = new java.util.HashMap;

        $r22 = virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map getClientProperties()>();

        specialinvoke $r21.<java.util.HashMap: void <init>(java.util.Map)>($r22);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_name", r5);

        virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>($r21);

     label02:
        $z0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isAutomaticRecoveryEnabled()>();

        if $z0 == 0 goto label03;

        $r18 = new com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        $r20 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r19 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector>;

        specialinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>($r4, $r2, r6, $r20, $r19);

        virtualinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void init()>();

        return $r18;

     label03:
        $r7 = interfaceinvoke r6.<com.rabbitmq.client.AddressResolver: java.util.List getAddresses()>();

        r26 = null;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r12 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.rabbitmq.client.Address) $r12;

     label05:
        $r14 = interfaceinvoke $r2.<com.rabbitmq.client.impl.FrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>(r13, r5);

        $r15 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r16 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector)>($r4, $r14, $r15);

        virtualinvoke $r16.<com.rabbitmq.client.impl.AMQConnection: void start()>();

        $r17 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        interfaceinvoke $r17.<com.rabbitmq.client.MetricsCollector: void newConnection(com.rabbitmq.client.Connection)>($r16);

     label06:
        return $r16;

     label07:
        $r25 := @caughtexception;

        r26 = $r25;

        goto label09;

     label08:
        $r24 := @caughtexception;

        r26 = $r24;

     label09:
        goto label04;

     label10:
        if r26 == null goto label12;

        $z2 = r26 instanceof java.io.IOException;

        if $z2 == 0 goto label11;

        $r11 = (java.io.IOException) r26;

        throw $r11;

     label11:
        $z3 = r26 instanceof java.util.concurrent.TimeoutException;

        if $z3 == 0 goto label12;

        $r10 = (java.util.concurrent.TimeoutException) r26;

        throw $r10;

     label12:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("failed to connect");

        throw $r9;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.util.concurrent.TimeoutException from label05 to label06 with label08;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int getPort()>
    public int getPort()
    {
        com.rabbitmq.client.ConnectionFactory r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $i0 = r0.<com.rabbitmq.client.ConnectionFactory: int port>;

        $z0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        return $i1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: boolean isSSL()>
    public boolean isSSL()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        boolean $z0, $z1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>();

        $z0 = $r1 instanceof javax.net.ssl.SSLSocketFactory;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        if $r2 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>
    public javax.net.SocketFactory getSocketFactory()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory>;

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>
    public static int portOrDefault(int, boolean)
    {
        int i0, $i2;
        boolean z0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i2 = (int) -1;

        if i0 == $i2 goto label1;

        return i0;

     label1:
        if z0 == 0 goto label2;

        return 5671;

     label2:
        return 5672;
    }

Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String getHost()>
    public java.lang.String getHost()
    {
        java.lang.String $r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host>;

        return $r1;
    }

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
Related methods: 5
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
    public void setUsername(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r3;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String r2, $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r4 = interfaceinvoke $r3.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>(r2, $r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.Throwable $r3;
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

     label1:
        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessSecret>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
Related methods: 5
caller is : <com.mware.core.model.workQueue.RabbitMQUtils: com.rabbitmq.client.Connection openConnection(com.rabbitmq.client.Address[],com.mware.core.config.Configuration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
    public void setUsername(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r3;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String r2, $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r4 = interfaceinvoke $r3.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>(r2, $r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.Throwable $r3;
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

     label1:
        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessSecret>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
Related methods: 5
caller is : <org.apache.james.backends.rabbitmq.RabbitMQConnectionFactory: com.rabbitmq.client.ConnectionFactory 'from'(org.apache.james.backends.rabbitmq.RabbitMQConfiguration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
    public void setUsername(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r3;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String r2, $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r4 = interfaceinvoke $r3.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>(r2, $r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.Throwable $r3;
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

     label1:
        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessSecret>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
Related methods: 5
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
    public void setUsername(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r3;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String r2, $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r4 = interfaceinvoke $r3.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>(r2, $r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.Throwable $r3;
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

     label1:
        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessSecret>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
Related methods: 5
caller is : <com.fastchar.extend.rabbitmq.FastRabbitMQProvider: com.rabbitmq.client.ConnectionFactory getConnectFactory()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
    public void setUsername(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r3;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String r2, $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r4 = interfaceinvoke $r3.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>(r2, $r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.Throwable $r3;
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

     label1:
        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessSecret>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
Related methods: 5
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
    public void setUsername(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r3;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String r2, $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r4 = interfaceinvoke $r3.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>(r2, $r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.Throwable $r3;
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

     label1:
        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessSecret>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
Related methods: 5
caller is : <com.alibaba.otter.canal.client.rabbitmq.RabbitMQCanalConnector: void connect()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
    public void setUsername(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r3;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String r2, $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r4 = interfaceinvoke $r3.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>(r2, $r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.Throwable $r3;
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

     label1:
        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessSecret>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getPassord(java.lang.String)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
Related methods: 5
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
    public void setPassword(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String $r3, r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r4 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r3 = interfaceinvoke $r2.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>($r3, r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        long $l0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessKey>;

        $l0 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: long resourceOwnerId>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>($r1, $l0);

        return $r2;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
Related methods: 5
caller is : <com.mware.core.model.workQueue.RabbitMQUtils: com.rabbitmq.client.Connection openConnection(com.rabbitmq.client.Address[],com.mware.core.config.Configuration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
    public void setPassword(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String $r3, r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r4 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r3 = interfaceinvoke $r2.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>($r3, r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        long $l0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessKey>;

        $l0 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: long resourceOwnerId>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>($r1, $l0);

        return $r2;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
Related methods: 5
caller is : <org.apache.james.backends.rabbitmq.RabbitMQConnectionFactory: com.rabbitmq.client.ConnectionFactory 'from'(org.apache.james.backends.rabbitmq.RabbitMQConfiguration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
    public void setPassword(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String $r3, r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r4 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r3 = interfaceinvoke $r2.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>($r3, r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        long $l0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessKey>;

        $l0 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: long resourceOwnerId>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>($r1, $l0);

        return $r2;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
Related methods: 5
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
    public void setPassword(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String $r3, r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r4 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r3 = interfaceinvoke $r2.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>($r3, r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        long $l0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessKey>;

        $l0 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: long resourceOwnerId>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>($r1, $l0);

        return $r2;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
Related methods: 5
caller is : <com.fastchar.extend.rabbitmq.FastRabbitMQProvider: com.rabbitmq.client.ConnectionFactory getConnectFactory()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
    public void setPassword(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String $r3, r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r4 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r3 = interfaceinvoke $r2.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>($r3, r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        long $l0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessKey>;

        $l0 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: long resourceOwnerId>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>($r1, $l0);

        return $r2;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
Related methods: 5
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
    public void setPassword(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String $r3, r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r4 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r3 = interfaceinvoke $r2.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>($r3, r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        long $l0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessKey>;

        $l0 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: long resourceOwnerId>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>($r1, $l0);

        return $r2;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
Related methods: 5
caller is : <com.alibaba.otter.canal.client.rabbitmq.RabbitMQCanalConnector: void connect()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
    public void setPassword(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String $r3, r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r4 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r3 = interfaceinvoke $r2.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>($r3, r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider r0;
        long $l0;
        java.lang.String $r1, $r2;

        r0 := @this: com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider;

        $r1 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: java.lang.String AliyunAccessKey>;

        $l0 = r0.<com.alibaba.otter.canal.client.rabbitmq.AliyunCredentialsProvider: long resourceOwnerId>;

        $r2 = staticinvoke <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>($r1, $l0);

        return $r2;
    }

Method: <com.alibaba.mq.amqp.utils.UserUtils: java.lang.String getUserName(java.lang.String,long)>
Abstract method
Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
    public void setHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
Related methods: 1
caller is : <com.fastchar.extend.rabbitmq.FastRabbitMQProvider: com.rabbitmq.client.ConnectionFactory getConnectFactory()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
    public void setHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
Related methods: 1
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
    public void setHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
Related methods: 1
caller is : <com.alibaba.otter.canal.client.rabbitmq.RabbitMQCanalConnector: void connect()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
    public void setHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
Related methods: 1
caller is : <de.iip_ecosphere.platform.transport.connectors.rabbitmq.RabbitMqAmqpTransportConnector: void connect(de.iip_ecosphere.platform.transport.connectors.TransportParameter)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
    public void setHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
Related methods: 4
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
    public com.rabbitmq.client.AMQP$BasicProperties build()
    {
        java.util.Date $r6;
        java.lang.Integer $r11, $r12;
        java.util.Map $r13;
        com.rabbitmq.client.AMQP$BasicProperties$Builder r1;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r14, $r15;
        com.rabbitmq.client.AMQP$BasicProperties $r0;

        r1 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        $r0 = new com.rabbitmq.client.AMQP$BasicProperties;

        $r15 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentType>;

        $r14 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentEncoding>;

        $r13 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Map headers>;

        $r12 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer deliveryMode>;

        $r11 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer priority>;

        $r10 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String correlationId>;

        $r9 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String replyTo>;

        $r8 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String expiration>;

        $r7 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String messageId>;

        $r6 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Date timestamp>;

        $r5 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String type>;

        $r4 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String userId>;

        $r3 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String appId>;

        $r2 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String clusterId>;

        specialinvoke $r0.<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4, $r3, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.util.Map, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Date r11;
        java.util.HashMap $r4;
        java.lang.Integer r5, r6;
        java.util.Map r3, $r16;
        java.lang.String r1, r2, r7, r8, r9, r10, r12, r13, r14, r15;
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        r5 := @parameter3: java.lang.Integer;

        r6 := @parameter4: java.lang.Integer;

        r7 := @parameter5: java.lang.String;

        r8 := @parameter6: java.lang.String;

        r9 := @parameter7: java.lang.String;

        r10 := @parameter8: java.lang.String;

        r11 := @parameter9: java.util.Date;

        r12 := @parameter10: java.lang.String;

        r13 := @parameter11: java.lang.String;

        r14 := @parameter12: java.lang.String;

        r15 := @parameter13: java.lang.String;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentType> = r1;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentEncoding> = r2;

        if r3 != null goto label1;

        $r16 = null;

        goto label2;

     label1:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>(r3);

        $r16 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4);

     label2:
        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Map headers> = $r16;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer deliveryMode> = r5;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer priority> = r6;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String correlationId> = r7;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String replyTo> = r8;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String expiration> = r9;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String messageId> = r10;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Date timestamp> = r11;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String type> = r12;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String userId> = r13;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String appId> = r14;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String clusterId> = r15;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQBasicProperties r0;

        r0 := @this: com.rabbitmq.client.impl.AMQBasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQContentHeader: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQContentHeader: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQContentHeader r0;

        r0 := @this: com.rabbitmq.client.impl.AMQContentHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.AMQContentHeader: long bodySize> = 0L;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
Related methods: 4
caller is : <com.mware.core.model.workQueue.RabbitMQWorkQueueRepository: void pushOnQueue(java.lang.String,byte[],com.mware.core.model.workQueue.Priority)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
    public com.rabbitmq.client.AMQP$BasicProperties build()
    {
        java.util.Date $r6;
        java.lang.Integer $r11, $r12;
        java.util.Map $r13;
        com.rabbitmq.client.AMQP$BasicProperties$Builder r1;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r14, $r15;
        com.rabbitmq.client.AMQP$BasicProperties $r0;

        r1 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        $r0 = new com.rabbitmq.client.AMQP$BasicProperties;

        $r15 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentType>;

        $r14 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentEncoding>;

        $r13 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Map headers>;

        $r12 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer deliveryMode>;

        $r11 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer priority>;

        $r10 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String correlationId>;

        $r9 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String replyTo>;

        $r8 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String expiration>;

        $r7 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String messageId>;

        $r6 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Date timestamp>;

        $r5 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String type>;

        $r4 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String userId>;

        $r3 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String appId>;

        $r2 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String clusterId>;

        specialinvoke $r0.<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4, $r3, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.util.Map, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Date r11;
        java.util.HashMap $r4;
        java.lang.Integer r5, r6;
        java.util.Map r3, $r16;
        java.lang.String r1, r2, r7, r8, r9, r10, r12, r13, r14, r15;
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        r5 := @parameter3: java.lang.Integer;

        r6 := @parameter4: java.lang.Integer;

        r7 := @parameter5: java.lang.String;

        r8 := @parameter6: java.lang.String;

        r9 := @parameter7: java.lang.String;

        r10 := @parameter8: java.lang.String;

        r11 := @parameter9: java.util.Date;

        r12 := @parameter10: java.lang.String;

        r13 := @parameter11: java.lang.String;

        r14 := @parameter12: java.lang.String;

        r15 := @parameter13: java.lang.String;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentType> = r1;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentEncoding> = r2;

        if r3 != null goto label1;

        $r16 = null;

        goto label2;

     label1:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>(r3);

        $r16 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4);

     label2:
        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Map headers> = $r16;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer deliveryMode> = r5;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer priority> = r6;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String correlationId> = r7;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String replyTo> = r8;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String expiration> = r9;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String messageId> = r10;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Date timestamp> = r11;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String type> = r12;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String userId> = r13;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String appId> = r14;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String clusterId> = r15;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQBasicProperties r0;

        r0 := @this: com.rabbitmq.client.impl.AMQBasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQContentHeader: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQContentHeader: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQContentHeader r0;

        r0 := @this: com.rabbitmq.client.impl.AMQContentHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.AMQContentHeader: long bodySize> = 0L;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
Related methods: 4
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
    public com.rabbitmq.client.AMQP$BasicProperties build()
    {
        java.util.Date $r6;
        java.lang.Integer $r11, $r12;
        java.util.Map $r13;
        com.rabbitmq.client.AMQP$BasicProperties$Builder r1;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r14, $r15;
        com.rabbitmq.client.AMQP$BasicProperties $r0;

        r1 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        $r0 = new com.rabbitmq.client.AMQP$BasicProperties;

        $r15 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentType>;

        $r14 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentEncoding>;

        $r13 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Map headers>;

        $r12 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer deliveryMode>;

        $r11 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer priority>;

        $r10 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String correlationId>;

        $r9 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String replyTo>;

        $r8 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String expiration>;

        $r7 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String messageId>;

        $r6 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Date timestamp>;

        $r5 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String type>;

        $r4 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String userId>;

        $r3 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String appId>;

        $r2 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String clusterId>;

        specialinvoke $r0.<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4, $r3, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.util.Map, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Date r11;
        java.util.HashMap $r4;
        java.lang.Integer r5, r6;
        java.util.Map r3, $r16;
        java.lang.String r1, r2, r7, r8, r9, r10, r12, r13, r14, r15;
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        r5 := @parameter3: java.lang.Integer;

        r6 := @parameter4: java.lang.Integer;

        r7 := @parameter5: java.lang.String;

        r8 := @parameter6: java.lang.String;

        r9 := @parameter7: java.lang.String;

        r10 := @parameter8: java.lang.String;

        r11 := @parameter9: java.util.Date;

        r12 := @parameter10: java.lang.String;

        r13 := @parameter11: java.lang.String;

        r14 := @parameter12: java.lang.String;

        r15 := @parameter13: java.lang.String;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentType> = r1;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentEncoding> = r2;

        if r3 != null goto label1;

        $r16 = null;

        goto label2;

     label1:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>(r3);

        $r16 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4);

     label2:
        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Map headers> = $r16;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer deliveryMode> = r5;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer priority> = r6;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String correlationId> = r7;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String replyTo> = r8;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String expiration> = r9;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String messageId> = r10;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Date timestamp> = r11;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String type> = r12;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String userId> = r13;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String appId> = r14;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String clusterId> = r15;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQBasicProperties r0;

        r0 := @this: com.rabbitmq.client.impl.AMQBasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQContentHeader: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQContentHeader: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQContentHeader r0;

        r0 := @this: com.rabbitmq.client.impl.AMQContentHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.AMQContentHeader: long bodySize> = 0L;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
Related methods: 4
caller is : <reactor.rabbitmq.RpcClient$RpcSubscriber: void onNext(reactor.rabbitmq.RpcClient$RpcRequest)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
    public com.rabbitmq.client.AMQP$BasicProperties build()
    {
        java.util.Date $r6;
        java.lang.Integer $r11, $r12;
        java.util.Map $r13;
        com.rabbitmq.client.AMQP$BasicProperties$Builder r1;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r14, $r15;
        com.rabbitmq.client.AMQP$BasicProperties $r0;

        r1 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        $r0 = new com.rabbitmq.client.AMQP$BasicProperties;

        $r15 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentType>;

        $r14 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentEncoding>;

        $r13 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Map headers>;

        $r12 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer deliveryMode>;

        $r11 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer priority>;

        $r10 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String correlationId>;

        $r9 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String replyTo>;

        $r8 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String expiration>;

        $r7 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String messageId>;

        $r6 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Date timestamp>;

        $r5 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String type>;

        $r4 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String userId>;

        $r3 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String appId>;

        $r2 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String clusterId>;

        specialinvoke $r0.<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4, $r3, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.util.Map, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Date r11;
        java.util.HashMap $r4;
        java.lang.Integer r5, r6;
        java.util.Map r3, $r16;
        java.lang.String r1, r2, r7, r8, r9, r10, r12, r13, r14, r15;
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        r5 := @parameter3: java.lang.Integer;

        r6 := @parameter4: java.lang.Integer;

        r7 := @parameter5: java.lang.String;

        r8 := @parameter6: java.lang.String;

        r9 := @parameter7: java.lang.String;

        r10 := @parameter8: java.lang.String;

        r11 := @parameter9: java.util.Date;

        r12 := @parameter10: java.lang.String;

        r13 := @parameter11: java.lang.String;

        r14 := @parameter12: java.lang.String;

        r15 := @parameter13: java.lang.String;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentType> = r1;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentEncoding> = r2;

        if r3 != null goto label1;

        $r16 = null;

        goto label2;

     label1:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>(r3);

        $r16 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4);

     label2:
        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Map headers> = $r16;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer deliveryMode> = r5;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer priority> = r6;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String correlationId> = r7;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String replyTo> = r8;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String expiration> = r9;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String messageId> = r10;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Date timestamp> = r11;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String type> = r12;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String userId> = r13;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String appId> = r14;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String clusterId> = r15;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQBasicProperties r0;

        r0 := @this: com.rabbitmq.client.impl.AMQBasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQContentHeader: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQContentHeader: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQContentHeader r0;

        r0 := @this: com.rabbitmq.client.impl.AMQContentHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.AMQContentHeader: long bodySize> = 0L;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
Related methods: 4
caller is : <reactor.rabbitmq.Sender$PublishConfirmSubscriber: com.rabbitmq.client.AMQP$BasicProperties addReactorRabbitMQDeliveryTag(com.rabbitmq.client.AMQP$BasicProperties,long)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties build()>
    public com.rabbitmq.client.AMQP$BasicProperties build()
    {
        java.util.Date $r6;
        java.lang.Integer $r11, $r12;
        java.util.Map $r13;
        com.rabbitmq.client.AMQP$BasicProperties$Builder r1;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r14, $r15;
        com.rabbitmq.client.AMQP$BasicProperties $r0;

        r1 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        $r0 = new com.rabbitmq.client.AMQP$BasicProperties;

        $r15 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentType>;

        $r14 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentEncoding>;

        $r13 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Map headers>;

        $r12 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer deliveryMode>;

        $r11 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer priority>;

        $r10 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String correlationId>;

        $r9 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String replyTo>;

        $r8 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String expiration>;

        $r7 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String messageId>;

        $r6 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Date timestamp>;

        $r5 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String type>;

        $r4 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String userId>;

        $r3 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String appId>;

        $r2 = r1.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String clusterId>;

        specialinvoke $r0.<com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r15, $r14, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4, $r3, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.util.Map, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Date r11;
        java.util.HashMap $r4;
        java.lang.Integer r5, r6;
        java.util.Map r3, $r16;
        java.lang.String r1, r2, r7, r8, r9, r10, r12, r13, r14, r15;
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        r5 := @parameter3: java.lang.Integer;

        r6 := @parameter4: java.lang.Integer;

        r7 := @parameter5: java.lang.String;

        r8 := @parameter6: java.lang.String;

        r9 := @parameter7: java.lang.String;

        r10 := @parameter8: java.lang.String;

        r11 := @parameter9: java.util.Date;

        r12 := @parameter10: java.lang.String;

        r13 := @parameter11: java.lang.String;

        r14 := @parameter12: java.lang.String;

        r15 := @parameter13: java.lang.String;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentType> = r1;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentEncoding> = r2;

        if r3 != null goto label1;

        $r16 = null;

        goto label2;

     label1:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>(r3);

        $r16 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4);

     label2:
        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Map headers> = $r16;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer deliveryMode> = r5;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer priority> = r6;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String correlationId> = r7;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String replyTo> = r8;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String expiration> = r9;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String messageId> = r10;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Date timestamp> = r11;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String type> = r12;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String userId> = r13;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String appId> = r14;

        r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String clusterId> = r15;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQBasicProperties r0;

        r0 := @this: com.rabbitmq.client.impl.AMQBasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQContentHeader: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQContentHeader: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQContentHeader r0;

        r0 := @this: com.rabbitmq.client.impl.AMQContentHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.AMQContentHeader: long bodySize> = 0L;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setPort(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
    public void setPort(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
Related methods: 1
caller is : <com.fastchar.extend.rabbitmq.FastRabbitMQProvider: com.rabbitmq.client.ConnectionFactory getConnectFactory()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setPort(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
    public void setPort(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
Related methods: 1
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setPort(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
    public void setPort(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
Related methods: 1
caller is : <de.iip_ecosphere.platform.transport.connectors.rabbitmq.RabbitMqAmqpTransportConnector: void connect(de.iip_ecosphere.platform.transport.connectors.TransportParameter)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setPort(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
    public void setPort(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
Related methods: 1
caller is : <com.mware.core.model.workQueue.RabbitMQUtils: com.rabbitmq.client.Address[] getAddresses(com.mware.core.config.Configuration)>
callee is : <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
Related methods: 1
caller is : <com.mware.core.model.workQueue.RabbitMQUtils: com.rabbitmq.client.Address[] createAddresses(java.lang.String[])>
callee is : <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
Related methods: 1
caller is : <org.apache.james.backends.rabbitmq.RabbitMQConnectionFactory: com.rabbitmq.client.Address lambda$createConnection$2(org.apache.james.util.Host)>
callee is : <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
Related methods: 1
caller is : <net.jodah.lyra.ConnectionOptions: com.rabbitmq.client.Address[] getAddresses()>
callee is : <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
Related methods: 1
caller is : <net.jodah.lyra.ConnectionOptions: com.rabbitmq.client.Address[] getAddresses()>
callee is : <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
Related methods: 1
caller is : <net.jodah.lyra.ConnectionOptions: com.rabbitmq.client.Address[] getAddresses()>
callee is : <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
Related methods: 1
caller is : <net.jodah.lyra.internal.util.Addresses: com.rabbitmq.client.Address[] addressesFor(java.lang.String[],int)>
callee is : <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
    public void setVirtualHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
    public void setVirtualHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
Related methods: 1
caller is : <com.fastchar.extend.rabbitmq.FastRabbitMQProvider: com.rabbitmq.client.ConnectionFactory getConnectFactory()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
    public void setVirtualHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
Related methods: 1
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
    public void setVirtualHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
Related methods: 1
caller is : <com.alibaba.otter.canal.client.rabbitmq.RabbitMQCanalConnector: void connect()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
    public void setVirtualHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
Related methods: 1
caller is : <org.springframework.cloud.service.messaging.RabbitConnectionFactoryCreator: com.rabbitmq.client.ConnectionFactory createRabbitConnectionFactory(org.springframework.cloud.service.common.AmqpServiceInfo)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>

Method: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
    public void setAutomaticRecoveryEnabled(boolean)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = z0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>

Method: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
    public void setAutomaticRecoveryEnabled(boolean)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = z0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
Related methods: 1
caller is : <com.mware.core.model.workQueue.RabbitMQUtils: com.rabbitmq.client.Connection openConnection(com.rabbitmq.client.Address[],com.mware.core.config.Configuration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>

Method: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
    public void setAutomaticRecoveryEnabled(boolean)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = z0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>

Method: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
    public void setAutomaticRecoveryEnabled(boolean)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = z0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
Related methods: 1
caller is : <com.alibaba.otter.canal.client.rabbitmq.RabbitMQCanalConnector: void connect()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>

Method: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
    public void setAutomaticRecoveryEnabled(boolean)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = z0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
Related methods: 1
caller is : <net.jodah.lyra.ConnectionOptions: com.rabbitmq.client.ConnectionFactory makeConnectionFactory()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>

Method: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
    public void setAutomaticRecoveryEnabled(boolean)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = z0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
Related methods: 1
caller is : <de.iip_ecosphere.platform.transport.connectors.rabbitmq.RabbitMqAmqpTransportConnector: void connect(de.iip_ecosphere.platform.transport.connectors.TransportParameter)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>

Method: <com.rabbitmq.client.ConnectionFactory: void setAutomaticRecoveryEnabled(boolean)>
    public void setAutomaticRecoveryEnabled(boolean)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery> = z0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>
    public void setConnectionTimeout(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TCP connection timeout cannot be negative");

        throw $r1;

     label1:
        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>
Related methods: 1
caller is : <org.apache.james.backends.rabbitmq.RabbitMQConnectionFactory: com.rabbitmq.client.ConnectionFactory 'from'(org.apache.james.backends.rabbitmq.RabbitMQConfiguration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>
    public void setConnectionTimeout(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TCP connection timeout cannot be negative");

        throw $r1;

     label1:
        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>
    public void setConnectionTimeout(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TCP connection timeout cannot be negative");

        throw $r1;

     label1:
        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>
Related methods: 1
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setConnectionTimeout(int)>
    public void setConnectionTimeout(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TCP connection timeout cannot be negative");

        throw $r1;

     label1:
        r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties: java.util.Map getHeaders()>
Related methods: 1
caller is : <reactor.rabbitmq.Sender$PublishConfirmSubscriber: com.rabbitmq.client.AMQP$BasicProperties addReactorRabbitMQDeliveryTag(com.rabbitmq.client.AMQP$BasicProperties,long)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties: java.util.Map getHeaders()>

Method: <com.rabbitmq.client.AMQP$BasicProperties: java.util.Map getHeaders()>
    public java.util.Map getHeaders()
    {
        com.rabbitmq.client.AMQP$BasicProperties r0;
        java.util.Map $r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        $r1 = r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Map headers>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties: java.util.Map getHeaders()>
Related methods: 1
caller is : <reactor.rabbitmq.Sender$PublishConfirmSubscriber: com.rabbitmq.client.AMQP$BasicProperties addReactorRabbitMQDeliveryTag(com.rabbitmq.client.AMQP$BasicProperties,long)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties: java.util.Map getHeaders()>

Method: <com.rabbitmq.client.AMQP$BasicProperties: java.util.Map getHeaders()>
    public java.util.Map getHeaders()
    {
        com.rabbitmq.client.AMQP$BasicProperties r0;
        java.util.Map $r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        $r1 = r0.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Map headers>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>
Related methods: 8
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>
    public void setRequestedHeartbeat(int)
    {
        java.lang.Object[] $r1;
        org.slf4j.Logger $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.Integer $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i5;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>(i0);

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = $i1;

        $i2 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        if $i2 == i0 goto label1;

        $r2 = <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER>;

        $r1 = newarray (java.lang.Object)[3];

        $i5 = (int) 65535;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1[0] = $r3;

        $i3 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[2] = $r5;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Requested heartbeat must be between 0 and {}, value has been set to {} instead of {}", $r1);

     label1:
        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>
    public static int ensureUnsignedShort(int)
    {
        int i0, $i2, $i4;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return 0;

     label1:
        $i2 = (int) 65535;

        if i0 <= $i2 goto label2;

        $i4 = (int) 65535;

        return $i4;

     label2:
        return i0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>
Related methods: 8
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>
    public void setRequestedHeartbeat(int)
    {
        java.lang.Object[] $r1;
        org.slf4j.Logger $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.Integer $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i5;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>(i0);

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = $i1;

        $i2 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        if $i2 == i0 goto label1;

        $r2 = <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER>;

        $r1 = newarray (java.lang.Object)[3];

        $i5 = (int) 65535;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1[0] = $r3;

        $i3 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[2] = $r5;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Requested heartbeat must be between 0 and {}, value has been set to {} instead of {}", $r1);

     label1:
        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>
    public static int ensureUnsignedShort(int)
    {
        int i0, $i2, $i4;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return 0;

     label1:
        $i2 = (int) 65535;

        if i0 <= $i2 goto label2;

        $i4 = (int) 65535;

        return $i4;

     label2:
        return i0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>
Related methods: 8
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setRequestedHeartbeat(int)>
    public void setRequestedHeartbeat(int)
    {
        java.lang.Object[] $r1;
        org.slf4j.Logger $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.Integer $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i5;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>(i0);

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat> = $i1;

        $i2 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        if $i2 == i0 goto label1;

        $r2 = <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER>;

        $r1 = newarray (java.lang.Object)[3];

        $i5 = (int) 65535;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1[0] = $r3;

        $i3 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[2] = $r5;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Requested heartbeat must be between 0 and {}, value has been set to {} instead of {}", $r1);

     label1:
        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>
    public static int ensureUnsignedShort(int)
    {
        int i0, $i2, $i4;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return 0;

     label1:
        $i2 = (int) 65535;

        if i0 <= $i2 goto label2;

        $i4 = (int) 65535;

        return $i4;

     label2:
        return i0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void useNio()>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void useNio()>

Method: <com.rabbitmq.client.ConnectionFactory: void useNio()>
    public void useNio()
    {
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void useNio()>
Related methods: 1
caller is : <reactor.rabbitmq.ReceiverOptions: com.rabbitmq.client.ConnectionFactory lambda$new$0()>
callee is : <com.rabbitmq.client.ConnectionFactory: void useNio()>

Method: <com.rabbitmq.client.ConnectionFactory: void useNio()>
    public void useNio()
    {
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void useNio()>
Related methods: 1
caller is : <reactor.rabbitmq.SenderOptions: com.rabbitmq.client.ConnectionFactory lambda$new$0()>
callee is : <com.rabbitmq.client.ConnectionFactory: void useNio()>

Method: <com.rabbitmq.client.ConnectionFactory: void useNio()>
    public void useNio()
    {
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean nio> = 1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
Related methods: 3
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: void basicPublish(java.lang.String,java.lang.String,io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>

Method: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQBasicProperties r0;

        r0 := @this: com.rabbitmq.client.impl.AMQBasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQContentHeader: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQContentHeader: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQContentHeader r0;

        r0 := @this: com.rabbitmq.client.impl.AMQContentHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.AMQContentHeader: long bodySize> = 0L;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
Related methods: 3
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: io.vertx.core.Future basicPublish(java.lang.String,java.lang.String,io.vertx.core.buffer.Buffer)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>

Method: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQBasicProperties r0;

        r0 := @this: com.rabbitmq.client.impl.AMQBasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQContentHeader: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQContentHeader: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQContentHeader r0;

        r0 := @this: com.rabbitmq.client.impl.AMQContentHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.AMQContentHeader: long bodySize> = 0L;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
Related methods: 3
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>

Method: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQBasicProperties r0;

        r0 := @this: com.rabbitmq.client.impl.AMQBasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQContentHeader: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQContentHeader: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQContentHeader r0;

        r0 := @this: com.rabbitmq.client.impl.AMQContentHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.AMQContentHeader: long bodySize> = 0L;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
Related methods: 3
caller is : <org.apache.james.backends.rabbitmq.Constants: void <clinit>()>
callee is : <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>

Method: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQBasicProperties r0;

        r0 := @this: com.rabbitmq.client.impl.AMQBasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQContentHeader: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQContentHeader: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQContentHeader r0;

        r0 := @this: com.rabbitmq.client.impl.AMQContentHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.AMQContentHeader: long bodySize> = 0L;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
Related methods: 3
caller is : <reactor.rabbitmq.Sender$PublishConfirmSubscriber: com.rabbitmq.client.AMQP$BasicProperties addReactorRabbitMQDeliveryTag(com.rabbitmq.client.AMQP$BasicProperties,long)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>

Method: <com.rabbitmq.client.AMQP$BasicProperties: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQBasicProperties: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQBasicProperties r0;

        r0 := @this: com.rabbitmq.client.impl.AMQBasicProperties;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQContentHeader: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.AMQContentHeader: void <init>()>
    protected void <init>()
    {
        com.rabbitmq.client.impl.AMQContentHeader r0;

        r0 := @this: com.rabbitmq.client.impl.AMQContentHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.AMQContentHeader: long bodySize> = 0L;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>
Related methods: 4
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>
    public void useSslProtocol(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        javax.net.ssl.SSLSocketFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)>(r1);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory> = $r2;

        $r3 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void setSocketFactory(javax.net.SocketFactory)>($r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)>
    public static com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)
    {
        com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199 $r1;
        javax.net.ssl.SSLContext $r0;

        $r0 := @parameter0: javax.net.ssl.SSLContext;

        $r1 = new com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199;

        specialinvoke $r1.<com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: void <init>(javax.net.ssl.SSLContext)>($r0);

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: void <init>(javax.net.ssl.SSLContext)>
    public void <init>(javax.net.ssl.SSLContext)
    {
        com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199 $r0;
        javax.net.ssl.SSLContext $r1;

        $r0 := @this: com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199;

        $r1 := @parameter0: javax.net.ssl.SSLContext;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: javax.net.ssl.SSLContext cap0> = $r1;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setSocketFactory(javax.net.SocketFactory)>
    public void setSocketFactory(javax.net.SocketFactory)
    {
        javax.net.SocketFactory r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: javax.net.SocketFactory;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>
Related methods: 4
caller is : <de.iip_ecosphere.platform.transport.connectors.rabbitmq.RabbitMqAmqpTransportConnector: void connect(de.iip_ecosphere.platform.transport.connectors.TransportParameter)>
callee is : <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>
    public void useSslProtocol(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        javax.net.ssl.SSLSocketFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)>(r1);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory> = $r2;

        $r3 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void setSocketFactory(javax.net.SocketFactory)>($r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)>
    public static com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)
    {
        com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199 $r1;
        javax.net.ssl.SSLContext $r0;

        $r0 := @parameter0: javax.net.ssl.SSLContext;

        $r1 = new com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199;

        specialinvoke $r1.<com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: void <init>(javax.net.ssl.SSLContext)>($r0);

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: void <init>(javax.net.ssl.SSLContext)>
    public void <init>(javax.net.ssl.SSLContext)
    {
        com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199 $r0;
        javax.net.ssl.SSLContext $r1;

        $r0 := @this: com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199;

        $r1 := @parameter0: javax.net.ssl.SSLContext;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: javax.net.ssl.SSLContext cap0> = $r1;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setSocketFactory(javax.net.SocketFactory)>
    public void setSocketFactory(javax.net.SocketFactory)
    {
        javax.net.SocketFactory r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: javax.net.SocketFactory;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer getDeliveryMode()>
Related methods: 1
caller is : <com.mware.core.model.workQueue.RabbitMQWorkQueueRepository: void start()>
callee is : <com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer getDeliveryMode()>

Method: <com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer getDeliveryMode()>
    public java.lang.Integer getDeliveryMode()
    {
        java.lang.Integer $r1;
        com.rabbitmq.client.AMQP$BasicProperties r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        $r1 = r0.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer deliveryMode>;

        return $r1;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
Related methods: 1
caller is : <com.mware.core.model.workQueue.RabbitMQWorkQueueRepository: void pushOnQueue(java.lang.String,byte[],com.mware.core.model.workQueue.Priority)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
Related methods: 1
caller is : <reactor.rabbitmq.RpcClient$RpcSubscriber: void onNext(reactor.rabbitmq.RpcClient$RpcRequest)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Map headers> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Map headers> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender$PublishConfirmSubscriber: com.rabbitmq.client.AMQP$BasicProperties addReactorRabbitMQDeliveryTag(com.rabbitmq.client.AMQP$BasicProperties,long)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Map headers> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setUri(java.lang.String)>
Related methods: 28
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setUri(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void setUri(java.lang.String)>
    public void setUri(java.lang.String) throws java.net.URISyntaxException, java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        java.net.URI $r1;
        java.lang.String r2;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.net.URI;

        specialinvoke $r1.<java.net.URI: void <init>(java.lang.String)>(r2);

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void setUri(java.net.URI)>($r1);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setUri(java.net.URI)>
    public void setUri(java.net.URI) throws java.net.URISyntaxException, java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        java.net.URI r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r9, $r11, $r21, $r22, $r31, $r32, $r37, $r39, $r41;
        java.lang.String[] $r24;
        com.rabbitmq.client.SslContextFactory $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r10, $r12, $r15, $r16, $r17, $r18, $r23, $r25, $r26, $r27, $r28, $r33, $r34, $r35, $r36;
        com.rabbitmq.client.ConnectionFactory r13;
        java.lang.IllegalArgumentException $r38, $r40, $r42;

        r13 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.net.URI;

        $r1 = "amqp";

        $r2 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label01;

        goto label03;

     label01:
        $r4 = "amqps";

        $r5 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label02;

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setPort(int)>(5671);

        $r14 = r13.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        if $r14 != null goto label03;

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol()>();

        goto label03;

     label02:
        $r38 = new java.lang.IllegalArgumentException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong scheme in AMQP URI: ");

        $r10 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r38;

     label03:
        $r34 = virtualinvoke r0.<java.net.URI: java.lang.String getHost()>();

        if $r34 == null goto label04;

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>($r34);

     label04:
        $i0 = virtualinvoke r0.<java.net.URI: int getPort()>();

        $i7 = (int) -1;

        if $i0 == $i7 goto label05;

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setPort(int)>($i0);

     label05:
        $r15 = virtualinvoke r0.<java.net.URI: java.lang.String getRawUserInfo()>();

        if $r15 == null goto label07;

        $r24 = virtualinvoke $r15.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i4 = lengthof $r24;

        if $i4 <= 2 goto label06;

        $r40 = new java.lang.IllegalArgumentException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad user info in AMQP URI: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r40;

     label06:
        $r25 = $r24[0];

        $r26 = staticinvoke <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>($r25);

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>($r26);

        $i5 = lengthof $r24;

        if $i5 != 2 goto label07;

        $r27 = $r24[1];

        $r28 = staticinvoke <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>($r27);

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>($r28);

     label07:
        $r35 = virtualinvoke r0.<java.net.URI: java.lang.String getRawPath()>();

        if $r35 == null goto label09;

        $i2 = virtualinvoke $r35.<java.lang.String: int length()>();

        if $i2 <= 0 goto label09;

        $i3 = virtualinvoke $r35.<java.lang.String: int indexOf(int,int)>(47, 1);

        $i9 = (int) -1;

        if $i3 == $i9 goto label08;

        $r42 = new java.lang.IllegalArgumentException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple segments in path of AMQP URI: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r42;

     label08:
        $r16 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int)>(1);

        $r18 = staticinvoke <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>($r17);

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>($r18);

     label09:
        $r36 = virtualinvoke r0.<java.net.URI: java.lang.String getRawQuery()>();

        if $r36 == null goto label10;

        $i1 = virtualinvoke $r36.<java.lang.String: int length()>();

        if $i1 <= 0 goto label10;

        specialinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setQuery(java.lang.String)>($r36);

     label10:
        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setQuery(java.lang.String)>
    private void setQuery(java.lang.String)
    {
        java.lang.Throwable $r20;
        java.util.HashMap $r0;
        java.lang.String[] $r2, $r16;
        java.util.Map $r6;
        int $i0, i1, i2;
        java.util.function.BiConsumer r24;
        java.lang.String r1, $r11, $r13, r15, $r17, $r18, $r19, r22;
        boolean $z0;
        java.util.Map$Entry r23;
        java.util.Iterator $r4;
        com.rabbitmq.client.ConnectionFactory r9;
        java.util.Set $r3;
        java.lang.IllegalArgumentException $r21;
        java.lang.Object $r5, $r7, $r8, $r10, $r12, $r14;

        r9 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

     label01:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("&");

        i1 = lengthof $r2;

        i2 = 0;

     label02:
        if i2 >= i1 goto label04;

        r15 = $r2[i2];

        $r16 = virtualinvoke r15.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $r17 = $r16[0];

        $r18 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r17, "US-ASCII");

        r22 = null;

        $i0 = lengthof $r16;

        if $i0 <= 1 goto label03;

        $r19 = $r16[1];

        r22 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r19, "US-ASCII");

     label03:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r22);

        i2 = i2 + 1;

        goto label02;

     label04:
        goto label06;

     label05:
        $r20 := @caughtexception;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot parse the query parameters", $r20);

        throw $r21;

     label06:
        $r3 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r5;

        $r6 = <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS>;

        $r7 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r24 = (java.util.function.BiConsumer) $r8;

        if r24 == null goto label08;

        $r14 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r24.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r14, r9);

        goto label09;

     label08:
        $r10 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        $r12 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.String) $r12;

        virtualinvoke r9.<com.rabbitmq.client.ConnectionFactory: void processUriQueryParameter(java.lang.String,java.lang.String)>($r11, $r13);

     label09:
        goto label07;

     label10:
        return;

        catch java.io.IOException from label01 to label04 with label05;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void processUriQueryParameter(java.lang.String,java.lang.String)>
    protected void processUriQueryParameter(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
    public void setVirtualHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = r1;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
    public void setPassword(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String $r3, r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r4 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r3 = interfaceinvoke $r2.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>($r3, r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username>;

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
    public void setUsername(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r3;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String r2, $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r4 = interfaceinvoke $r3.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>(r2, $r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password>;

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
    public void setPort(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = i0;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
    public void setHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = r1;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol()>
    public void useSslProtocol() throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        javax.net.ssl.SSLContext $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        javax.net.ssl.SSLParameters $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>();

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getSupportedSSLParameters()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()>();

        $r4 = staticinvoke <com.rabbitmq.client.ConnectionFactory: java.lang.String computeDefaultTlsProtocol(java.lang.String[])>($r3);

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String)>($r4);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String)>
    public void useSslProtocol(java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        java.lang.String r1;
        com.rabbitmq.client.TrustEverythingTrustManager $r2;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.rabbitmq.client.TrustEverythingTrustManager;

        specialinvoke $r2.<com.rabbitmq.client.TrustEverythingTrustManager: void <init>()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String,javax.net.ssl.TrustManager)>(r1, $r2);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String computeDefaultTlsProtocol(java.lang.String[])>
    public static java.lang.String computeDefaultTlsProtocol(java.lang.String[])
    {
        int i0, i1;
        java.lang.String[] r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label3;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $r2 = "TLSv1.2";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        return r1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return "TLSv1";
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
    public void setPort(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = i0;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>
    private static java.lang.String uriDecode(java.lang.String)
    {
        java.lang.Throwable $r3;
        java.lang.String r0, $r1, $r2;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "%2B");

        $r2 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r1, "US-ASCII");

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>
    private static java.lang.String uriDecode(java.lang.String)
    {
        java.lang.Throwable $r3;
        java.lang.String r0, $r1, $r2;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "%2B");

        $r2 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r1, "US-ASCII");

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>
    private static java.lang.String uriDecode(java.lang.String)
    {
        java.lang.Throwable $r3;
        java.lang.String r0, $r1, $r2;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "%2B");

        $r2 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r1, "US-ASCII");

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setRequestedChannelMax(int)>
Related methods: 8
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setRequestedChannelMax(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setRequestedChannelMax(int)>
    public void setRequestedChannelMax(int)
    {
        java.lang.Object[] $r1;
        org.slf4j.Logger $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.Integer $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i5;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>(i0);

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = $i1;

        $i2 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax>;

        if $i2 == i0 goto label1;

        $r2 = <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER>;

        $r1 = newarray (java.lang.Object)[3];

        $i5 = (int) 65535;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1[0] = $r3;

        $i3 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[2] = $r5;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Requested channel max must be between 0 and {}, value has been set to {} instead of {}", $r1);

     label1:
        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>
    public static int ensureUnsignedShort(int)
    {
        int i0, $i2, $i4;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return 0;

     label1:
        $i2 = (int) 65535;

        if i0 <= $i2 goto label2;

        $i4 = (int) 65535;

        return $i4;

     label2:
        return i0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setRequestedChannelMax(int)>
Related methods: 8
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setRequestedChannelMax(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setRequestedChannelMax(int)>
    public void setRequestedChannelMax(int)
    {
        java.lang.Object[] $r1;
        org.slf4j.Logger $r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.Integer $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i5;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>(i0);

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax> = $i1;

        $i2 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax>;

        if $i2 == i0 goto label1;

        $r2 = <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER>;

        $r1 = newarray (java.lang.Object)[3];

        $i5 = (int) 65535;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1[0] = $r3;

        $i3 = r0.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[2] = $r5;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Requested channel max must be between 0 and {}, value has been set to {} instead of {}", $r1);

     label1:
        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>
    public static int ensureUnsignedShort(int)
    {
        int i0, $i2, $i4;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return 0;

     label1:
        $i2 = (int) 65535;

        if i0 <= $i2 goto label2;

        $i4 = (int) 65535;

        return $i4;

     label2:
        return i0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.Integer r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.Integer;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer deliveryMode> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>
Related methods: 1
caller is : <com.mware.core.model.workQueue.RabbitMQWorkQueueRepository: void pushOnQueue(java.lang.String,byte[],com.mware.core.model.workQueue.Priority)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.Integer r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.Integer;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer deliveryMode> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.Integer r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.Integer;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer deliveryMode> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.Integer r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.Integer;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer priority> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>
Related methods: 1
caller is : <com.mware.core.model.workQueue.RabbitMQWorkQueueRepository: void pushOnQueue(java.lang.String,byte[],com.mware.core.model.workQueue.Priority)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.Integer r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.Integer;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer priority> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.Integer r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.Integer;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer priority> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String correlationId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String correlationId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.RpcClient$RpcSubscriber: void onNext(reactor.rabbitmq.RpcClient$RpcRequest)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String correlationId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String replyTo> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String replyTo> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.RpcClient$RpcSubscriber: void onNext(reactor.rabbitmq.RpcClient$RpcRequest)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String replyTo> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(int)>
Related methods: 1
caller is : <org.apache.james.backends.rabbitmq.RabbitMQConnectionFactory: com.rabbitmq.client.ConnectionFactory 'from'(org.apache.james.backends.rabbitmq.RabbitMQConfiguration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(int)>
    public void setNetworkRecoveryInterval(int)
    {
        int i0;
        long $l1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = $l1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(int)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(int)>
    public void setNetworkRecoveryInterval(int)
    {
        int i0;
        long $l1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = $l1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(int)>
Related methods: 1
caller is : <com.alibaba.otter.canal.client.rabbitmq.RabbitMQCanalConnector: void connect()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(int)>
    public void setNetworkRecoveryInterval(int)
    {
        int i0;
        long $l1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = $l1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setClientProperties(java.util.Map)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setClientProperties(java.util.Map)>

Method: <com.rabbitmq.client.ConnectionFactory: void setClientProperties(java.util.Map)>
    public void setClientProperties(java.util.Map)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.Map _clientProperties> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setHandshakeTimeout(int)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setHandshakeTimeout(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setHandshakeTimeout(int)>
    public void setHandshakeTimeout(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("handshake timeout cannot be negative");

        throw $r1;

     label1:
        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setHandshakeTimeout(int)>
Related methods: 1
caller is : <org.apache.james.backends.rabbitmq.RabbitMQConnectionFactory: com.rabbitmq.client.ConnectionFactory 'from'(org.apache.james.backends.rabbitmq.RabbitMQConfiguration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setHandshakeTimeout(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setHandshakeTimeout(int)>
    public void setHandshakeTimeout(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("handshake timeout cannot be negative");

        throw $r1;

     label1:
        r0.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setSaslConfig(com.rabbitmq.client.SaslConfig)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setSaslConfig(com.rabbitmq.client.SaslConfig)>

Method: <com.rabbitmq.client.ConnectionFactory: void setSaslConfig(com.rabbitmq.client.SaslConfig)>
    public void setSaslConfig(com.rabbitmq.client.SaslConfig)
    {
        com.rabbitmq.client.SaslConfig r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.SaslConfig;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>

Method: <com.rabbitmq.client.ConnectionFactory: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>
    public void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.impl.CredentialsProvider;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>
Related methods: 1
caller is : <com.alibaba.otter.canal.client.rabbitmq.RabbitMQCanalConnector: void connect()>
callee is : <com.rabbitmq.client.ConnectionFactory: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>

Method: <com.rabbitmq.client.ConnectionFactory: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>
    public void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.impl.CredentialsProvider;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setMetricsCollector(com.rabbitmq.client.MetricsCollector)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setMetricsCollector(com.rabbitmq.client.MetricsCollector)>

Method: <com.rabbitmq.client.ConnectionFactory: void setMetricsCollector(com.rabbitmq.client.MetricsCollector)>
    public void setMetricsCollector(com.rabbitmq.client.MetricsCollector)
    {
        com.rabbitmq.client.MetricsCollector r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.MetricsCollector;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.lang.String)>
Related methods: 34
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.Connection $r6;
        java.util.List $r4;
        int $i0;
        java.lang.String $r3, r5;
        java.util.concurrent.ExecutorService $r2;
        com.rabbitmq.client.Address $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r5 := @parameter0: java.lang.String;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService sharedExecutor>;

        $r1 = new com.rabbitmq.client.Address;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String getHost()>();

        $i0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: int getPort()>();

        specialinvoke $r1.<com.rabbitmq.client.Address: void <init>(java.lang.String,int)>($r3, $i0);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        $r6 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>($r2, $r4, r5);

        return $r6;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, java.util.List, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.String r4;
        com.rabbitmq.client.Connection $r5;
        java.util.concurrent.ExecutorService r1;
        com.rabbitmq.client.AddressResolver $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        r2 := @parameter1: java.util.List;

        r4 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>(r2);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>(r1, $r3, r4);

        return $r5;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>
    protected com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)
    {
        com.rabbitmq.client.ConnectionFactory r4;
        com.rabbitmq.client.ListAddressResolver $r6;
        java.lang.IllegalArgumentException $r1;
        java.util.List r0;
        com.rabbitmq.client.DnsRecordIpAddressResolver $r2;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, $z1;
        com.rabbitmq.client.Address $r5;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide at least one address to connect to");

        throw $r1;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 1 goto label3;

        $r6 = new com.rabbitmq.client.ListAddressResolver;

        specialinvoke $r6.<com.rabbitmq.client.ListAddressResolver: void <init>(java.util.List)>(r0);

        return $r6;

     label3:
        $r2 = new com.rabbitmq.client.DnsRecordIpAddressResolver;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (com.rabbitmq.client.Address) $r3;

        $z1 = virtualinvoke r4.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        specialinvoke $r2.<com.rabbitmq.client.DnsRecordIpAddressResolver: void <init>(com.rabbitmq.client.Address,boolean)>($r5, $z1);

        return $r2;
    }

Method: <com.rabbitmq.client.ConnectionFactory: boolean isSSL()>
    public boolean isSSL()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        boolean $z0, $z1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>();

        $z0 = $r1 instanceof javax.net.ssl.SSLSocketFactory;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        if $r2 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.rabbitmq.client.ListAddressResolver: void <init>(java.util.List)>
    public void <init>(java.util.List)
    {
        java.util.List r1;
        com.rabbitmq.client.ListAddressResolver r0;

        r0 := @this: com.rabbitmq.client.ListAddressResolver;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ListAddressResolver: java.util.List addresses> = r1;

        return;
    }

Method: <com.rabbitmq.client.DnsRecordIpAddressResolver: void <init>(com.rabbitmq.client.Address,boolean)>
    public void <init>(com.rabbitmq.client.Address, boolean)
    {
        com.rabbitmq.client.DnsRecordIpAddressResolver r0;
        com.rabbitmq.client.Address r1;
        boolean z0;

        r0 := @this: com.rabbitmq.client.DnsRecordIpAddressResolver;

        r1 := @parameter0: com.rabbitmq.client.Address;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address> = r1;

        r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: boolean ssl> = z0;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, com.rabbitmq.client.AddressResolver, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.lang.Throwable $r24, $r25, r26;
        com.rabbitmq.client.impl.ConnectionParams $r4;
        java.util.concurrent.TimeoutException $r10;
        java.util.HashMap $r21;
        com.rabbitmq.client.MetricsCollector $r1, $r15, $r17, $r20;
        com.rabbitmq.client.NoOpMetricsCollector $r23;
        java.util.Map $r22;
        com.rabbitmq.client.observation.ObservationCollector $r19;
        java.lang.String r5;
        java.util.concurrent.ExecutorService r3;
        com.rabbitmq.client.AddressResolver r6;
        boolean $z0, $z1, $z2, $z3;
        com.rabbitmq.client.impl.FrameHandler $r14;
        com.rabbitmq.client.ConnectionFactory r0;
        java.util.Iterator $r8;
        com.rabbitmq.client.impl.AMQConnection $r16;
        java.io.IOException $r9, $r11;
        com.rabbitmq.client.impl.FrameHandlerFactory $r2;
        java.util.List $r7;
        java.lang.Object $r12;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection $r18;
        com.rabbitmq.client.Address r13;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r3 := @parameter0: java.util.concurrent.ExecutorService;

        r6 := @parameter1: com.rabbitmq.client.AddressResolver;

        r5 := @parameter2: java.lang.String;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        if $r1 != null goto label01;

        $r23 = new com.rabbitmq.client.NoOpMetricsCollector;

        specialinvoke $r23.<com.rabbitmq.client.NoOpMetricsCollector: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector> = $r23;

     label01:
        $r2 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory()>();

        $r4 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)>(r3);

        if r5 == null goto label02;

        $r21 = new java.util.HashMap;

        $r22 = virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map getClientProperties()>();

        specialinvoke $r21.<java.util.HashMap: void <init>(java.util.Map)>($r22);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_name", r5);

        virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>($r21);

     label02:
        $z0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isAutomaticRecoveryEnabled()>();

        if $z0 == 0 goto label03;

        $r18 = new com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        $r20 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r19 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector>;

        specialinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>($r4, $r2, r6, $r20, $r19);

        virtualinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void init()>();

        return $r18;

     label03:
        $r7 = interfaceinvoke r6.<com.rabbitmq.client.AddressResolver: java.util.List getAddresses()>();

        r26 = null;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r12 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.rabbitmq.client.Address) $r12;

     label05:
        $r14 = interfaceinvoke $r2.<com.rabbitmq.client.impl.FrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>(r13, r5);

        $r15 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r16 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector)>($r4, $r14, $r15);

        virtualinvoke $r16.<com.rabbitmq.client.impl.AMQConnection: void start()>();

        $r17 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        interfaceinvoke $r17.<com.rabbitmq.client.MetricsCollector: void newConnection(com.rabbitmq.client.Connection)>($r16);

     label06:
        return $r16;

     label07:
        $r25 := @caughtexception;

        r26 = $r25;

        goto label09;

     label08:
        $r24 := @caughtexception;

        r26 = $r24;

     label09:
        goto label04;

     label10:
        if r26 == null goto label12;

        $z2 = r26 instanceof java.io.IOException;

        if $z2 == 0 goto label11;

        $r11 = (java.io.IOException) r26;

        throw $r11;

     label11:
        $z3 = r26 instanceof java.util.concurrent.TimeoutException;

        if $z3 == 0 goto label12;

        $r10 = (java.util.concurrent.TimeoutException) r26;

        throw $r10;

     label12:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("failed to connect");

        throw $r9;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.util.concurrent.TimeoutException from label05 to label06 with label08;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r1;
        java.util.function.Predicate $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.recovery.AutorecoveringConnection$lambda_static_0__3140: java.util.function.Predicate bootstrap$()>();

        <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate DEFAULT_CONNECTION_RECOVERY_TRIGGERING_CONDITION> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/recovery/AutorecoveringConnection;");

        <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: org.slf4j.Logger LOGGER> = $r1;

        return;
    }

Method: <com.rabbitmq.client.NoOpMetricsCollector: void newConnection(com.rabbitmq.client.Connection)>
    public void newConnection(com.rabbitmq.client.Connection)
    {
        com.rabbitmq.client.Connection r1;
        com.rabbitmq.client.NoOpMetricsCollector r0;

        r0 := @this: com.rabbitmq.client.NoOpMetricsCollector;

        r1 := @parameter0: com.rabbitmq.client.Connection;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void start()>
    public void start() throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.lang.Integer $r56, $r57, $r58, $r61, $r62, $r63;
        com.rabbitmq.client.AuthenticationFailureException $r124;
        com.rabbitmq.client.impl.Method $r8, $r26;
        com.rabbitmq.client.SaslMechanism $r17;
        java.util.Map $r9, $r10, $r65;
        java.time.Duration $r21, $r48, $r73;
        com.rabbitmq.client.AMQP$Connection$Open $r46;
        com.rabbitmq.client.SaslConfig $r16;
        com.rabbitmq.client.impl.CredentialsRefreshService $r49, $r70, $r72;
        java.lang.StringBuilder $r80, $r82, $r83, $r119;
        java.lang.Object[] $r54, $r59;
        com.rabbitmq.client.AMQP$Connection$StartOk$Builder $r66, $r68, $r69, $r122;
        com.rabbitmq.client.AMQP$Connection$Open$Builder $r45, $r128;
        com.rabbitmq.client.AMQP$Connection$Tune r109;
        java.io.IOException $r90, $r98, $r120;
        com.rabbitmq.client.impl.HeartbeatSender $r88, $r92;
        com.rabbitmq.client.AMQP$Connection$TuneOk $r41;
        java.util.concurrent.ThreadFactory $r29;
        com.rabbitmq.client.impl.AMQChannel $r2, $r24, $r37, $r43;
        com.rabbitmq.client.impl.Version $r12, $r86, $r117;
        com.rabbitmq.client.ShutdownSignalException $r87, $r96, $r101;
        com.rabbitmq.client.AMQP$Connection$SecureOk$Builder $r23, $r123;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i23;
        com.rabbitmq.client.Method $r102, $r115;
        org.slf4j.Logger $r55, $r60;
        com.rabbitmq.client.impl.AMQConnection r0;
        java.lang.Object $r6;
        com.rabbitmq.client.AMQP$Connection$Close r104;
        java.net.InetAddress $r33;
        com.rabbitmq.client.impl.AMQCommand $r7, $r25;
        com.rabbitmq.client.impl.CredentialsProvider $r18, $r19, $r20, $r47, $r50, $r71, $r74, $r75, $r76;
        com.rabbitmq.client.ShutdownListener $r53;
        java.lang.Throwable $r91, $r94, $r99, $r107;
        java.util.concurrent.Callable $r51;
        com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo $r126;
        java.lang.String $r14, $r34, $r44, $r52, $r67, $r84, $r106, r111, r112;
        com.rabbitmq.client.ProtocolVersionMismatchException $r118;
        com.rabbitmq.client.LongString $r13, $r28, $r81, r113, r114;
        java.lang.IllegalStateException $r121;
        com.rabbitmq.client.AMQP$Connection$Start r110;
        boolean $z0, $z1, $z2, $z3;
        com.rabbitmq.client.impl.FrameHandler $r3, $r4, $r5, $r32, $r35, $r89, $r93, $r95, $r97, $r100, $r108;
        com.rabbitmq.client.impl.ChannelManager $r30;
        com.rabbitmq.client.PossibleAuthenticationFailureException $r125;
        java.lang.String[] $r15;
        com.rabbitmq.client.AMQP$Connection$Secure $r27;
        com.rabbitmq.client.AMQP$Connection$TuneOk$Builder $r38, $r39, $r40, $r127;
        com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation $r116;

        r0 := @this: com.rabbitmq.client.impl.AMQConnection;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void initializeConsumerWorkService()>();

        specialinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void initializeHeartbeatSender()>();

        r0.<com.rabbitmq.client.impl.AMQConnection: boolean _running> = 1;

        $r116 = new com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation;

        specialinvoke $r116.<com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation: void <init>()>();

        $r2 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        virtualinvoke $r2.<com.rabbitmq.client.impl.AMQChannel: void enqueueRpc(com.rabbitmq.client.impl.AMQChannel$RpcContinuation)>($r116);

     label01:
        $r3 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $i0 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        interfaceinvoke $r3.<com.rabbitmq.client.impl.FrameHandler: void setTimeout(int)>($i0);

        $r4 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r4.<com.rabbitmq.client.impl.FrameHandler: void sendHeader()>();

     label02:
        goto label04;

     label03:
        $r107 := @caughtexception;

        $r108 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r108.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r107;

     label04:
        $r5 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r5.<com.rabbitmq.client.impl.FrameHandler: void initialize(com.rabbitmq.client.impl.AMQConnection)>(r0);

        r109 = null;

     label05:
        $i1 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        $i2 = $i1 / 2;

        $r6 = virtualinvoke $r116.<com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation: java.lang.Object getReply(int)>($i2);

        $r7 = (com.rabbitmq.client.impl.AMQCommand) $r6;

        $r8 = virtualinvoke $r7.<com.rabbitmq.client.impl.AMQCommand: com.rabbitmq.client.impl.Method getMethod()>();

        r110 = (com.rabbitmq.client.AMQP$Connection$Start) $r8;

        $r9 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: java.util.Map getServerProperties()>();

        $r10 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r9);

        r0.<com.rabbitmq.client.impl.AMQConnection: java.util.Map _serverProperties> = $r10;

        $r117 = new com.rabbitmq.client.impl.Version;

        $i3 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: int getVersionMajor()>();

        $i4 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: int getVersionMinor()>();

        specialinvoke $r117.<com.rabbitmq.client.impl.Version: void <init>(int,int)>($i3, $i4);

        $r12 = <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion>;

        $z0 = staticinvoke <com.rabbitmq.client.impl.Version: boolean checkVersion(com.rabbitmq.client.impl.Version,com.rabbitmq.client.impl.Version)>($r12, $r117);

        if $z0 != 0 goto label06;

        $r118 = new com.rabbitmq.client.ProtocolVersionMismatchException;

        $r86 = <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion>;

        specialinvoke $r118.<com.rabbitmq.client.ProtocolVersionMismatchException: void <init>(com.rabbitmq.client.impl.Version,com.rabbitmq.client.impl.Version)>($r86, $r117);

        throw $r118;

     label06:
        $r13 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: com.rabbitmq.client.LongString getMechanisms()>();

        $r14 = interfaceinvoke $r13.<com.rabbitmq.client.LongString: java.lang.String toString()>();

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $r16 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.SaslConfig saslConfig>;

        $r17 = interfaceinvoke $r16.<com.rabbitmq.client.SaslConfig: com.rabbitmq.client.SaslMechanism getSaslMechanism(java.lang.String[])>($r15);

        if $r17 != null goto label07;

        $r120 = new java.io.IOException;

        $r119 = new java.lang.StringBuilder;

        specialinvoke $r119.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No compatible authentication mechanism found - server offered [");

        $r81 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: com.rabbitmq.client.LongString getMechanisms()>();

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r120.<java.io.IOException: void <init>(java.lang.String)>($r84);

        throw $r120;

     label07:
        $r18 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r111 = interfaceinvoke $r18.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        $r19 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r112 = interfaceinvoke $r19.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        $r20 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r21 = interfaceinvoke $r20.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        if $r21 == null goto label09;

        $r70 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        if $r70 != null goto label08;

        $r121 = new java.lang.IllegalStateException;

        specialinvoke $r121.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Credentials can expire, a credentials refresh service should be set");

        throw $r121;

     label08:
        $r72 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        $r71 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r73 = interfaceinvoke $r71.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        $z2 = interfaceinvoke $r72.<com.rabbitmq.client.impl.CredentialsRefreshService: boolean isApproachingExpiration(java.time.Duration)>($r73);

        if $z2 == 0 goto label09;

        $r74 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        interfaceinvoke $r74.<com.rabbitmq.client.impl.CredentialsProvider: void refresh()>();

        $r75 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r111 = interfaceinvoke $r75.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        $r76 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r112 = interfaceinvoke $r76.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

     label09:
        r113 = null;

        r114 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: com.rabbitmq.client.LongString handleChallenge(com.rabbitmq.client.LongString,java.lang.String,java.lang.String)>(null, r111, r112);

     label10:
        if r113 != null goto label11;

        $r122 = new com.rabbitmq.client.AMQP$Connection$StartOk$Builder;

        specialinvoke $r122.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: void <init>()>();

        $r65 = r0.<com.rabbitmq.client.impl.AMQConnection: java.util.Map _clientProperties>;

        $r66 = virtualinvoke $r122.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder clientProperties(java.util.Map)>($r65);

        $r67 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: java.lang.String getName()>();

        $r68 = virtualinvoke $r66.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder mechanism(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder response(com.rabbitmq.client.LongString)>(r114);

        $r115 = virtualinvoke $r69.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk build()>();

        goto label12;

     label11:
        $r123 = new com.rabbitmq.client.AMQP$Connection$SecureOk$Builder;

        specialinvoke $r123.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: void <init>()>();

        $r23 = virtualinvoke $r123.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: com.rabbitmq.client.AMQP$Connection$SecureOk$Builder response(com.rabbitmq.client.LongString)>(r114);

        $r115 = virtualinvoke $r23.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: com.rabbitmq.client.AMQP$Connection$SecureOk build()>();

     label12:
        $r24 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $i5 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        $i6 = $i5 / 2;

        $r25 = virtualinvoke $r24.<com.rabbitmq.client.impl.AMQChannel: com.rabbitmq.client.impl.AMQCommand rpc(com.rabbitmq.client.Method,int)>($r115, $i6);

        $r26 = virtualinvoke $r25.<com.rabbitmq.client.impl.AMQCommand: com.rabbitmq.client.impl.Method getMethod()>();

        $z1 = $r26 instanceof com.rabbitmq.client.AMQP$Connection$Tune;

        if $z1 == 0 goto label13;

        r109 = (com.rabbitmq.client.AMQP$Connection$Tune) $r26;

        goto label14;

     label13:
        $r27 = (com.rabbitmq.client.AMQP$Connection$Secure) $r26;

        $r28 = interfaceinvoke $r27.<com.rabbitmq.client.AMQP$Connection$Secure: com.rabbitmq.client.LongString getChallenge()>();

        r113 = $r28;

        r114 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: com.rabbitmq.client.LongString handleChallenge(com.rabbitmq.client.LongString,java.lang.String,java.lang.String)>($r28, r111, r112);

     label14:
        goto label17;

     label15:
        $r101 := @caughtexception;

        $r102 = virtualinvoke $r101.<com.rabbitmq.client.ShutdownSignalException: com.rabbitmq.client.Method getReason()>();

        $z3 = $r102 instanceof com.rabbitmq.client.AMQP$Connection$Close;

        if $z3 == 0 goto label16;

        r104 = (com.rabbitmq.client.AMQP$Connection$Close) $r102;

        $i19 = interfaceinvoke r104.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>();

        if $i19 != 403 goto label16;

        $r124 = new com.rabbitmq.client.AuthenticationFailureException;

        $r106 = interfaceinvoke r104.<com.rabbitmq.client.AMQP$Connection$Close: java.lang.String getReplyText()>();

        specialinvoke $r124.<com.rabbitmq.client.AuthenticationFailureException: void <init>(java.lang.String)>($r106);

        throw $r124;

     label16:
        $r125 = new com.rabbitmq.client.PossibleAuthenticationFailureException;

        specialinvoke $r125.<com.rabbitmq.client.PossibleAuthenticationFailureException: void <init>(java.lang.Throwable)>($r101);

        throw $r125;

     label17:
        if r109 == null goto label10;

     label18:
        goto label22;

     label19:
        $r99 := @caughtexception;

        $r100 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r100.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r99;

     label20:
        $r96 := @caughtexception;

        $r97 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r97.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        $r98 = staticinvoke <com.rabbitmq.client.impl.AMQChannel: java.io.IOException wrap(com.rabbitmq.client.ShutdownSignalException)>($r96);

        throw $r98;

     label21:
        $r94 := @caughtexception;

        $r95 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r95.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r94;

     label22:
        $i7 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedChannelMax>;

        $i8 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getChannelMax()>();

        $i9 = virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: int negotiateChannelMax(int,int)>($i7, $i8);

        $i10 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>($i9);

        if $i10 == $i9 goto label23;

        $r60 = <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER>;

        $r59 = newarray (java.lang.Object)[3];

        $i21 = (int) 65535;

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21);

        $r59[0] = $r61;

        $r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r59[1] = $r62;

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r59[2] = $r63;

        interfaceinvoke $r60.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Channel max must be between 0 and {}, value has been set to {} instead of {}", $r59);

     label23:
        $r29 = r0.<com.rabbitmq.client.impl.AMQConnection: java.util.concurrent.ThreadFactory threadFactory>;

        $r30 = virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.ChannelManager instantiateChannelManager(int,java.util.concurrent.ThreadFactory)>($i10, $r29);

        r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.ChannelManager _channelManager> = $r30;

        $i11 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedFrameMax>;

        $i12 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getFrameMax()>();

        $i13 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: int negotiatedMaxValue(int,int)>($i11, $i12);

        r0.<com.rabbitmq.client.impl.AMQConnection: int _frameMax> = $i13;

        $i14 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedHeartbeat>;

        $i15 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getHeartbeat()>();

        $i16 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: int negotiatedMaxValue(int,int)>($i14, $i15);

        $i17 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>($i16);

        if $i17 == $i16 goto label24;

        $r55 = <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER>;

        $r54 = newarray (java.lang.Object)[3];

        $i23 = (int) 65535;

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i23);

        $r54[0] = $r56;

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r54[1] = $r57;

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        $r54[2] = $r58;

        interfaceinvoke $r55.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Heartbeat must be between 0 and {}, value has been set to {} instead of {}", $r54);

     label24:
        virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void setHeartbeat(int)>($i17);

        $r126 = new com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo;

        $r32 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $r33 = interfaceinvoke $r32.<com.rabbitmq.client.impl.FrameHandler: java.net.InetAddress getAddress()>();

        $r34 = virtualinvoke $r33.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r35 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $i18 = interfaceinvoke $r35.<com.rabbitmq.client.impl.FrameHandler: int getPort()>();

        specialinvoke $r126.<com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo: void <init>(java.lang.String,int,com.rabbitmq.client.impl.AMQConnection$1)>($r34, $i18, null);

        r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.observation.ObservationCollector$ConnectionInfo connectionInfo> = $r126;

        $r37 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $r127 = new com.rabbitmq.client.AMQP$Connection$TuneOk$Builder;

        specialinvoke $r127.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: void <init>()>();

        $r38 = virtualinvoke $r127.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder channelMax(int)>($i10);

        $r39 = virtualinvoke $r38.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder frameMax(int)>($i13);

        $r40 = virtualinvoke $r39.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder heartbeat(int)>($i17);

        $r41 = virtualinvoke $r40.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk build()>();

        virtualinvoke $r37.<com.rabbitmq.client.impl.AMQChannel: void transmit(com.rabbitmq.client.Method)>($r41);

        $r43 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $r128 = new com.rabbitmq.client.AMQP$Connection$Open$Builder;

        specialinvoke $r128.<com.rabbitmq.client.AMQP$Connection$Open$Builder: void <init>()>();

        $r44 = r0.<com.rabbitmq.client.impl.AMQConnection: java.lang.String _virtualHost>;

        $r45 = virtualinvoke $r128.<com.rabbitmq.client.AMQP$Connection$Open$Builder: com.rabbitmq.client.AMQP$Connection$Open$Builder virtualHost(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<com.rabbitmq.client.AMQP$Connection$Open$Builder: com.rabbitmq.client.AMQP$Connection$Open build()>();

        virtualinvoke $r43.<com.rabbitmq.client.impl.AMQChannel: com.rabbitmq.client.impl.AMQCommand exnWrappingRpc(com.rabbitmq.client.Method)>($r46);

     label25:
        goto label28;

     label26:
        $r91 := @caughtexception;

        $r92 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.HeartbeatSender _heartbeatSender>;

        virtualinvoke $r92.<com.rabbitmq.client.impl.HeartbeatSender: void shutdown()>();

        $r93 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r93.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r91;

     label27:
        $r87 := @caughtexception;

        $r88 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.HeartbeatSender _heartbeatSender>;

        virtualinvoke $r88.<com.rabbitmq.client.impl.HeartbeatSender: void shutdown()>();

        $r89 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r89.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        $r90 = staticinvoke <com.rabbitmq.client.impl.AMQChannel: java.io.IOException wrap(com.rabbitmq.client.ShutdownSignalException)>($r87);

        throw $r90;

     label28:
        $r47 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r48 = interfaceinvoke $r47.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        if $r48 == null goto label29;

        $r49 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        $r50 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r51 = staticinvoke <com.rabbitmq.client.impl.AMQConnection$lambda_start_1__3171: java.util.concurrent.Callable bootstrap$(com.rabbitmq.client.impl.AMQConnection)>(r0);

        $r52 = interfaceinvoke $r49.<com.rabbitmq.client.impl.CredentialsRefreshService: java.lang.String register(com.rabbitmq.client.impl.CredentialsProvider,java.util.concurrent.Callable)>($r50, $r51);

        $r53 = staticinvoke <com.rabbitmq.client.impl.AMQConnection$lambda_start_2__3172: com.rabbitmq.client.ShutdownListener bootstrap$(com.rabbitmq.client.impl.AMQConnection,java.lang.String)>(r0, $r52);

        virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void addShutdownListener(com.rabbitmq.client.ShutdownListener)>($r53);

     label29:
        r0.<com.rabbitmq.client.impl.AMQConnection: boolean _inConnectionNegotiation> = 0;

        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch com.rabbitmq.client.ShutdownSignalException from label12 to label14 with label15;
        catch java.util.concurrent.TimeoutException from label05 to label18 with label19;
        catch com.rabbitmq.client.ShutdownSignalException from label05 to label18 with label20;
        catch java.io.IOException from label05 to label18 with label21;
        catch java.io.IOException from label22 to label25 with label26;
        catch com.rabbitmq.client.ShutdownSignalException from label22 to label25 with label27;
    }

Method: <com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>
    public void setClientProperties(java.util.Map)
    {
        com.rabbitmq.client.impl.ConnectionParams r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.impl.ConnectionParams;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map clientProperties> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.ConnectionParams: java.util.Map getClientProperties()>
    public java.util.Map getClientProperties()
    {
        com.rabbitmq.client.impl.ConnectionParams r0;
        java.util.Map $r1;

        r0 := @this: com.rabbitmq.client.impl.ConnectionParams;

        $r1 = r0.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map clientProperties>;

        return $r1;
    }

Method: <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>
    public com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address, java.lang.String) throws java.io.IOException
    {
        javax.net.ssl.SSLContext $r29;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory r1;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandler $r51;
        javax.net.ssl.SSLHandshakeException $r52;
        javax.net.ssl.SSLException $r49;
        com.rabbitmq.client.SocketChannelConfigurator $r26, $r48;
        com.rabbitmq.client.Address r0;
        java.lang.Throwable $r36, $r37, $r38, $r40;
        long $l3, $l5, $l10;
        javax.net.ssl.SSLSession $r21;
        java.lang.String r27, $r30, $r42;
        java.util.concurrent.atomic.AtomicLong $r4;
        java.util.concurrent.locks.Lock $r3, $r11, $r39;
        java.nio.channels.WritableByteChannel $r19;
        java.nio.channels.SocketChannel r44, $r46;
        boolean $z0, $z1, $z2, $z3;
        java.net.InetSocketAddress $r45;
        java.util.List $r6;
        java.net.Socket $r2, $r12, $r13, $r14, $r17, $r20;
        javax.net.ssl.SSLEngine $r31, r43;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState $r50;
        com.rabbitmq.client.impl.nio.NioLoopContext $r22;
        int $i0, $i1, $i2, $i4, $i6, $i7, $i8, $i9;
        com.rabbitmq.client.SslContextFactory $r28;
        com.rabbitmq.client.impl.nio.NioParams $r5, $r9, $r25, $r32, $r34, $r47;
        java.io.OutputStream $r18;
        java.nio.channels.ReadableByteChannel $r16;
        org.slf4j.Logger $r23, $r41;
        com.rabbitmq.client.SslEngineConfigurator $r33, $r35;
        java.lang.Object $r7;
        java.io.InputStream $r15;

        r1 := @this: com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory;

        r0 := @parameter0: com.rabbitmq.client.Address;

        r27 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        r43 = null;

        r44 = null;

     label01:
        $z1 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        if $z1 == 0 goto label02;

        $r28 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $r29 = interfaceinvoke $r28.<com.rabbitmq.client.SslContextFactory: javax.net.ssl.SSLContext create(java.lang.String)>(r27);

        $r30 = virtualinvoke r0.<com.rabbitmq.client.Address: java.lang.String getHost()>();

        $r31 = virtualinvoke $r29.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine(java.lang.String,int)>($r30, $i1);

        r43 = $r31;

        virtualinvoke $r31.<javax.net.ssl.SSLEngine: void setUseClientMode(boolean)>(1);

        $r32 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r33 = virtualinvoke $r32.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator getSslEngineConfigurator()>();

        if $r33 == null goto label02;

        $r34 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r35 = virtualinvoke $r34.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator getSslEngineConfigurator()>();

        interfaceinvoke $r35.<com.rabbitmq.client.SslEngineConfigurator: void configure(javax.net.ssl.SSLEngine)>($r31);

     label02:
        $r45 = virtualinvoke r0.<com.rabbitmq.client.Address: java.net.InetSocketAddress toInetSocketAddress(int)>($i1);

        $r46 = staticinvoke <java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>();

        r44 = $r46;

        virtualinvoke $r46.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

        $r47 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r48 = virtualinvoke $r47.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator getSocketChannelConfigurator()>();

        if $r48 == null goto label03;

        $r25 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r26 = virtualinvoke $r25.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator getSocketChannelConfigurator()>();

        interfaceinvoke $r26.<com.rabbitmq.client.SocketChannelConfigurator: void configure(java.nio.channels.SocketChannel)>($r46);

     label03:
        $r2 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i2 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r2.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r45, $i2);

        $z2 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        if $z2 == 0 goto label09;

        $r12 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i8 = virtualinvoke $r12.<java.net.Socket: int getSoTimeout()>();

        $r13 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i9 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r13.<java.net.Socket: void setSoTimeout(int)>($i9);

        virtualinvoke r43.<javax.net.ssl.SSLEngine: void beginHandshake()>();

     label04:
        $r14 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r15 = virtualinvoke $r14.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r16 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>($r15);

        $r17 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r18 = virtualinvoke $r17.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        $r19 = staticinvoke <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>($r18);

        $z3 = staticinvoke <com.rabbitmq.client.impl.nio.SslEngineHelper: boolean doHandshake(java.nio.channels.WritableByteChannel,java.nio.channels.ReadableByteChannel,javax.net.ssl.SSLEngine)>($r19, $r16, r43);

        if $z3 != 0 goto label05;

        $r23 = <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r23.<org.slf4j.Logger: void error(java.lang.String)>("TLS connection failed");

        $r49 = new javax.net.ssl.SSLException;

        specialinvoke $r49.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("TLS handshake failed");

        throw $r49;

     label05:
        $r20 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        virtualinvoke $r20.<java.net.Socket: void setSoTimeout(int)>($i8);

     label06:
        goto label08;

     label07:
        $r40 := @caughtexception;

        $r41 = <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: org.slf4j.Logger LOGGER>;

        $r52 = (javax.net.ssl.SSLHandshakeException) $r40;

        $r42 = virtualinvoke $r52.<javax.net.ssl.SSLHandshakeException: java.lang.String getMessage()>();

        interfaceinvoke $r41.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("TLS connection failed: {}", $r42);

        throw $r40;

     label08:
        $r21 = virtualinvoke r43.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>();

        staticinvoke <com.rabbitmq.client.impl.TlsUtils: void logPeerCertificateInfo(javax.net.ssl.SSLSession)>($r21);

     label09:
        virtualinvoke $r46.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

        $r3 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label10:
        $r4 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.atomic.AtomicLong globalConnectionCount>;

        $l3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r5 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $i4 = virtualinvoke $r5.<com.rabbitmq.client.impl.nio.NioParams: int getNbIoThreads()>();

        $l5 = (long) $i4;

        $l10 = $l3 % $l5;

        $r6 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.List nioLoopContexts>;

        $i6 = (int) $l10;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i6);

        $r22 = (com.rabbitmq.client.impl.nio.NioLoopContext) $r7;

        virtualinvoke $r22.<com.rabbitmq.client.impl.nio.NioLoopContext: void initStateIfNecessary()>();

        $r50 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState;

        $r9 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $i7 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int maxInboundMessageBodySize>;

        specialinvoke $r50.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState: void <init>(java.nio.channels.SocketChannel,com.rabbitmq.client.impl.nio.NioLoopContext,com.rabbitmq.client.impl.nio.NioParams,javax.net.ssl.SSLEngine,int)>($r46, $r22, $r9, r43, $i7);

        virtualinvoke $r50.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState: void startReading()>();

        $r51 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandler;

        specialinvoke $r51.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandler: void <init>(com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState)>($r50);

     label11:
        $r11 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

     label12:
        return $r51;

     label13:
        $r38 := @caughtexception;

     label14:
        $r39 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r39.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r38;

     label15:
        $r37 := @caughtexception;

     label16:
        if r43 == null goto label17;

        if r44 == null goto label17;

        staticinvoke <com.rabbitmq.client.impl.nio.SslEngineHelper: void close(java.nio.channels.WritableByteChannel,javax.net.ssl.SSLEngine)>(r44, r43);

     label17:
        if r44 == null goto label18;

        virtualinvoke r44.<java.nio.channels.SocketChannel: void close()>();

     label18:
        goto label20;

     label19:
        $r36 := @caughtexception;

     label20:
        throw $r37;

        catch javax.net.ssl.SSLHandshakeException from label04 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.io.IOException from label01 to label12 with label15;
        catch java.io.IOException from label13 to label15 with label15;
        catch java.io.IOException from label16 to label18 with label19;
    }

Method: <com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>
    public com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        java.net.Socket $r3, r8;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.impl.FrameHandler $r6;
        com.rabbitmq.client.impl.SocketFrameHandlerFactory r1;
        java.net.InetSocketAddress $r5;
        int $i0, $i1, $i2;
        java.lang.String r2;
        com.rabbitmq.client.Address r0;
        boolean $z0;

        r1 := @this: com.rabbitmq.client.impl.SocketFrameHandlerFactory;

        r0 := @parameter0: com.rabbitmq.client.Address;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        r8 = null;

     label1:
        $r3 = virtualinvoke r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: java.net.Socket createSocket(java.lang.String)>(r2);

        r8 = $r3;

        $r4 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.SocketConfigurator configurator>;

        interfaceinvoke $r4.<com.rabbitmq.client.SocketConfigurator: void configure(java.net.Socket)>($r3);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.Address: java.net.InetSocketAddress toInetSocketAddress(int)>($i1);

        $i2 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r3.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r5, $i2);

        $r6 = virtualinvoke r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(java.net.Socket)>($r3);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        staticinvoke <com.rabbitmq.client.impl.SocketFrameHandlerFactory: void quietTrySocketClose(java.net.Socket)>(r8);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector)>
    protected com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams, com.rabbitmq.client.impl.FrameHandler, com.rabbitmq.client.MetricsCollector)
    {
        com.rabbitmq.client.impl.FrameHandler r2;
        com.rabbitmq.client.impl.AMQConnection $r0;
        com.rabbitmq.client.ConnectionFactory r4;
        com.rabbitmq.client.impl.ConnectionParams r1;
        com.rabbitmq.client.observation.ObservationCollector $r5;
        com.rabbitmq.client.MetricsCollector r3;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.impl.ConnectionParams;

        r2 := @parameter1: com.rabbitmq.client.impl.FrameHandler;

        r3 := @parameter2: com.rabbitmq.client.MetricsCollector;

        $r0 = new com.rabbitmq.client.impl.AMQConnection;

        $r5 = r4.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>(r1, r2, r3, $r5);

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: boolean isAutomaticRecoveryEnabled()>
    public boolean isAutomaticRecoveryEnabled()
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $z0 = r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery>;

        return $z0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)>
    public com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)
    {
        com.rabbitmq.client.RecoveryDelayHandler $r7;
        com.rabbitmq.client.impl.ConnectionParams $r0;
        long $l3;
        com.rabbitmq.client.impl.ErrorOnWriteListener $r13;
        java.util.Map $r5;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8;
        java.util.concurrent.ScheduledExecutorService $r12;
        java.lang.String $r4;
        java.util.concurrent.ThreadFactory $r10;
        java.util.concurrent.ExecutorService r3, $r8, $r11;
        boolean $z0, $z1;
        com.rabbitmq.client.SaslConfig $r6;
        com.rabbitmq.client.ConnectionFactory r1;
        com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter $r14;
        java.util.function.Predicate $r15;
        com.rabbitmq.client.impl.CredentialsRefreshService $r19;
        com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier $r17;
        com.rabbitmq.client.impl.recovery.RetryHandler $r16;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.TrafficListener $r18;
        com.rabbitmq.client.ExceptionHandler $r9;

        r1 := @this: com.rabbitmq.client.ConnectionFactory;

        r3 := @parameter0: java.util.concurrent.ExecutorService;

        $r0 = new com.rabbitmq.client.impl.ConnectionParams;

        specialinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void <init>()>();

        $r2 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>($r2);

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setConsumerWorkServiceExecutor(java.util.concurrent.ExecutorService)>(r3);

        $r4 = r1.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setVirtualHost(java.lang.String)>($r4);

        $r5 = virtualinvoke r1.<com.rabbitmq.client.ConnectionFactory: java.util.Map getClientProperties()>();

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>($r5);

        $i0 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedFrameMax(int)>($i0);

        $i1 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedChannelMax(int)>($i1);

        $i2 = r1.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setShutdownTimeout(int)>($i2);

        $r6 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setSaslConfig(com.rabbitmq.client.SaslConfig)>($r6);

        $l3 = r1.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setNetworkRecoveryInterval(long)>($l3);

        $r7 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.RecoveryDelayHandler recoveryDelayHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRecoveryDelayHandler(com.rabbitmq.client.RecoveryDelayHandler)>($r7);

        $z0 = r1.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecovery(boolean)>($z0);

        $r8 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService topologyRecoveryExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryExecutor(java.util.concurrent.ExecutorService)>($r8);

        $r9 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)>($r9);

        $r10 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setThreadFactory(java.util.concurrent.ThreadFactory)>($r10);

        $i4 = r1.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setHandshakeTimeout(int)>($i4);

        $i5 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedHeartbeat(int)>($i5);

        $r11 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService shutdownExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setShutdownExecutor(java.util.concurrent.ExecutorService)>($r11);

        $r12 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ScheduledExecutorService heartbeatExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setHeartbeatExecutor(java.util.concurrent.ScheduledExecutorService)>($r12);

        $i6 = r1.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setChannelRpcTimeout(int)>($i6);

        $z1 = r1.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setChannelShouldCheckRpcResponseType(boolean)>($z1);

        $i7 = r1.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setWorkPoolTimeout(int)>($i7);

        $r13 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ErrorOnWriteListener errorOnWriteListener>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setErrorOnWriteListener(com.rabbitmq.client.impl.ErrorOnWriteListener)>($r13);

        $r14 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter topologyRecoveryFilter>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryFilter(com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter)>($r14);

        $r15 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.function.Predicate connectionRecoveryTriggeringCondition>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setConnectionRecoveryTriggeringCondition(java.util.function.Predicate)>($r15);

        $r16 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.RetryHandler topologyRecoveryRetryHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryRetryHandler(com.rabbitmq.client.impl.recovery.RetryHandler)>($r16);

        $r17 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier recoveredQueueNameSupplier>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRecoveredQueueNameSupplier(com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier)>($r17);

        $r18 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTrafficListener(com.rabbitmq.client.TrafficListener)>($r18);

        $r19 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setCredentialsRefreshService(com.rabbitmq.client.impl.CredentialsRefreshService)>($r19);

        $i8 = r1.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setMaxInboundMessageBodySize(int)>($i8);

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory()>
    protected synchronized com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory() throws java.io.IOException
    {
        com.rabbitmq.client.SocketConfigurator $r3;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory $r13;
        int $i0, $i1, $i2, $i3;
        com.rabbitmq.client.SslContextFactory $r4, $r15;
        com.rabbitmq.client.impl.nio.NioParams $r7, $r9, $r11, $r14;
        java.util.concurrent.ThreadFactory $r10, $r12;
        java.util.concurrent.ExecutorService $r5, $r8;
        boolean $z0, $z1, $z2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.SocketFrameHandlerFactory $r1;
        com.rabbitmq.client.impl.FrameHandlerFactory $r6, $r16;
        javax.net.SocketFactory $r2;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $z0 = r0.<com.rabbitmq.client.ConnectionFactory: boolean nio>;

        if $z0 == 0 goto label3;

        $r6 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory>;

        if $r6 != null goto label2;

        $r7 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r8 = virtualinvoke $r7.<com.rabbitmq.client.impl.nio.NioParams: java.util.concurrent.ExecutorService getNioExecutor()>();

        if $r8 != null goto label1;

        $r9 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r10 = virtualinvoke $r9.<com.rabbitmq.client.impl.nio.NioParams: java.util.concurrent.ThreadFactory getThreadFactory()>();

        if $r10 != null goto label1;

        $r11 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r12 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory getThreadFactory()>();

        virtualinvoke $r11.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.NioParams setThreadFactory(java.util.concurrent.ThreadFactory)>($r12);

     label1:
        $r13 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory;

        $i2 = r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout>;

        $r14 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $z2 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $r15 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $i3 = r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        specialinvoke $r13.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: void <init>(int,com.rabbitmq.client.impl.nio.NioParams,boolean,com.rabbitmq.client.SslContextFactory,int)>($i2, $r14, $z2, $r15, $i3);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory> = $r13;

     label2:
        $r16 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory>;

        return $r16;

     label3:
        $r1 = new com.rabbitmq.client.impl.SocketFrameHandlerFactory;

        $i0 = r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout>;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory>;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf>;

        $z1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $r5 = r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService shutdownExecutor>;

        $r4 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $i1 = r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        specialinvoke $r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: void <init>(int,javax.net.SocketFactory,com.rabbitmq.client.SocketConfigurator,boolean,java.util.concurrent.ExecutorService,com.rabbitmq.client.SslContextFactory,int)>($i0, $r2, $r3, $z1, $r5, $r4, $i1);

        return $r1;
    }

Method: <com.rabbitmq.client.DnsRecordIpAddressResolver: java.util.List getAddresses()>
    public java.util.List getAddresses() throws java.net.UnknownHostException
    {
        java.net.InetAddress[] $r4;
        java.util.ArrayList $r5;
        java.net.InetAddress r6;
        com.rabbitmq.client.DnsRecordIpAddressResolver r0;
        com.rabbitmq.client.ResolvedInetAddress $r7;
        int $i0, $i1, i2, i3;
        java.lang.String $r2;
        com.rabbitmq.client.Address $r1, $r3;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.DnsRecordIpAddressResolver;

        $r1 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address>;

        $r2 = virtualinvoke $r1.<com.rabbitmq.client.Address: java.lang.String getHost()>();

        $r3 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address>;

        $i0 = virtualinvoke $r3.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        $r4 = virtualinvoke r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: java.net.InetAddress[] resolveIpAddresses(java.lang.String)>($r2);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i2 = lengthof $r4;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r6 = $r4[i3];

        $r7 = new com.rabbitmq.client.ResolvedInetAddress;

        specialinvoke $r7.<com.rabbitmq.client.ResolvedInetAddress: void <init>(java.lang.String,java.net.InetAddress,int)>($r2, r6, $i1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        i3 = i3 + 1;

        goto label1;

     label2:
        return $r5;
    }

Method: <com.rabbitmq.client.ListAddressResolver: java.util.List getAddresses()>
    public java.util.List getAddresses()
    {
        java.util.List $r1;
        com.rabbitmq.client.ListAddressResolver r0;

        r0 := @this: com.rabbitmq.client.ListAddressResolver;

        $r1 = r0.<com.rabbitmq.client.ListAddressResolver: java.util.List addresses>;

        return $r1;
    }

Method: <com.rabbitmq.client.NoOpMetricsCollector: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.NoOpMetricsCollector r0;

        r0 := @this: com.rabbitmq.client.NoOpMetricsCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void init()>
    public void init() throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory $r1;
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection $r2, $r3;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection r0;

        r0 := @this: com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        $r1 = r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory cf>;

        $r2 = virtualinvoke $r1.<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection newConnection()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection delegate> = $r2;

        $r3 = r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection delegate>;

        specialinvoke r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void addAutomaticRecoveryListener(com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection)>($r3);

        return;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>
    public void <init>(com.rabbitmq.client.impl.ConnectionParams, com.rabbitmq.client.impl.FrameHandlerFactory, com.rabbitmq.client.AddressResolver, com.rabbitmq.client.MetricsCollector, com.rabbitmq.client.observation.ObservationCollector)
    {
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory $r20;
        com.rabbitmq.client.MetricsCollector r24;
        java.util.Map $r8, $r12, $r14;
        com.rabbitmq.client.observation.ObservationCollector r25;
        com.rabbitmq.client.AddressResolver r23;
        java.util.function.Predicate $r26, $r31;
        com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter $r28, $r32;
        java.util.concurrent.ConcurrentHashMap $r27;
        java.util.List $r2, $r4, $r6, $r10, $r16, $r18;
        com.rabbitmq.client.impl.recovery.RetryHandler $r29;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection r0;
        com.rabbitmq.client.impl.ConnectionParams r21;
        java.util.ArrayList $r1, $r3, $r5, $r9, $r15, $r17;
        java.util.LinkedHashMap $r7, $r11, $r13;
        com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier $r30, $r33;
        com.rabbitmq.client.impl.FrameHandlerFactory r22;
        java.lang.Object $r19;

        r0 := @this: com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        r21 := @parameter0: com.rabbitmq.client.impl.ConnectionParams;

        r22 := @parameter1: com.rabbitmq.client.impl.FrameHandlerFactory;

        r23 := @parameter2: com.rabbitmq.client.AddressResolver;

        r24 := @parameter3: com.rabbitmq.client.MetricsCollector;

        r25 := @parameter4: com.rabbitmq.client.observation.ObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List shutdownHooks> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r3);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List recoveryListeners> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r5);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List blockedListeners> = $r6;

        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        $r8 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r7);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map recordedQueues> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r9);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List recordedBindings> = $r10;

        $r11 = new java.util.LinkedHashMap;

        specialinvoke $r11.<java.util.LinkedHashMap: void <init>()>();

        $r12 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r11);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map recordedExchanges> = $r12;

        $r13 = new java.util.LinkedHashMap;

        specialinvoke $r13.<java.util.LinkedHashMap: void <init>()>();

        $r14 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r13);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map consumers> = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r16 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r15);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List consumerRecoveryListeners> = $r16;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        $r18 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r17);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List queueRecoveryListeners> = $r18;

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: boolean manuallyClosed> = 0;

        $r19 = new java.lang.Object;

        specialinvoke $r19.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.lang.Object recoveryLock> = $r19;

        $r20 = new com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory;

        specialinvoke $r20.<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>(r21, r22, r23, r24, r25);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory cf> = $r20;

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.ConnectionParams params> = r21;

        $r26 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: java.util.function.Predicate getConnectionRecoveryTriggeringCondition()>();

        if $r26 != null goto label1;

        $r31 = <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate DEFAULT_CONNECTION_RECOVERY_TRIGGERING_CONDITION>;

        goto label2;

     label1:
        $r31 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: java.util.function.Predicate getConnectionRecoveryTriggeringCondition()>();

     label2:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate connectionRecoveryTriggeringCondition> = $r31;

        specialinvoke r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void setupErrorOnWriteListenerForPotentialRecovery()>();

        $r27 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r27.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map channels> = $r27;

        $r28 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter getTopologyRecoveryFilter()>();

        if $r28 != null goto label3;

        $r32 = staticinvoke <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter letAllPassFilter()>();

        goto label4;

     label3:
        $r32 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter getTopologyRecoveryFilter()>();

     label4:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter topologyRecoveryFilter> = $r32;

        $r29 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RetryHandler getTopologyRecoveryRetryHandler()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RetryHandler retryHandler> = $r29;

        $r30 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier getRecoveredQueueNameSupplier()>();

        if $r30 != null goto label5;

        $r33 = <com.rabbitmq.client.impl.recovery.RecordedQueue: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier DEFAULT_QUEUE_NAME_SUPPLIER>;

        goto label6;

     label5:
        $r33 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier getRecoveredQueueNameSupplier()>();

     label6:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier recoveredQueueNameSupplier> = $r33;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int getPort()>
    public int getPort()
    {
        com.rabbitmq.client.ConnectionFactory r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $i0 = r0.<com.rabbitmq.client.ConnectionFactory: int port>;

        $z0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        return $i1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: boolean isSSL()>
    public boolean isSSL()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        boolean $z0, $z1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>();

        $z0 = $r1 instanceof javax.net.ssl.SSLSocketFactory;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        if $r2 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>
    public javax.net.SocketFactory getSocketFactory()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory>;

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>
    public static int portOrDefault(int, boolean)
    {
        int i0, $i2;
        boolean z0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i2 = (int) -1;

        if i0 == $i2 goto label1;

        return i0;

     label1:
        if z0 == 0 goto label2;

        return 5671;

     label2:
        return 5672;
    }

Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String getHost()>
    public java.lang.String getHost()
    {
        java.lang.String $r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host>;

        return $r1;
    }

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.lang.String)>
Related methods: 34
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.Connection $r6;
        java.util.List $r4;
        int $i0;
        java.lang.String $r3, r5;
        java.util.concurrent.ExecutorService $r2;
        com.rabbitmq.client.Address $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r5 := @parameter0: java.lang.String;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService sharedExecutor>;

        $r1 = new com.rabbitmq.client.Address;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String getHost()>();

        $i0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: int getPort()>();

        specialinvoke $r1.<com.rabbitmq.client.Address: void <init>(java.lang.String,int)>($r3, $i0);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        $r6 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>($r2, $r4, r5);

        return $r6;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, java.util.List, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.String r4;
        com.rabbitmq.client.Connection $r5;
        java.util.concurrent.ExecutorService r1;
        com.rabbitmq.client.AddressResolver $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        r2 := @parameter1: java.util.List;

        r4 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>(r2);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>(r1, $r3, r4);

        return $r5;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>
    protected com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)
    {
        com.rabbitmq.client.ConnectionFactory r4;
        com.rabbitmq.client.ListAddressResolver $r6;
        java.lang.IllegalArgumentException $r1;
        java.util.List r0;
        com.rabbitmq.client.DnsRecordIpAddressResolver $r2;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, $z1;
        com.rabbitmq.client.Address $r5;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide at least one address to connect to");

        throw $r1;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 1 goto label3;

        $r6 = new com.rabbitmq.client.ListAddressResolver;

        specialinvoke $r6.<com.rabbitmq.client.ListAddressResolver: void <init>(java.util.List)>(r0);

        return $r6;

     label3:
        $r2 = new com.rabbitmq.client.DnsRecordIpAddressResolver;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (com.rabbitmq.client.Address) $r3;

        $z1 = virtualinvoke r4.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        specialinvoke $r2.<com.rabbitmq.client.DnsRecordIpAddressResolver: void <init>(com.rabbitmq.client.Address,boolean)>($r5, $z1);

        return $r2;
    }

Method: <com.rabbitmq.client.ConnectionFactory: boolean isSSL()>
    public boolean isSSL()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        boolean $z0, $z1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>();

        $z0 = $r1 instanceof javax.net.ssl.SSLSocketFactory;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        if $r2 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.rabbitmq.client.ListAddressResolver: void <init>(java.util.List)>
    public void <init>(java.util.List)
    {
        java.util.List r1;
        com.rabbitmq.client.ListAddressResolver r0;

        r0 := @this: com.rabbitmq.client.ListAddressResolver;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ListAddressResolver: java.util.List addresses> = r1;

        return;
    }

Method: <com.rabbitmq.client.DnsRecordIpAddressResolver: void <init>(com.rabbitmq.client.Address,boolean)>
    public void <init>(com.rabbitmq.client.Address, boolean)
    {
        com.rabbitmq.client.DnsRecordIpAddressResolver r0;
        com.rabbitmq.client.Address r1;
        boolean z0;

        r0 := @this: com.rabbitmq.client.DnsRecordIpAddressResolver;

        r1 := @parameter0: com.rabbitmq.client.Address;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address> = r1;

        r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: boolean ssl> = z0;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, com.rabbitmq.client.AddressResolver, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.lang.Throwable $r24, $r25, r26;
        com.rabbitmq.client.impl.ConnectionParams $r4;
        java.util.concurrent.TimeoutException $r10;
        java.util.HashMap $r21;
        com.rabbitmq.client.MetricsCollector $r1, $r15, $r17, $r20;
        com.rabbitmq.client.NoOpMetricsCollector $r23;
        java.util.Map $r22;
        com.rabbitmq.client.observation.ObservationCollector $r19;
        java.lang.String r5;
        java.util.concurrent.ExecutorService r3;
        com.rabbitmq.client.AddressResolver r6;
        boolean $z0, $z1, $z2, $z3;
        com.rabbitmq.client.impl.FrameHandler $r14;
        com.rabbitmq.client.ConnectionFactory r0;
        java.util.Iterator $r8;
        com.rabbitmq.client.impl.AMQConnection $r16;
        java.io.IOException $r9, $r11;
        com.rabbitmq.client.impl.FrameHandlerFactory $r2;
        java.util.List $r7;
        java.lang.Object $r12;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection $r18;
        com.rabbitmq.client.Address r13;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r3 := @parameter0: java.util.concurrent.ExecutorService;

        r6 := @parameter1: com.rabbitmq.client.AddressResolver;

        r5 := @parameter2: java.lang.String;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        if $r1 != null goto label01;

        $r23 = new com.rabbitmq.client.NoOpMetricsCollector;

        specialinvoke $r23.<com.rabbitmq.client.NoOpMetricsCollector: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector> = $r23;

     label01:
        $r2 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory()>();

        $r4 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)>(r3);

        if r5 == null goto label02;

        $r21 = new java.util.HashMap;

        $r22 = virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map getClientProperties()>();

        specialinvoke $r21.<java.util.HashMap: void <init>(java.util.Map)>($r22);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_name", r5);

        virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>($r21);

     label02:
        $z0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isAutomaticRecoveryEnabled()>();

        if $z0 == 0 goto label03;

        $r18 = new com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        $r20 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r19 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector>;

        specialinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>($r4, $r2, r6, $r20, $r19);

        virtualinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void init()>();

        return $r18;

     label03:
        $r7 = interfaceinvoke r6.<com.rabbitmq.client.AddressResolver: java.util.List getAddresses()>();

        r26 = null;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r12 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.rabbitmq.client.Address) $r12;

     label05:
        $r14 = interfaceinvoke $r2.<com.rabbitmq.client.impl.FrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>(r13, r5);

        $r15 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r16 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector)>($r4, $r14, $r15);

        virtualinvoke $r16.<com.rabbitmq.client.impl.AMQConnection: void start()>();

        $r17 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        interfaceinvoke $r17.<com.rabbitmq.client.MetricsCollector: void newConnection(com.rabbitmq.client.Connection)>($r16);

     label06:
        return $r16;

     label07:
        $r25 := @caughtexception;

        r26 = $r25;

        goto label09;

     label08:
        $r24 := @caughtexception;

        r26 = $r24;

     label09:
        goto label04;

     label10:
        if r26 == null goto label12;

        $z2 = r26 instanceof java.io.IOException;

        if $z2 == 0 goto label11;

        $r11 = (java.io.IOException) r26;

        throw $r11;

     label11:
        $z3 = r26 instanceof java.util.concurrent.TimeoutException;

        if $z3 == 0 goto label12;

        $r10 = (java.util.concurrent.TimeoutException) r26;

        throw $r10;

     label12:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("failed to connect");

        throw $r9;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.util.concurrent.TimeoutException from label05 to label06 with label08;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r1;
        java.util.function.Predicate $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.recovery.AutorecoveringConnection$lambda_static_0__3140: java.util.function.Predicate bootstrap$()>();

        <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate DEFAULT_CONNECTION_RECOVERY_TRIGGERING_CONDITION> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/recovery/AutorecoveringConnection;");

        <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: org.slf4j.Logger LOGGER> = $r1;

        return;
    }

Method: <com.rabbitmq.client.NoOpMetricsCollector: void newConnection(com.rabbitmq.client.Connection)>
    public void newConnection(com.rabbitmq.client.Connection)
    {
        com.rabbitmq.client.Connection r1;
        com.rabbitmq.client.NoOpMetricsCollector r0;

        r0 := @this: com.rabbitmq.client.NoOpMetricsCollector;

        r1 := @parameter0: com.rabbitmq.client.Connection;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void start()>
    public void start() throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.lang.Integer $r56, $r57, $r58, $r61, $r62, $r63;
        com.rabbitmq.client.AuthenticationFailureException $r124;
        com.rabbitmq.client.impl.Method $r8, $r26;
        com.rabbitmq.client.SaslMechanism $r17;
        java.util.Map $r9, $r10, $r65;
        java.time.Duration $r21, $r48, $r73;
        com.rabbitmq.client.AMQP$Connection$Open $r46;
        com.rabbitmq.client.SaslConfig $r16;
        com.rabbitmq.client.impl.CredentialsRefreshService $r49, $r70, $r72;
        java.lang.StringBuilder $r80, $r82, $r83, $r119;
        java.lang.Object[] $r54, $r59;
        com.rabbitmq.client.AMQP$Connection$StartOk$Builder $r66, $r68, $r69, $r122;
        com.rabbitmq.client.AMQP$Connection$Open$Builder $r45, $r128;
        com.rabbitmq.client.AMQP$Connection$Tune r109;
        java.io.IOException $r90, $r98, $r120;
        com.rabbitmq.client.impl.HeartbeatSender $r88, $r92;
        com.rabbitmq.client.AMQP$Connection$TuneOk $r41;
        java.util.concurrent.ThreadFactory $r29;
        com.rabbitmq.client.impl.AMQChannel $r2, $r24, $r37, $r43;
        com.rabbitmq.client.impl.Version $r12, $r86, $r117;
        com.rabbitmq.client.ShutdownSignalException $r87, $r96, $r101;
        com.rabbitmq.client.AMQP$Connection$SecureOk$Builder $r23, $r123;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i23;
        com.rabbitmq.client.Method $r102, $r115;
        org.slf4j.Logger $r55, $r60;
        com.rabbitmq.client.impl.AMQConnection r0;
        java.lang.Object $r6;
        com.rabbitmq.client.AMQP$Connection$Close r104;
        java.net.InetAddress $r33;
        com.rabbitmq.client.impl.AMQCommand $r7, $r25;
        com.rabbitmq.client.impl.CredentialsProvider $r18, $r19, $r20, $r47, $r50, $r71, $r74, $r75, $r76;
        com.rabbitmq.client.ShutdownListener $r53;
        java.lang.Throwable $r91, $r94, $r99, $r107;
        java.util.concurrent.Callable $r51;
        com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo $r126;
        java.lang.String $r14, $r34, $r44, $r52, $r67, $r84, $r106, r111, r112;
        com.rabbitmq.client.ProtocolVersionMismatchException $r118;
        com.rabbitmq.client.LongString $r13, $r28, $r81, r113, r114;
        java.lang.IllegalStateException $r121;
        com.rabbitmq.client.AMQP$Connection$Start r110;
        boolean $z0, $z1, $z2, $z3;
        com.rabbitmq.client.impl.FrameHandler $r3, $r4, $r5, $r32, $r35, $r89, $r93, $r95, $r97, $r100, $r108;
        com.rabbitmq.client.impl.ChannelManager $r30;
        com.rabbitmq.client.PossibleAuthenticationFailureException $r125;
        java.lang.String[] $r15;
        com.rabbitmq.client.AMQP$Connection$Secure $r27;
        com.rabbitmq.client.AMQP$Connection$TuneOk$Builder $r38, $r39, $r40, $r127;
        com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation $r116;

        r0 := @this: com.rabbitmq.client.impl.AMQConnection;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void initializeConsumerWorkService()>();

        specialinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void initializeHeartbeatSender()>();

        r0.<com.rabbitmq.client.impl.AMQConnection: boolean _running> = 1;

        $r116 = new com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation;

        specialinvoke $r116.<com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation: void <init>()>();

        $r2 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        virtualinvoke $r2.<com.rabbitmq.client.impl.AMQChannel: void enqueueRpc(com.rabbitmq.client.impl.AMQChannel$RpcContinuation)>($r116);

     label01:
        $r3 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $i0 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        interfaceinvoke $r3.<com.rabbitmq.client.impl.FrameHandler: void setTimeout(int)>($i0);

        $r4 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r4.<com.rabbitmq.client.impl.FrameHandler: void sendHeader()>();

     label02:
        goto label04;

     label03:
        $r107 := @caughtexception;

        $r108 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r108.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r107;

     label04:
        $r5 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r5.<com.rabbitmq.client.impl.FrameHandler: void initialize(com.rabbitmq.client.impl.AMQConnection)>(r0);

        r109 = null;

     label05:
        $i1 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        $i2 = $i1 / 2;

        $r6 = virtualinvoke $r116.<com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation: java.lang.Object getReply(int)>($i2);

        $r7 = (com.rabbitmq.client.impl.AMQCommand) $r6;

        $r8 = virtualinvoke $r7.<com.rabbitmq.client.impl.AMQCommand: com.rabbitmq.client.impl.Method getMethod()>();

        r110 = (com.rabbitmq.client.AMQP$Connection$Start) $r8;

        $r9 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: java.util.Map getServerProperties()>();

        $r10 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r9);

        r0.<com.rabbitmq.client.impl.AMQConnection: java.util.Map _serverProperties> = $r10;

        $r117 = new com.rabbitmq.client.impl.Version;

        $i3 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: int getVersionMajor()>();

        $i4 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: int getVersionMinor()>();

        specialinvoke $r117.<com.rabbitmq.client.impl.Version: void <init>(int,int)>($i3, $i4);

        $r12 = <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion>;

        $z0 = staticinvoke <com.rabbitmq.client.impl.Version: boolean checkVersion(com.rabbitmq.client.impl.Version,com.rabbitmq.client.impl.Version)>($r12, $r117);

        if $z0 != 0 goto label06;

        $r118 = new com.rabbitmq.client.ProtocolVersionMismatchException;

        $r86 = <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion>;

        specialinvoke $r118.<com.rabbitmq.client.ProtocolVersionMismatchException: void <init>(com.rabbitmq.client.impl.Version,com.rabbitmq.client.impl.Version)>($r86, $r117);

        throw $r118;

     label06:
        $r13 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: com.rabbitmq.client.LongString getMechanisms()>();

        $r14 = interfaceinvoke $r13.<com.rabbitmq.client.LongString: java.lang.String toString()>();

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $r16 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.SaslConfig saslConfig>;

        $r17 = interfaceinvoke $r16.<com.rabbitmq.client.SaslConfig: com.rabbitmq.client.SaslMechanism getSaslMechanism(java.lang.String[])>($r15);

        if $r17 != null goto label07;

        $r120 = new java.io.IOException;

        $r119 = new java.lang.StringBuilder;

        specialinvoke $r119.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No compatible authentication mechanism found - server offered [");

        $r81 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: com.rabbitmq.client.LongString getMechanisms()>();

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r120.<java.io.IOException: void <init>(java.lang.String)>($r84);

        throw $r120;

     label07:
        $r18 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r111 = interfaceinvoke $r18.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        $r19 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r112 = interfaceinvoke $r19.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        $r20 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r21 = interfaceinvoke $r20.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        if $r21 == null goto label09;

        $r70 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        if $r70 != null goto label08;

        $r121 = new java.lang.IllegalStateException;

        specialinvoke $r121.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Credentials can expire, a credentials refresh service should be set");

        throw $r121;

     label08:
        $r72 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        $r71 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r73 = interfaceinvoke $r71.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        $z2 = interfaceinvoke $r72.<com.rabbitmq.client.impl.CredentialsRefreshService: boolean isApproachingExpiration(java.time.Duration)>($r73);

        if $z2 == 0 goto label09;

        $r74 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        interfaceinvoke $r74.<com.rabbitmq.client.impl.CredentialsProvider: void refresh()>();

        $r75 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r111 = interfaceinvoke $r75.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        $r76 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r112 = interfaceinvoke $r76.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

     label09:
        r113 = null;

        r114 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: com.rabbitmq.client.LongString handleChallenge(com.rabbitmq.client.LongString,java.lang.String,java.lang.String)>(null, r111, r112);

     label10:
        if r113 != null goto label11;

        $r122 = new com.rabbitmq.client.AMQP$Connection$StartOk$Builder;

        specialinvoke $r122.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: void <init>()>();

        $r65 = r0.<com.rabbitmq.client.impl.AMQConnection: java.util.Map _clientProperties>;

        $r66 = virtualinvoke $r122.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder clientProperties(java.util.Map)>($r65);

        $r67 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: java.lang.String getName()>();

        $r68 = virtualinvoke $r66.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder mechanism(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder response(com.rabbitmq.client.LongString)>(r114);

        $r115 = virtualinvoke $r69.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk build()>();

        goto label12;

     label11:
        $r123 = new com.rabbitmq.client.AMQP$Connection$SecureOk$Builder;

        specialinvoke $r123.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: void <init>()>();

        $r23 = virtualinvoke $r123.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: com.rabbitmq.client.AMQP$Connection$SecureOk$Builder response(com.rabbitmq.client.LongString)>(r114);

        $r115 = virtualinvoke $r23.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: com.rabbitmq.client.AMQP$Connection$SecureOk build()>();

     label12:
        $r24 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $i5 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        $i6 = $i5 / 2;

        $r25 = virtualinvoke $r24.<com.rabbitmq.client.impl.AMQChannel: com.rabbitmq.client.impl.AMQCommand rpc(com.rabbitmq.client.Method,int)>($r115, $i6);

        $r26 = virtualinvoke $r25.<com.rabbitmq.client.impl.AMQCommand: com.rabbitmq.client.impl.Method getMethod()>();

        $z1 = $r26 instanceof com.rabbitmq.client.AMQP$Connection$Tune;

        if $z1 == 0 goto label13;

        r109 = (com.rabbitmq.client.AMQP$Connection$Tune) $r26;

        goto label14;

     label13:
        $r27 = (com.rabbitmq.client.AMQP$Connection$Secure) $r26;

        $r28 = interfaceinvoke $r27.<com.rabbitmq.client.AMQP$Connection$Secure: com.rabbitmq.client.LongString getChallenge()>();

        r113 = $r28;

        r114 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: com.rabbitmq.client.LongString handleChallenge(com.rabbitmq.client.LongString,java.lang.String,java.lang.String)>($r28, r111, r112);

     label14:
        goto label17;

     label15:
        $r101 := @caughtexception;

        $r102 = virtualinvoke $r101.<com.rabbitmq.client.ShutdownSignalException: com.rabbitmq.client.Method getReason()>();

        $z3 = $r102 instanceof com.rabbitmq.client.AMQP$Connection$Close;

        if $z3 == 0 goto label16;

        r104 = (com.rabbitmq.client.AMQP$Connection$Close) $r102;

        $i19 = interfaceinvoke r104.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>();

        if $i19 != 403 goto label16;

        $r124 = new com.rabbitmq.client.AuthenticationFailureException;

        $r106 = interfaceinvoke r104.<com.rabbitmq.client.AMQP$Connection$Close: java.lang.String getReplyText()>();

        specialinvoke $r124.<com.rabbitmq.client.AuthenticationFailureException: void <init>(java.lang.String)>($r106);

        throw $r124;

     label16:
        $r125 = new com.rabbitmq.client.PossibleAuthenticationFailureException;

        specialinvoke $r125.<com.rabbitmq.client.PossibleAuthenticationFailureException: void <init>(java.lang.Throwable)>($r101);

        throw $r125;

     label17:
        if r109 == null goto label10;

     label18:
        goto label22;

     label19:
        $r99 := @caughtexception;

        $r100 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r100.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r99;

     label20:
        $r96 := @caughtexception;

        $r97 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r97.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        $r98 = staticinvoke <com.rabbitmq.client.impl.AMQChannel: java.io.IOException wrap(com.rabbitmq.client.ShutdownSignalException)>($r96);

        throw $r98;

     label21:
        $r94 := @caughtexception;

        $r95 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r95.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r94;

     label22:
        $i7 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedChannelMax>;

        $i8 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getChannelMax()>();

        $i9 = virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: int negotiateChannelMax(int,int)>($i7, $i8);

        $i10 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>($i9);

        if $i10 == $i9 goto label23;

        $r60 = <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER>;

        $r59 = newarray (java.lang.Object)[3];

        $i21 = (int) 65535;

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21);

        $r59[0] = $r61;

        $r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r59[1] = $r62;

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r59[2] = $r63;

        interfaceinvoke $r60.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Channel max must be between 0 and {}, value has been set to {} instead of {}", $r59);

     label23:
        $r29 = r0.<com.rabbitmq.client.impl.AMQConnection: java.util.concurrent.ThreadFactory threadFactory>;

        $r30 = virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.ChannelManager instantiateChannelManager(int,java.util.concurrent.ThreadFactory)>($i10, $r29);

        r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.ChannelManager _channelManager> = $r30;

        $i11 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedFrameMax>;

        $i12 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getFrameMax()>();

        $i13 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: int negotiatedMaxValue(int,int)>($i11, $i12);

        r0.<com.rabbitmq.client.impl.AMQConnection: int _frameMax> = $i13;

        $i14 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedHeartbeat>;

        $i15 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getHeartbeat()>();

        $i16 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: int negotiatedMaxValue(int,int)>($i14, $i15);

        $i17 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>($i16);

        if $i17 == $i16 goto label24;

        $r55 = <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER>;

        $r54 = newarray (java.lang.Object)[3];

        $i23 = (int) 65535;

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i23);

        $r54[0] = $r56;

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r54[1] = $r57;

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        $r54[2] = $r58;

        interfaceinvoke $r55.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Heartbeat must be between 0 and {}, value has been set to {} instead of {}", $r54);

     label24:
        virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void setHeartbeat(int)>($i17);

        $r126 = new com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo;

        $r32 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $r33 = interfaceinvoke $r32.<com.rabbitmq.client.impl.FrameHandler: java.net.InetAddress getAddress()>();

        $r34 = virtualinvoke $r33.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r35 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $i18 = interfaceinvoke $r35.<com.rabbitmq.client.impl.FrameHandler: int getPort()>();

        specialinvoke $r126.<com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo: void <init>(java.lang.String,int,com.rabbitmq.client.impl.AMQConnection$1)>($r34, $i18, null);

        r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.observation.ObservationCollector$ConnectionInfo connectionInfo> = $r126;

        $r37 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $r127 = new com.rabbitmq.client.AMQP$Connection$TuneOk$Builder;

        specialinvoke $r127.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: void <init>()>();

        $r38 = virtualinvoke $r127.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder channelMax(int)>($i10);

        $r39 = virtualinvoke $r38.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder frameMax(int)>($i13);

        $r40 = virtualinvoke $r39.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder heartbeat(int)>($i17);

        $r41 = virtualinvoke $r40.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk build()>();

        virtualinvoke $r37.<com.rabbitmq.client.impl.AMQChannel: void transmit(com.rabbitmq.client.Method)>($r41);

        $r43 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $r128 = new com.rabbitmq.client.AMQP$Connection$Open$Builder;

        specialinvoke $r128.<com.rabbitmq.client.AMQP$Connection$Open$Builder: void <init>()>();

        $r44 = r0.<com.rabbitmq.client.impl.AMQConnection: java.lang.String _virtualHost>;

        $r45 = virtualinvoke $r128.<com.rabbitmq.client.AMQP$Connection$Open$Builder: com.rabbitmq.client.AMQP$Connection$Open$Builder virtualHost(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<com.rabbitmq.client.AMQP$Connection$Open$Builder: com.rabbitmq.client.AMQP$Connection$Open build()>();

        virtualinvoke $r43.<com.rabbitmq.client.impl.AMQChannel: com.rabbitmq.client.impl.AMQCommand exnWrappingRpc(com.rabbitmq.client.Method)>($r46);

     label25:
        goto label28;

     label26:
        $r91 := @caughtexception;

        $r92 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.HeartbeatSender _heartbeatSender>;

        virtualinvoke $r92.<com.rabbitmq.client.impl.HeartbeatSender: void shutdown()>();

        $r93 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r93.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r91;

     label27:
        $r87 := @caughtexception;

        $r88 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.HeartbeatSender _heartbeatSender>;

        virtualinvoke $r88.<com.rabbitmq.client.impl.HeartbeatSender: void shutdown()>();

        $r89 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r89.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        $r90 = staticinvoke <com.rabbitmq.client.impl.AMQChannel: java.io.IOException wrap(com.rabbitmq.client.ShutdownSignalException)>($r87);

        throw $r90;

     label28:
        $r47 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r48 = interfaceinvoke $r47.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        if $r48 == null goto label29;

        $r49 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        $r50 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r51 = staticinvoke <com.rabbitmq.client.impl.AMQConnection$lambda_start_1__3171: java.util.concurrent.Callable bootstrap$(com.rabbitmq.client.impl.AMQConnection)>(r0);

        $r52 = interfaceinvoke $r49.<com.rabbitmq.client.impl.CredentialsRefreshService: java.lang.String register(com.rabbitmq.client.impl.CredentialsProvider,java.util.concurrent.Callable)>($r50, $r51);

        $r53 = staticinvoke <com.rabbitmq.client.impl.AMQConnection$lambda_start_2__3172: com.rabbitmq.client.ShutdownListener bootstrap$(com.rabbitmq.client.impl.AMQConnection,java.lang.String)>(r0, $r52);

        virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void addShutdownListener(com.rabbitmq.client.ShutdownListener)>($r53);

     label29:
        r0.<com.rabbitmq.client.impl.AMQConnection: boolean _inConnectionNegotiation> = 0;

        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch com.rabbitmq.client.ShutdownSignalException from label12 to label14 with label15;
        catch java.util.concurrent.TimeoutException from label05 to label18 with label19;
        catch com.rabbitmq.client.ShutdownSignalException from label05 to label18 with label20;
        catch java.io.IOException from label05 to label18 with label21;
        catch java.io.IOException from label22 to label25 with label26;
        catch com.rabbitmq.client.ShutdownSignalException from label22 to label25 with label27;
    }

Method: <com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>
    public void setClientProperties(java.util.Map)
    {
        com.rabbitmq.client.impl.ConnectionParams r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.impl.ConnectionParams;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map clientProperties> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.ConnectionParams: java.util.Map getClientProperties()>
    public java.util.Map getClientProperties()
    {
        com.rabbitmq.client.impl.ConnectionParams r0;
        java.util.Map $r1;

        r0 := @this: com.rabbitmq.client.impl.ConnectionParams;

        $r1 = r0.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map clientProperties>;

        return $r1;
    }

Method: <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>
    public com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address, java.lang.String) throws java.io.IOException
    {
        javax.net.ssl.SSLContext $r29;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory r1;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandler $r51;
        javax.net.ssl.SSLHandshakeException $r52;
        javax.net.ssl.SSLException $r49;
        com.rabbitmq.client.SocketChannelConfigurator $r26, $r48;
        com.rabbitmq.client.Address r0;
        java.lang.Throwable $r36, $r37, $r38, $r40;
        long $l3, $l5, $l10;
        javax.net.ssl.SSLSession $r21;
        java.lang.String r27, $r30, $r42;
        java.util.concurrent.atomic.AtomicLong $r4;
        java.util.concurrent.locks.Lock $r3, $r11, $r39;
        java.nio.channels.WritableByteChannel $r19;
        java.nio.channels.SocketChannel r44, $r46;
        boolean $z0, $z1, $z2, $z3;
        java.net.InetSocketAddress $r45;
        java.util.List $r6;
        java.net.Socket $r2, $r12, $r13, $r14, $r17, $r20;
        javax.net.ssl.SSLEngine $r31, r43;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState $r50;
        com.rabbitmq.client.impl.nio.NioLoopContext $r22;
        int $i0, $i1, $i2, $i4, $i6, $i7, $i8, $i9;
        com.rabbitmq.client.SslContextFactory $r28;
        com.rabbitmq.client.impl.nio.NioParams $r5, $r9, $r25, $r32, $r34, $r47;
        java.io.OutputStream $r18;
        java.nio.channels.ReadableByteChannel $r16;
        org.slf4j.Logger $r23, $r41;
        com.rabbitmq.client.SslEngineConfigurator $r33, $r35;
        java.lang.Object $r7;
        java.io.InputStream $r15;

        r1 := @this: com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory;

        r0 := @parameter0: com.rabbitmq.client.Address;

        r27 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        r43 = null;

        r44 = null;

     label01:
        $z1 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        if $z1 == 0 goto label02;

        $r28 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $r29 = interfaceinvoke $r28.<com.rabbitmq.client.SslContextFactory: javax.net.ssl.SSLContext create(java.lang.String)>(r27);

        $r30 = virtualinvoke r0.<com.rabbitmq.client.Address: java.lang.String getHost()>();

        $r31 = virtualinvoke $r29.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine(java.lang.String,int)>($r30, $i1);

        r43 = $r31;

        virtualinvoke $r31.<javax.net.ssl.SSLEngine: void setUseClientMode(boolean)>(1);

        $r32 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r33 = virtualinvoke $r32.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator getSslEngineConfigurator()>();

        if $r33 == null goto label02;

        $r34 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r35 = virtualinvoke $r34.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator getSslEngineConfigurator()>();

        interfaceinvoke $r35.<com.rabbitmq.client.SslEngineConfigurator: void configure(javax.net.ssl.SSLEngine)>($r31);

     label02:
        $r45 = virtualinvoke r0.<com.rabbitmq.client.Address: java.net.InetSocketAddress toInetSocketAddress(int)>($i1);

        $r46 = staticinvoke <java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>();

        r44 = $r46;

        virtualinvoke $r46.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

        $r47 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r48 = virtualinvoke $r47.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator getSocketChannelConfigurator()>();

        if $r48 == null goto label03;

        $r25 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r26 = virtualinvoke $r25.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator getSocketChannelConfigurator()>();

        interfaceinvoke $r26.<com.rabbitmq.client.SocketChannelConfigurator: void configure(java.nio.channels.SocketChannel)>($r46);

     label03:
        $r2 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i2 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r2.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r45, $i2);

        $z2 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        if $z2 == 0 goto label09;

        $r12 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i8 = virtualinvoke $r12.<java.net.Socket: int getSoTimeout()>();

        $r13 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i9 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r13.<java.net.Socket: void setSoTimeout(int)>($i9);

        virtualinvoke r43.<javax.net.ssl.SSLEngine: void beginHandshake()>();

     label04:
        $r14 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r15 = virtualinvoke $r14.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r16 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>($r15);

        $r17 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r18 = virtualinvoke $r17.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        $r19 = staticinvoke <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>($r18);

        $z3 = staticinvoke <com.rabbitmq.client.impl.nio.SslEngineHelper: boolean doHandshake(java.nio.channels.WritableByteChannel,java.nio.channels.ReadableByteChannel,javax.net.ssl.SSLEngine)>($r19, $r16, r43);

        if $z3 != 0 goto label05;

        $r23 = <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r23.<org.slf4j.Logger: void error(java.lang.String)>("TLS connection failed");

        $r49 = new javax.net.ssl.SSLException;

        specialinvoke $r49.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("TLS handshake failed");

        throw $r49;

     label05:
        $r20 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        virtualinvoke $r20.<java.net.Socket: void setSoTimeout(int)>($i8);

     label06:
        goto label08;

     label07:
        $r40 := @caughtexception;

        $r41 = <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: org.slf4j.Logger LOGGER>;

        $r52 = (javax.net.ssl.SSLHandshakeException) $r40;

        $r42 = virtualinvoke $r52.<javax.net.ssl.SSLHandshakeException: java.lang.String getMessage()>();

        interfaceinvoke $r41.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("TLS connection failed: {}", $r42);

        throw $r40;

     label08:
        $r21 = virtualinvoke r43.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>();

        staticinvoke <com.rabbitmq.client.impl.TlsUtils: void logPeerCertificateInfo(javax.net.ssl.SSLSession)>($r21);

     label09:
        virtualinvoke $r46.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

        $r3 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label10:
        $r4 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.atomic.AtomicLong globalConnectionCount>;

        $l3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r5 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $i4 = virtualinvoke $r5.<com.rabbitmq.client.impl.nio.NioParams: int getNbIoThreads()>();

        $l5 = (long) $i4;

        $l10 = $l3 % $l5;

        $r6 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.List nioLoopContexts>;

        $i6 = (int) $l10;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i6);

        $r22 = (com.rabbitmq.client.impl.nio.NioLoopContext) $r7;

        virtualinvoke $r22.<com.rabbitmq.client.impl.nio.NioLoopContext: void initStateIfNecessary()>();

        $r50 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState;

        $r9 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $i7 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int maxInboundMessageBodySize>;

        specialinvoke $r50.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState: void <init>(java.nio.channels.SocketChannel,com.rabbitmq.client.impl.nio.NioLoopContext,com.rabbitmq.client.impl.nio.NioParams,javax.net.ssl.SSLEngine,int)>($r46, $r22, $r9, r43, $i7);

        virtualinvoke $r50.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState: void startReading()>();

        $r51 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandler;

        specialinvoke $r51.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandler: void <init>(com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState)>($r50);

     label11:
        $r11 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

     label12:
        return $r51;

     label13:
        $r38 := @caughtexception;

     label14:
        $r39 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r39.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r38;

     label15:
        $r37 := @caughtexception;

     label16:
        if r43 == null goto label17;

        if r44 == null goto label17;

        staticinvoke <com.rabbitmq.client.impl.nio.SslEngineHelper: void close(java.nio.channels.WritableByteChannel,javax.net.ssl.SSLEngine)>(r44, r43);

     label17:
        if r44 == null goto label18;

        virtualinvoke r44.<java.nio.channels.SocketChannel: void close()>();

     label18:
        goto label20;

     label19:
        $r36 := @caughtexception;

     label20:
        throw $r37;

        catch javax.net.ssl.SSLHandshakeException from label04 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.io.IOException from label01 to label12 with label15;
        catch java.io.IOException from label13 to label15 with label15;
        catch java.io.IOException from label16 to label18 with label19;
    }

Method: <com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>
    public com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        java.net.Socket $r3, r8;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.impl.FrameHandler $r6;
        com.rabbitmq.client.impl.SocketFrameHandlerFactory r1;
        java.net.InetSocketAddress $r5;
        int $i0, $i1, $i2;
        java.lang.String r2;
        com.rabbitmq.client.Address r0;
        boolean $z0;

        r1 := @this: com.rabbitmq.client.impl.SocketFrameHandlerFactory;

        r0 := @parameter0: com.rabbitmq.client.Address;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        r8 = null;

     label1:
        $r3 = virtualinvoke r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: java.net.Socket createSocket(java.lang.String)>(r2);

        r8 = $r3;

        $r4 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.SocketConfigurator configurator>;

        interfaceinvoke $r4.<com.rabbitmq.client.SocketConfigurator: void configure(java.net.Socket)>($r3);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.Address: java.net.InetSocketAddress toInetSocketAddress(int)>($i1);

        $i2 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r3.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r5, $i2);

        $r6 = virtualinvoke r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(java.net.Socket)>($r3);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        staticinvoke <com.rabbitmq.client.impl.SocketFrameHandlerFactory: void quietTrySocketClose(java.net.Socket)>(r8);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector)>
    protected com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams, com.rabbitmq.client.impl.FrameHandler, com.rabbitmq.client.MetricsCollector)
    {
        com.rabbitmq.client.impl.FrameHandler r2;
        com.rabbitmq.client.impl.AMQConnection $r0;
        com.rabbitmq.client.ConnectionFactory r4;
        com.rabbitmq.client.impl.ConnectionParams r1;
        com.rabbitmq.client.observation.ObservationCollector $r5;
        com.rabbitmq.client.MetricsCollector r3;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.impl.ConnectionParams;

        r2 := @parameter1: com.rabbitmq.client.impl.FrameHandler;

        r3 := @parameter2: com.rabbitmq.client.MetricsCollector;

        $r0 = new com.rabbitmq.client.impl.AMQConnection;

        $r5 = r4.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>(r1, r2, r3, $r5);

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: boolean isAutomaticRecoveryEnabled()>
    public boolean isAutomaticRecoveryEnabled()
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $z0 = r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery>;

        return $z0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)>
    public com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)
    {
        com.rabbitmq.client.RecoveryDelayHandler $r7;
        com.rabbitmq.client.impl.ConnectionParams $r0;
        long $l3;
        com.rabbitmq.client.impl.ErrorOnWriteListener $r13;
        java.util.Map $r5;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8;
        java.util.concurrent.ScheduledExecutorService $r12;
        java.lang.String $r4;
        java.util.concurrent.ThreadFactory $r10;
        java.util.concurrent.ExecutorService r3, $r8, $r11;
        boolean $z0, $z1;
        com.rabbitmq.client.SaslConfig $r6;
        com.rabbitmq.client.ConnectionFactory r1;
        com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter $r14;
        java.util.function.Predicate $r15;
        com.rabbitmq.client.impl.CredentialsRefreshService $r19;
        com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier $r17;
        com.rabbitmq.client.impl.recovery.RetryHandler $r16;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.TrafficListener $r18;
        com.rabbitmq.client.ExceptionHandler $r9;

        r1 := @this: com.rabbitmq.client.ConnectionFactory;

        r3 := @parameter0: java.util.concurrent.ExecutorService;

        $r0 = new com.rabbitmq.client.impl.ConnectionParams;

        specialinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void <init>()>();

        $r2 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>($r2);

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setConsumerWorkServiceExecutor(java.util.concurrent.ExecutorService)>(r3);

        $r4 = r1.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setVirtualHost(java.lang.String)>($r4);

        $r5 = virtualinvoke r1.<com.rabbitmq.client.ConnectionFactory: java.util.Map getClientProperties()>();

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>($r5);

        $i0 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedFrameMax(int)>($i0);

        $i1 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedChannelMax(int)>($i1);

        $i2 = r1.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setShutdownTimeout(int)>($i2);

        $r6 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setSaslConfig(com.rabbitmq.client.SaslConfig)>($r6);

        $l3 = r1.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setNetworkRecoveryInterval(long)>($l3);

        $r7 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.RecoveryDelayHandler recoveryDelayHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRecoveryDelayHandler(com.rabbitmq.client.RecoveryDelayHandler)>($r7);

        $z0 = r1.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecovery(boolean)>($z0);

        $r8 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService topologyRecoveryExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryExecutor(java.util.concurrent.ExecutorService)>($r8);

        $r9 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)>($r9);

        $r10 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setThreadFactory(java.util.concurrent.ThreadFactory)>($r10);

        $i4 = r1.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setHandshakeTimeout(int)>($i4);

        $i5 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedHeartbeat(int)>($i5);

        $r11 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService shutdownExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setShutdownExecutor(java.util.concurrent.ExecutorService)>($r11);

        $r12 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ScheduledExecutorService heartbeatExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setHeartbeatExecutor(java.util.concurrent.ScheduledExecutorService)>($r12);

        $i6 = r1.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setChannelRpcTimeout(int)>($i6);

        $z1 = r1.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setChannelShouldCheckRpcResponseType(boolean)>($z1);

        $i7 = r1.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setWorkPoolTimeout(int)>($i7);

        $r13 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ErrorOnWriteListener errorOnWriteListener>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setErrorOnWriteListener(com.rabbitmq.client.impl.ErrorOnWriteListener)>($r13);

        $r14 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter topologyRecoveryFilter>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryFilter(com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter)>($r14);

        $r15 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.function.Predicate connectionRecoveryTriggeringCondition>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setConnectionRecoveryTriggeringCondition(java.util.function.Predicate)>($r15);

        $r16 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.RetryHandler topologyRecoveryRetryHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryRetryHandler(com.rabbitmq.client.impl.recovery.RetryHandler)>($r16);

        $r17 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier recoveredQueueNameSupplier>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRecoveredQueueNameSupplier(com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier)>($r17);

        $r18 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTrafficListener(com.rabbitmq.client.TrafficListener)>($r18);

        $r19 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setCredentialsRefreshService(com.rabbitmq.client.impl.CredentialsRefreshService)>($r19);

        $i8 = r1.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setMaxInboundMessageBodySize(int)>($i8);

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory()>
    protected synchronized com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory() throws java.io.IOException
    {
        com.rabbitmq.client.SocketConfigurator $r3;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory $r13;
        int $i0, $i1, $i2, $i3;
        com.rabbitmq.client.SslContextFactory $r4, $r15;
        com.rabbitmq.client.impl.nio.NioParams $r7, $r9, $r11, $r14;
        java.util.concurrent.ThreadFactory $r10, $r12;
        java.util.concurrent.ExecutorService $r5, $r8;
        boolean $z0, $z1, $z2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.SocketFrameHandlerFactory $r1;
        com.rabbitmq.client.impl.FrameHandlerFactory $r6, $r16;
        javax.net.SocketFactory $r2;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $z0 = r0.<com.rabbitmq.client.ConnectionFactory: boolean nio>;

        if $z0 == 0 goto label3;

        $r6 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory>;

        if $r6 != null goto label2;

        $r7 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r8 = virtualinvoke $r7.<com.rabbitmq.client.impl.nio.NioParams: java.util.concurrent.ExecutorService getNioExecutor()>();

        if $r8 != null goto label1;

        $r9 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r10 = virtualinvoke $r9.<com.rabbitmq.client.impl.nio.NioParams: java.util.concurrent.ThreadFactory getThreadFactory()>();

        if $r10 != null goto label1;

        $r11 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r12 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory getThreadFactory()>();

        virtualinvoke $r11.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.NioParams setThreadFactory(java.util.concurrent.ThreadFactory)>($r12);

     label1:
        $r13 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory;

        $i2 = r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout>;

        $r14 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $z2 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $r15 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $i3 = r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        specialinvoke $r13.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: void <init>(int,com.rabbitmq.client.impl.nio.NioParams,boolean,com.rabbitmq.client.SslContextFactory,int)>($i2, $r14, $z2, $r15, $i3);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory> = $r13;

     label2:
        $r16 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory>;

        return $r16;

     label3:
        $r1 = new com.rabbitmq.client.impl.SocketFrameHandlerFactory;

        $i0 = r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout>;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory>;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf>;

        $z1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $r5 = r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService shutdownExecutor>;

        $r4 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $i1 = r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        specialinvoke $r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: void <init>(int,javax.net.SocketFactory,com.rabbitmq.client.SocketConfigurator,boolean,java.util.concurrent.ExecutorService,com.rabbitmq.client.SslContextFactory,int)>($i0, $r2, $r3, $z1, $r5, $r4, $i1);

        return $r1;
    }

Method: <com.rabbitmq.client.DnsRecordIpAddressResolver: java.util.List getAddresses()>
    public java.util.List getAddresses() throws java.net.UnknownHostException
    {
        java.net.InetAddress[] $r4;
        java.util.ArrayList $r5;
        java.net.InetAddress r6;
        com.rabbitmq.client.DnsRecordIpAddressResolver r0;
        com.rabbitmq.client.ResolvedInetAddress $r7;
        int $i0, $i1, i2, i3;
        java.lang.String $r2;
        com.rabbitmq.client.Address $r1, $r3;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.DnsRecordIpAddressResolver;

        $r1 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address>;

        $r2 = virtualinvoke $r1.<com.rabbitmq.client.Address: java.lang.String getHost()>();

        $r3 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address>;

        $i0 = virtualinvoke $r3.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        $r4 = virtualinvoke r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: java.net.InetAddress[] resolveIpAddresses(java.lang.String)>($r2);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i2 = lengthof $r4;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r6 = $r4[i3];

        $r7 = new com.rabbitmq.client.ResolvedInetAddress;

        specialinvoke $r7.<com.rabbitmq.client.ResolvedInetAddress: void <init>(java.lang.String,java.net.InetAddress,int)>($r2, r6, $i1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        i3 = i3 + 1;

        goto label1;

     label2:
        return $r5;
    }

Method: <com.rabbitmq.client.ListAddressResolver: java.util.List getAddresses()>
    public java.util.List getAddresses()
    {
        java.util.List $r1;
        com.rabbitmq.client.ListAddressResolver r0;

        r0 := @this: com.rabbitmq.client.ListAddressResolver;

        $r1 = r0.<com.rabbitmq.client.ListAddressResolver: java.util.List addresses>;

        return $r1;
    }

Method: <com.rabbitmq.client.NoOpMetricsCollector: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.NoOpMetricsCollector r0;

        r0 := @this: com.rabbitmq.client.NoOpMetricsCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void init()>
    public void init() throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory $r1;
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection $r2, $r3;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection r0;

        r0 := @this: com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        $r1 = r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory cf>;

        $r2 = virtualinvoke $r1.<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection newConnection()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection delegate> = $r2;

        $r3 = r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection delegate>;

        specialinvoke r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void addAutomaticRecoveryListener(com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection)>($r3);

        return;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>
    public void <init>(com.rabbitmq.client.impl.ConnectionParams, com.rabbitmq.client.impl.FrameHandlerFactory, com.rabbitmq.client.AddressResolver, com.rabbitmq.client.MetricsCollector, com.rabbitmq.client.observation.ObservationCollector)
    {
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory $r20;
        com.rabbitmq.client.MetricsCollector r24;
        java.util.Map $r8, $r12, $r14;
        com.rabbitmq.client.observation.ObservationCollector r25;
        com.rabbitmq.client.AddressResolver r23;
        java.util.function.Predicate $r26, $r31;
        com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter $r28, $r32;
        java.util.concurrent.ConcurrentHashMap $r27;
        java.util.List $r2, $r4, $r6, $r10, $r16, $r18;
        com.rabbitmq.client.impl.recovery.RetryHandler $r29;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection r0;
        com.rabbitmq.client.impl.ConnectionParams r21;
        java.util.ArrayList $r1, $r3, $r5, $r9, $r15, $r17;
        java.util.LinkedHashMap $r7, $r11, $r13;
        com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier $r30, $r33;
        com.rabbitmq.client.impl.FrameHandlerFactory r22;
        java.lang.Object $r19;

        r0 := @this: com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        r21 := @parameter0: com.rabbitmq.client.impl.ConnectionParams;

        r22 := @parameter1: com.rabbitmq.client.impl.FrameHandlerFactory;

        r23 := @parameter2: com.rabbitmq.client.AddressResolver;

        r24 := @parameter3: com.rabbitmq.client.MetricsCollector;

        r25 := @parameter4: com.rabbitmq.client.observation.ObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List shutdownHooks> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r3);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List recoveryListeners> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r5);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List blockedListeners> = $r6;

        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        $r8 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r7);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map recordedQueues> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r9);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List recordedBindings> = $r10;

        $r11 = new java.util.LinkedHashMap;

        specialinvoke $r11.<java.util.LinkedHashMap: void <init>()>();

        $r12 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r11);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map recordedExchanges> = $r12;

        $r13 = new java.util.LinkedHashMap;

        specialinvoke $r13.<java.util.LinkedHashMap: void <init>()>();

        $r14 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r13);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map consumers> = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r16 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r15);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List consumerRecoveryListeners> = $r16;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        $r18 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r17);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List queueRecoveryListeners> = $r18;

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: boolean manuallyClosed> = 0;

        $r19 = new java.lang.Object;

        specialinvoke $r19.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.lang.Object recoveryLock> = $r19;

        $r20 = new com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory;

        specialinvoke $r20.<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>(r21, r22, r23, r24, r25);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory cf> = $r20;

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.ConnectionParams params> = r21;

        $r26 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: java.util.function.Predicate getConnectionRecoveryTriggeringCondition()>();

        if $r26 != null goto label1;

        $r31 = <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate DEFAULT_CONNECTION_RECOVERY_TRIGGERING_CONDITION>;

        goto label2;

     label1:
        $r31 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: java.util.function.Predicate getConnectionRecoveryTriggeringCondition()>();

     label2:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate connectionRecoveryTriggeringCondition> = $r31;

        specialinvoke r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void setupErrorOnWriteListenerForPotentialRecovery()>();

        $r27 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r27.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map channels> = $r27;

        $r28 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter getTopologyRecoveryFilter()>();

        if $r28 != null goto label3;

        $r32 = staticinvoke <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter letAllPassFilter()>();

        goto label4;

     label3:
        $r32 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter getTopologyRecoveryFilter()>();

     label4:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter topologyRecoveryFilter> = $r32;

        $r29 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RetryHandler getTopologyRecoveryRetryHandler()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RetryHandler retryHandler> = $r29;

        $r30 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier getRecoveredQueueNameSupplier()>();

        if $r30 != null goto label5;

        $r33 = <com.rabbitmq.client.impl.recovery.RecordedQueue: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier DEFAULT_QUEUE_NAME_SUPPLIER>;

        goto label6;

     label5:
        $r33 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier getRecoveredQueueNameSupplier()>();

     label6:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier recoveredQueueNameSupplier> = $r33;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int getPort()>
    public int getPort()
    {
        com.rabbitmq.client.ConnectionFactory r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $i0 = r0.<com.rabbitmq.client.ConnectionFactory: int port>;

        $z0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        return $i1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: boolean isSSL()>
    public boolean isSSL()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        boolean $z0, $z1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>();

        $z0 = $r1 instanceof javax.net.ssl.SSLSocketFactory;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        if $r2 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>
    public javax.net.SocketFactory getSocketFactory()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory>;

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>
    public static int portOrDefault(int, boolean)
    {
        int i0, $i2;
        boolean z0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i2 = (int) -1;

        if i0 == $i2 goto label1;

        return i0;

     label1:
        if z0 == 0 goto label2;

        return 5671;

     label2:
        return 5672;
    }

Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String getHost()>
    public java.lang.String getHost()
    {
        java.lang.String $r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host>;

        return $r1;
    }

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentType> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentType> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentEncoding> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentEncoding> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String expiration> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String expiration> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String messageId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String messageId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.util.Date r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.util.Date;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Date timestamp> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.util.Date r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.util.Date;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Date timestamp> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String type> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String type> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String userId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String userId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String appId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String appId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.Utils: com.rabbitmq.client.AMQP$BasicProperties fromJson(io.vertx.core.json.JsonObject)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String clusterId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQMessageConverter: com.rabbitmq.client.AMQP$BasicProperties$Builder buildBasicAmqpProperties(java.util.Map,org.apache.camel.Message)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String clusterId> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.QueueingConsumer: void <init>(com.rabbitmq.client.Channel)>
Related methods: 1
caller is : <com.mware.core.model.workQueue.RabbitMQWorkQueueSpout: void open()>
callee is : <com.rabbitmq.client.QueueingConsumer: void <init>(com.rabbitmq.client.Channel)>

Method: <com.rabbitmq.client.QueueingConsumer: void <init>(com.rabbitmq.client.Channel)>
Abstract method
-----------
Method to be analyzed: <com.rabbitmq.client.QueueingConsumer: void <init>(com.rabbitmq.client.Channel)>
Related methods: 1
caller is : <com.mware.core.model.workQueue.RabbitMQWebQueueRepository: void subscribeToBroadcastMessages(com.mware.core.model.workQueue.WebQueueRepository$BroadcastConsumer)>
callee is : <com.rabbitmq.client.QueueingConsumer: void <init>(com.rabbitmq.client.Channel)>

Method: <com.rabbitmq.client.QueueingConsumer: void <init>(com.rabbitmq.client.Channel)>
Abstract method
-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setThreadFactory(java.util.concurrent.ThreadFactory)>
Related methods: 1
caller is : <org.apache.james.backends.rabbitmq.RabbitMQConnectionFactory: com.rabbitmq.client.ConnectionFactory 'from'(org.apache.james.backends.rabbitmq.RabbitMQConfiguration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setThreadFactory(java.util.concurrent.ThreadFactory)>

Method: <com.rabbitmq.client.ConnectionFactory: void setThreadFactory(java.util.concurrent.ThreadFactory)>
    public void setThreadFactory(java.util.concurrent.ThreadFactory)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        java.util.concurrent.ThreadFactory r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.concurrent.ThreadFactory;

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setUri(java.net.URI)>
Related methods: 39
caller is : <org.apache.james.backends.rabbitmq.RabbitMQConnectionFactory: com.rabbitmq.client.ConnectionFactory 'from'(org.apache.james.backends.rabbitmq.RabbitMQConfiguration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setUri(java.net.URI)>

Method: <com.rabbitmq.client.ConnectionFactory: void setUri(java.net.URI)>
    public void setUri(java.net.URI) throws java.net.URISyntaxException, java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        java.net.URI r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r9, $r11, $r21, $r22, $r31, $r32, $r37, $r39, $r41;
        java.lang.String[] $r24;
        com.rabbitmq.client.SslContextFactory $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r10, $r12, $r15, $r16, $r17, $r18, $r23, $r25, $r26, $r27, $r28, $r33, $r34, $r35, $r36;
        com.rabbitmq.client.ConnectionFactory r13;
        java.lang.IllegalArgumentException $r38, $r40, $r42;

        r13 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.net.URI;

        $r1 = "amqp";

        $r2 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label01;

        goto label03;

     label01:
        $r4 = "amqps";

        $r5 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label02;

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setPort(int)>(5671);

        $r14 = r13.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        if $r14 != null goto label03;

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol()>();

        goto label03;

     label02:
        $r38 = new java.lang.IllegalArgumentException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong scheme in AMQP URI: ");

        $r10 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r38;

     label03:
        $r34 = virtualinvoke r0.<java.net.URI: java.lang.String getHost()>();

        if $r34 == null goto label04;

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>($r34);

     label04:
        $i0 = virtualinvoke r0.<java.net.URI: int getPort()>();

        $i7 = (int) -1;

        if $i0 == $i7 goto label05;

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setPort(int)>($i0);

     label05:
        $r15 = virtualinvoke r0.<java.net.URI: java.lang.String getRawUserInfo()>();

        if $r15 == null goto label07;

        $r24 = virtualinvoke $r15.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i4 = lengthof $r24;

        if $i4 <= 2 goto label06;

        $r40 = new java.lang.IllegalArgumentException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad user info in AMQP URI: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r40;

     label06:
        $r25 = $r24[0];

        $r26 = staticinvoke <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>($r25);

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>($r26);

        $i5 = lengthof $r24;

        if $i5 != 2 goto label07;

        $r27 = $r24[1];

        $r28 = staticinvoke <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>($r27);

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>($r28);

     label07:
        $r35 = virtualinvoke r0.<java.net.URI: java.lang.String getRawPath()>();

        if $r35 == null goto label09;

        $i2 = virtualinvoke $r35.<java.lang.String: int length()>();

        if $i2 <= 0 goto label09;

        $i3 = virtualinvoke $r35.<java.lang.String: int indexOf(int,int)>(47, 1);

        $i9 = (int) -1;

        if $i3 == $i9 goto label08;

        $r42 = new java.lang.IllegalArgumentException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple segments in path of AMQP URI: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r42;

     label08:
        $r16 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int)>(1);

        $r18 = staticinvoke <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>($r17);

        virtualinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>($r18);

     label09:
        $r36 = virtualinvoke r0.<java.net.URI: java.lang.String getRawQuery()>();

        if $r36 == null goto label10;

        $i1 = virtualinvoke $r36.<java.lang.String: int length()>();

        if $i1 <= 0 goto label10;

        specialinvoke r13.<com.rabbitmq.client.ConnectionFactory: void setQuery(java.lang.String)>($r36);

     label10:
        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setQuery(java.lang.String)>
    private void setQuery(java.lang.String)
    {
        java.lang.Throwable $r20;
        java.util.HashMap $r0;
        java.lang.String[] $r2, $r16;
        java.util.Map $r6;
        int $i0, i1, i2;
        java.util.function.BiConsumer r24;
        java.lang.String r1, $r11, $r13, r15, $r17, $r18, $r19, r22;
        boolean $z0;
        java.util.Map$Entry r23;
        java.util.Iterator $r4;
        com.rabbitmq.client.ConnectionFactory r9;
        java.util.Set $r3;
        java.lang.IllegalArgumentException $r21;
        java.lang.Object $r5, $r7, $r8, $r10, $r12, $r14;

        r9 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

     label01:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("&");

        i1 = lengthof $r2;

        i2 = 0;

     label02:
        if i2 >= i1 goto label04;

        r15 = $r2[i2];

        $r16 = virtualinvoke r15.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $r17 = $r16[0];

        $r18 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r17, "US-ASCII");

        r22 = null;

        $i0 = lengthof $r16;

        if $i0 <= 1 goto label03;

        $r19 = $r16[1];

        r22 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r19, "US-ASCII");

     label03:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r22);

        i2 = i2 + 1;

        goto label02;

     label04:
        goto label06;

     label05:
        $r20 := @caughtexception;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot parse the query parameters", $r20);

        throw $r21;

     label06:
        $r3 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r5;

        $r6 = <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS>;

        $r7 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r24 = (java.util.function.BiConsumer) $r8;

        if r24 == null goto label08;

        $r14 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r24.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r14, r9);

        goto label09;

     label08:
        $r10 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        $r12 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.String) $r12;

        virtualinvoke r9.<com.rabbitmq.client.ConnectionFactory: void processUriQueryParameter(java.lang.String,java.lang.String)>($r11, $r13);

     label09:
        goto label07;

     label10:
        return;

        catch java.io.IOException from label01 to label04 with label05;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void processUriQueryParameter(java.lang.String,java.lang.String)>
    protected void processUriQueryParameter(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: void setVirtualHost(java.lang.String)>
    public void setVirtualHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost> = r1;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setPassword(java.lang.String)>
    public void setPassword(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String $r3, r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r4 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r3 = interfaceinvoke $r2.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>($r3, r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getUsername()>
    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username>;

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setUsername(java.lang.String)>
    public void setUsername(java.lang.String)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsProvider $r3;
        com.rabbitmq.client.impl.DefaultCredentialsProvider $r1;
        java.lang.String r2, $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r4 = interfaceinvoke $r3.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        specialinvoke $r1.<com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>(r2, $r4);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider> = $r1;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String username> = r1;

        r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password> = r2;

        return;
    }

Method: <com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String getPassword()>
    public java.lang.String getPassword()
    {
        java.lang.String $r1;
        com.rabbitmq.client.impl.DefaultCredentialsProvider r0;

        r0 := @this: com.rabbitmq.client.impl.DefaultCredentialsProvider;

        $r1 = r0.<com.rabbitmq.client.impl.DefaultCredentialsProvider: java.lang.String password>;

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
    public void setPort(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = i0;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setHost(java.lang.String)>
    public void setHost(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.ConnectionFactory: java.lang.String host> = r1;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol()>
    public void useSslProtocol() throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        javax.net.ssl.SSLContext $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        javax.net.ssl.SSLParameters $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>();

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getSupportedSSLParameters()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()>();

        $r4 = staticinvoke <com.rabbitmq.client.ConnectionFactory: java.lang.String computeDefaultTlsProtocol(java.lang.String[])>($r3);

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String)>($r4);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String)>
    public void useSslProtocol(java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        java.lang.String r1;
        com.rabbitmq.client.TrustEverythingTrustManager $r2;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.rabbitmq.client.TrustEverythingTrustManager;

        specialinvoke $r2.<com.rabbitmq.client.TrustEverythingTrustManager: void <init>()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String,javax.net.ssl.TrustManager)>(r1, $r2);

        return;
    }

Method: <com.rabbitmq.client.TrustEverythingTrustManager: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.TrustEverythingTrustManager r0;
        org.slf4j.Logger $r1;

        r0 := @this: com.rabbitmq.client.TrustEverythingTrustManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/TrustEverythingTrustManager;");

        interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String)>("SECURITY ALERT: this trust manager trusts every certificate, effectively disabling peer verification. This is convenient for local development but offers no protection against man-in-the-middle attacks. Please see https://www.rabbitmq.com/ssl.html to learn more about peer certificate verification.");

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String,javax.net.ssl.TrustManager)>
    public void useSslProtocol(java.lang.String, javax.net.ssl.TrustManager) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        javax.net.ssl.SSLContext $r1;
        com.rabbitmq.client.ConnectionFactory r4;
        javax.net.ssl.TrustManager[] $r2;
        javax.net.ssl.TrustManager r3;
        java.lang.String r0;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: javax.net.ssl.TrustManager;

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(r0);

        $r2 = newarray (javax.net.ssl.TrustManager)[1];

        $r2[0] = r3;

        virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, $r2, null);

        virtualinvoke r4.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>($r1);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String computeDefaultTlsProtocol(java.lang.String[])>
    public static java.lang.String computeDefaultTlsProtocol(java.lang.String[])
    {
        int i0, i1;
        java.lang.String[] r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label3;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $r2 = "TLSv1.2";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        return r1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return "TLSv1";
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setPort(int)>
    public void setPort(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        r0.<com.rabbitmq.client.ConnectionFactory: int port> = i0;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>
    private static java.lang.String uriDecode(java.lang.String)
    {
        java.lang.Throwable $r3;
        java.lang.String r0, $r1, $r2;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "%2B");

        $r2 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r1, "US-ASCII");

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>
    private static java.lang.String uriDecode(java.lang.String)
    {
        java.lang.Throwable $r3;
        java.lang.String r0, $r1, $r2;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "%2B");

        $r2 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r1, "US-ASCII");

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String uriDecode(java.lang.String)>
    private static java.lang.String uriDecode(java.lang.String)
    {
        java.lang.Throwable $r3;
        java.lang.String r0, $r1, $r2;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "%2B");

        $r2 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r1, "US-ASCII");

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setRequestedFrameMax(int)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setRequestedFrameMax(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setRequestedFrameMax(int)>
    public void setRequestedFrameMax(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        r0.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol()>
Related methods: 13
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void useSslProtocol()>

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol()>
    public void useSslProtocol() throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        javax.net.ssl.SSLContext $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        javax.net.ssl.SSLParameters $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>();

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getSupportedSSLParameters()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()>();

        $r4 = staticinvoke <com.rabbitmq.client.ConnectionFactory: java.lang.String computeDefaultTlsProtocol(java.lang.String[])>($r3);

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String)>($r4);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String)>
    public void useSslProtocol(java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        java.lang.String r1;
        com.rabbitmq.client.TrustEverythingTrustManager $r2;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.rabbitmq.client.TrustEverythingTrustManager;

        specialinvoke $r2.<com.rabbitmq.client.TrustEverythingTrustManager: void <init>()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String,javax.net.ssl.TrustManager)>(r1, $r2);

        return;
    }

Method: <com.rabbitmq.client.TrustEverythingTrustManager: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.TrustEverythingTrustManager r0;
        org.slf4j.Logger $r1;

        r0 := @this: com.rabbitmq.client.TrustEverythingTrustManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/TrustEverythingTrustManager;");

        interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String)>("SECURITY ALERT: this trust manager trusts every certificate, effectively disabling peer verification. This is convenient for local development but offers no protection against man-in-the-middle attacks. Please see https://www.rabbitmq.com/ssl.html to learn more about peer certificate verification.");

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String,javax.net.ssl.TrustManager)>
    public void useSslProtocol(java.lang.String, javax.net.ssl.TrustManager) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        javax.net.ssl.SSLContext $r1;
        com.rabbitmq.client.ConnectionFactory r4;
        javax.net.ssl.TrustManager[] $r2;
        javax.net.ssl.TrustManager r3;
        java.lang.String r0;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: javax.net.ssl.TrustManager;

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(r0);

        $r2 = newarray (javax.net.ssl.TrustManager)[1];

        $r2[0] = r3;

        virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, $r2, null);

        virtualinvoke r4.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>($r1);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>
    public void useSslProtocol(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        javax.net.ssl.SSLSocketFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)>(r1);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory> = $r2;

        $r3 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void setSocketFactory(javax.net.SocketFactory)>($r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.slf4j.Logger $r0;
        com.rabbitmq.client.ConnectionFactory$1 $r2;
        int $i1;
        long $l0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/ConnectionFactory;");

        <com.rabbitmq.client.ConnectionFactory: org.slf4j.Logger LOGGER> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        $i1 = (int) $l0;

        <com.rabbitmq.client.ConnectionFactory: int DEFAULT_CHANNEL_RPC_TIMEOUT> = $i1;

        $r2 = new com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke $r2.<com.rabbitmq.client.ConnectionFactory$1: void <init>()>();

        <com.rabbitmq.client.ConnectionFactory: java.util.Map URI_QUERY_PARAMETER_HANDLERS> = $r2;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1: void <init>()>
    void <init>()
    {
        com.rabbitmq.client.ConnectionFactory$1 r0;
        java.util.function.BiConsumer $r1, $r2, $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory$1;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("heartbeat", $r1);

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_timeout", $r2);

        $r3 = staticinvoke <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory$1: java.lang.Object put(java.lang.Object,java.lang.Object)>("channel_max", $r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_0__3195: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_1__3196: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: java.util.function.BiConsumer bootstrap$()>
    public static java.util.function.BiConsumer bootstrap$()
    {
        com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197 $r0;

        $r0 = new com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197;

        specialinvoke $r0.<com.rabbitmq.client.ConnectionFactory$1$lambda_new_2__3197: void <init>()>();

        return $r0;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: java.lang.String computeDefaultTlsProtocol(java.lang.String[])>
    public static java.lang.String computeDefaultTlsProtocol(java.lang.String[])
    {
        int i0, i1;
        java.lang.String[] r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label3;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $r2 = "TLSv1.2";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        return r1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return "TLSv1";
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String)>
Related methods: 7
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String)>
    public void useSslProtocol(java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        java.lang.String r1;
        com.rabbitmq.client.TrustEverythingTrustManager $r2;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.rabbitmq.client.TrustEverythingTrustManager;

        specialinvoke $r2.<com.rabbitmq.client.TrustEverythingTrustManager: void <init>()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String,javax.net.ssl.TrustManager)>(r1, $r2);

        return;
    }

Method: <com.rabbitmq.client.TrustEverythingTrustManager: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.TrustEverythingTrustManager r0;
        org.slf4j.Logger $r1;

        r0 := @this: com.rabbitmq.client.TrustEverythingTrustManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/TrustEverythingTrustManager;");

        interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String)>("SECURITY ALERT: this trust manager trusts every certificate, effectively disabling peer verification. This is convenient for local development but offers no protection against man-in-the-middle attacks. Please see https://www.rabbitmq.com/ssl.html to learn more about peer certificate verification.");

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String,javax.net.ssl.TrustManager)>
    public void useSslProtocol(java.lang.String, javax.net.ssl.TrustManager) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        javax.net.ssl.SSLContext $r1;
        com.rabbitmq.client.ConnectionFactory r4;
        javax.net.ssl.TrustManager[] $r2;
        javax.net.ssl.TrustManager r3;
        java.lang.String r0;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: javax.net.ssl.TrustManager;

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(r0);

        $r2 = newarray (javax.net.ssl.TrustManager)[1];

        $r2[0] = r3;

        virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, $r2, null);

        virtualinvoke r4.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>($r1);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>
    public void useSslProtocol(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        javax.net.ssl.SSLSocketFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)>(r1);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory> = $r2;

        $r3 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void setSocketFactory(javax.net.SocketFactory)>($r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)>
    public static com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)
    {
        com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199 $r1;
        javax.net.ssl.SSLContext $r0;

        $r0 := @parameter0: javax.net.ssl.SSLContext;

        $r1 = new com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199;

        specialinvoke $r1.<com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: void <init>(javax.net.ssl.SSLContext)>($r0);

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setSocketFactory(javax.net.SocketFactory)>
    public void setSocketFactory(javax.net.SocketFactory)
    {
        javax.net.SocketFactory r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: javax.net.SocketFactory;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String,javax.net.ssl.TrustManager)>
Related methods: 5
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String,javax.net.ssl.TrustManager)>

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(java.lang.String,javax.net.ssl.TrustManager)>
    public void useSslProtocol(java.lang.String, javax.net.ssl.TrustManager) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        javax.net.ssl.SSLContext $r1;
        com.rabbitmq.client.ConnectionFactory r4;
        javax.net.ssl.TrustManager[] $r2;
        javax.net.ssl.TrustManager r3;
        java.lang.String r0;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: javax.net.ssl.TrustManager;

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(r0);

        $r2 = newarray (javax.net.ssl.TrustManager)[1];

        $r2[0] = r3;

        virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, $r2, null);

        virtualinvoke r4.<com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>($r1);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void useSslProtocol(javax.net.ssl.SSLContext)>
    public void useSslProtocol(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        javax.net.ssl.SSLSocketFactory $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = staticinvoke <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)>(r1);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory> = $r2;

        $r3 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: void setSocketFactory(javax.net.SocketFactory)>($r3);

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)>
    public static com.rabbitmq.client.SslContextFactory bootstrap$(javax.net.ssl.SSLContext)
    {
        com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199 $r1;
        javax.net.ssl.SSLContext $r0;

        $r0 := @parameter0: javax.net.ssl.SSLContext;

        $r1 = new com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199;

        specialinvoke $r1.<com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: void <init>(javax.net.ssl.SSLContext)>($r0);

        return $r1;
    }

Method: <com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: void <init>(javax.net.ssl.SSLContext)>
    public void <init>(javax.net.ssl.SSLContext)
    {
        com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199 $r0;
        javax.net.ssl.SSLContext $r1;

        $r0 := @this: com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199;

        $r1 := @parameter0: javax.net.ssl.SSLContext;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.rabbitmq.client.ConnectionFactory$lambda_useSslProtocol_0__3199: javax.net.ssl.SSLContext cap0> = $r1;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: void setSocketFactory(javax.net.SocketFactory)>
    public void setSocketFactory(javax.net.SocketFactory)
    {
        javax.net.SocketFactory r1;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: javax.net.SocketFactory;

        r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)>

Method: <com.rabbitmq.client.ConnectionFactory: void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)>
    public void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)
    {
        com.rabbitmq.client.ExceptionHandler r0;
        com.rabbitmq.client.ConnectionFactory r1;
        java.lang.IllegalArgumentException $r2;

        r1 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: com.rabbitmq.client.ExceptionHandler;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("exception handler cannot be null!");

        throw $r2;

     label1:
        r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = r0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)>
Related methods: 1
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)>

Method: <com.rabbitmq.client.ConnectionFactory: void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)>
    public void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)
    {
        com.rabbitmq.client.ExceptionHandler r0;
        com.rabbitmq.client.ConnectionFactory r1;
        java.lang.IllegalArgumentException $r2;

        r1 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: com.rabbitmq.client.ExceptionHandler;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("exception handler cannot be null!");

        throw $r2;

     label1:
        r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler> = r0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: com.rabbitmq.client.Address[] parseAddresses(java.lang.String)>
Related methods: 13
caller is : <org.apache.camel.component.rabbitmq.RabbitMQEndpoint: com.rabbitmq.client.Address[] parseAddresses()>
callee is : <com.rabbitmq.client.Address: com.rabbitmq.client.Address[] parseAddresses(java.lang.String)>

Method: <com.rabbitmq.client.Address: com.rabbitmq.client.Address[] parseAddresses(java.lang.String)>
    public static com.rabbitmq.client.Address[] parseAddresses(java.lang.String)
    {
        java.lang.String[] $r1;
        com.rabbitmq.client.Address[] r2;
        int $i0, $i1, i2;
        java.lang.String r0, $r3;
        com.rabbitmq.client.Address $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(" *, *");

        $i0 = lengthof $r1;

        r2 = newarray (com.rabbitmq.client.Address)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof $r1;

        if i2 >= $i1 goto label2;

        $r3 = $r1[i2];

        $r4 = staticinvoke <com.rabbitmq.client.Address: com.rabbitmq.client.Address parseAddress(java.lang.String)>($r3);

        r2[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.Address: com.rabbitmq.client.Address parseAddress(java.lang.String)>
    public static com.rabbitmq.client.Address parseAddress(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r3;
        boolean $z0;
        com.rabbitmq.client.Address $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.rabbitmq.client.Address: boolean isHostWithPort(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = new com.rabbitmq.client.Address;

        $r3 = staticinvoke <com.rabbitmq.client.Address: java.lang.String parseHost(java.lang.String)>(r0);

        $i0 = staticinvoke <com.rabbitmq.client.Address: int parsePort(java.lang.String)>(r0);

        specialinvoke $r2.<com.rabbitmq.client.Address: void <init>(java.lang.String,int)>($r3, $i0);

        return $r2;

     label1:
        $r1 = new com.rabbitmq.client.Address;

        specialinvoke $r1.<com.rabbitmq.client.Address: void <init>(java.lang.String)>(r0);

        return $r1;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        int $i1;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        $i1 = (int) -1;

        r0.<com.rabbitmq.client.Address: int _port> = $i1;

        return;
    }

Method: <com.rabbitmq.client.Address: boolean isHostWithPort(java.lang.String)>
    public static boolean isHostWithPort(java.lang.String)
    {
        int $i0, $i1, $i3;
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(":");

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>("]");

        $i3 = (int) -1;

        if $i1 != $i3 goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");

        return $z0;

     label1:
        if $i1 >= $i0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.rabbitmq.client.Address: java.lang.String parseHost(java.lang.String)>
    public static java.lang.String parseHost(java.lang.String)
    {
        org.slf4j.Logger $r9;
        java.lang.String[] $r2;
        java.lang.IllegalArgumentException $r12;
        int $i0, $i1, $i2, $i4;
        java.lang.StringBuilder $r5, $r6, $r7, $r11;
        java.lang.String r0, $r1, $r3, $r8;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(":");

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>("]");

        $i4 = (int) -1;

        if $i1 != $i4 goto label2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i2 = lengthof $r2;

        if $i2 <= 2 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Address ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seems to contain an unquoted IPv6 address. Make sure you quote IPv6 addresses like so: [2001:db8:85a3:8d3:1319:8a2e:370:7348]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String)>($r8);

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r12;

     label1:
        $r3 = $r2[0];

        return $r3;

     label2:
        if $i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;

     label3:
        return r0;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

Method: <com.rabbitmq.client.Address: int parsePort(java.lang.String)>
    public static int parsePort(java.lang.String)
    {
        java.lang.String[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12;
        java.lang.String r0, $r1, $r3, $r8;
        org.slf4j.Logger $r9;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r5, $r6, $r7, $r11;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(":");

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>("]");

        $i8 = (int) -1;

        if $i1 != $i8 goto label3;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i4 = lengthof $r2;

        if $i4 <= 2 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Address ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seems to contain an unquoted IPv6 address. Make sure you quote IPv6 addresses like so: [2001:db8:85a3:8d3:1319:8a2e:370:7348]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String)>($r8);

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r12;

     label1:
        $i5 = lengthof $r2;

        if $i5 != 2 goto label2;

        $r3 = $r2[1];

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        return $i6;

     label2:
        $i10 = (int) -1;

        return $i10;

     label3:
        if $i1 >= $i0 goto label4;

        $i2 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        return $i3;

     label4:
        $i12 = (int) -1;

        return $i12;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: com.rabbitmq.client.Address[] parseAddresses(java.lang.String)>
Related methods: 13
caller is : <net.jodah.lyra.ConnectionOptions: net.jodah.lyra.ConnectionOptions withAddresses(java.lang.String)>
callee is : <com.rabbitmq.client.Address: com.rabbitmq.client.Address[] parseAddresses(java.lang.String)>

Method: <com.rabbitmq.client.Address: com.rabbitmq.client.Address[] parseAddresses(java.lang.String)>
    public static com.rabbitmq.client.Address[] parseAddresses(java.lang.String)
    {
        java.lang.String[] $r1;
        com.rabbitmq.client.Address[] r2;
        int $i0, $i1, i2;
        java.lang.String r0, $r3;
        com.rabbitmq.client.Address $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(" *, *");

        $i0 = lengthof $r1;

        r2 = newarray (com.rabbitmq.client.Address)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof $r1;

        if i2 >= $i1 goto label2;

        $r3 = $r1[i2];

        $r4 = staticinvoke <com.rabbitmq.client.Address: com.rabbitmq.client.Address parseAddress(java.lang.String)>($r3);

        r2[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.Address: com.rabbitmq.client.Address parseAddress(java.lang.String)>
    public static com.rabbitmq.client.Address parseAddress(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r3;
        boolean $z0;
        com.rabbitmq.client.Address $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.rabbitmq.client.Address: boolean isHostWithPort(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = new com.rabbitmq.client.Address;

        $r3 = staticinvoke <com.rabbitmq.client.Address: java.lang.String parseHost(java.lang.String)>(r0);

        $i0 = staticinvoke <com.rabbitmq.client.Address: int parsePort(java.lang.String)>(r0);

        specialinvoke $r2.<com.rabbitmq.client.Address: void <init>(java.lang.String,int)>($r3, $i0);

        return $r2;

     label1:
        $r1 = new com.rabbitmq.client.Address;

        specialinvoke $r1.<com.rabbitmq.client.Address: void <init>(java.lang.String)>(r0);

        return $r1;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

Method: <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
Abstract method
Method: <com.rabbitmq.client.Address: void <init>(java.lang.String,int)>
    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        r0.<com.rabbitmq.client.Address: int _port> = i0;

        return;
    }

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        int $i1;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        $i1 = (int) -1;

        r0.<com.rabbitmq.client.Address: int _port> = $i1;

        return;
    }

Method: <com.rabbitmq.client.Address: boolean isHostWithPort(java.lang.String)>
    public static boolean isHostWithPort(java.lang.String)
    {
        int $i0, $i1, $i3;
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(":");

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>("]");

        $i3 = (int) -1;

        if $i1 != $i3 goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");

        return $z0;

     label1:
        if $i1 >= $i0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.rabbitmq.client.Address: java.lang.String parseHost(java.lang.String)>
    public static java.lang.String parseHost(java.lang.String)
    {
        org.slf4j.Logger $r9;
        java.lang.String[] $r2;
        java.lang.IllegalArgumentException $r12;
        int $i0, $i1, $i2, $i4;
        java.lang.StringBuilder $r5, $r6, $r7, $r11;
        java.lang.String r0, $r1, $r3, $r8;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(":");

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>("]");

        $i4 = (int) -1;

        if $i1 != $i4 goto label2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i2 = lengthof $r2;

        if $i2 <= 2 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Address ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seems to contain an unquoted IPv6 address. Make sure you quote IPv6 addresses like so: [2001:db8:85a3:8d3:1319:8a2e:370:7348]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String)>($r8);

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r12;

     label1:
        $r3 = $r2[0];

        return $r3;

     label2:
        if $i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;

     label3:
        return r0;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

Method: <com.rabbitmq.client.Address: int parsePort(java.lang.String)>
    public static int parsePort(java.lang.String)
    {
        java.lang.String[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12;
        java.lang.String r0, $r1, $r3, $r8;
        org.slf4j.Logger $r9;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r5, $r6, $r7, $r11;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(":");

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>("]");

        $i8 = (int) -1;

        if $i1 != $i8 goto label3;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i4 = lengthof $r2;

        if $i4 <= 2 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Address ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seems to contain an unquoted IPv6 address. Make sure you quote IPv6 addresses like so: [2001:db8:85a3:8d3:1319:8a2e:370:7348]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String)>($r8);

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r12;

     label1:
        $i5 = lengthof $r2;

        if $i5 != 2 goto label2;

        $r3 = $r2[1];

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        return $i6;

     label2:
        $i10 = (int) -1;

        return $i10;

     label3:
        if $i1 >= $i0 goto label4;

        $i2 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        return $i3;

     label4:
        $i12 = (int) -1;

        return $i12;
    }

Method: <com.rabbitmq.client.Address: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/Address;");

        <com.rabbitmq.client.Address: org.slf4j.Logger LOGGER> = $r0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: void <init>()>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: int ticket> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.lang.String queue> = "";

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean passive> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean durable> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean exclusive> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean autoDelete> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean nowait> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.util.Map arguments> = null;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: void <init>()>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: int ticket> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.lang.String queue> = "";

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean passive> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean durable> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean exclusive> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean autoDelete> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean nowait> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.util.Map arguments> = null;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder queue(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder queue(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder queue(java.lang.String)>
    public com.rabbitmq.client.AMQP$Queue$Declare$Builder queue(java.lang.String)
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.lang.String queue> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder queue(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder queue(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder queue(java.lang.String)>
    public com.rabbitmq.client.AMQP$Queue$Declare$Builder queue(java.lang.String)
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.lang.String queue> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder durable(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder durable(boolean)>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder durable(boolean)>
    public com.rabbitmq.client.AMQP$Queue$Declare$Builder durable(boolean)
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean durable> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder durable(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder durable(boolean)>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder durable(boolean)>
    public com.rabbitmq.client.AMQP$Queue$Declare$Builder durable(boolean)
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean durable> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder exclusive(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder exclusive(boolean)>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder exclusive(boolean)>
    public com.rabbitmq.client.AMQP$Queue$Declare$Builder exclusive(boolean)
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean exclusive> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder exclusive(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder exclusive(boolean)>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder exclusive(boolean)>
    public com.rabbitmq.client.AMQP$Queue$Declare$Builder exclusive(boolean)
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean exclusive> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder autoDelete(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder autoDelete(boolean)>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder autoDelete(boolean)>
    public com.rabbitmq.client.AMQP$Queue$Declare$Builder autoDelete(boolean)
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean autoDelete> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder autoDelete(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder autoDelete(boolean)>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder autoDelete(boolean)>
    public com.rabbitmq.client.AMQP$Queue$Declare$Builder autoDelete(boolean)
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean autoDelete> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder arguments(java.util.Map)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder arguments(java.util.Map)>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder arguments(java.util.Map)>
    public com.rabbitmq.client.AMQP$Queue$Declare$Builder arguments(java.util.Map)
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.util.Map arguments> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder arguments(java.util.Map)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder arguments(java.util.Map)>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder arguments(java.util.Map)>
    public com.rabbitmq.client.AMQP$Queue$Declare$Builder arguments(java.util.Map)
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.util.Map arguments> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare build()>
Related methods: 3
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare build()>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare build()>
    public com.rabbitmq.client.AMQP$Queue$Declare build()
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r1;
        java.util.Map $r2;
        int $i0;
        com.rabbitmq.client.impl.AMQImpl$Queue$Declare $r0;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        $r0 = new com.rabbitmq.client.impl.AMQImpl$Queue$Declare;

        $i0 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: int ticket>;

        $r3 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.lang.String queue>;

        $z4 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean passive>;

        $z3 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean durable>;

        $z2 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean exclusive>;

        $z1 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean autoDelete>;

        $z0 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean nowait>;

        $r2 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.util.Map arguments>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(int,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>($i0, $r3, $z4, $z3, $z2, $z1, $z0, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(int,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>
    public void <init>(int, java.lang.String, boolean, boolean, boolean, boolean, boolean, java.util.Map)
    {
        java.lang.IllegalStateException $r4;
        java.util.HashMap $r3;
        java.util.Map r2, $r5;
        int i0;
        com.rabbitmq.client.impl.AMQImpl$Queue$Declare r0;
        java.lang.String r1;
        boolean z0, z1, z2, z3, z4;

        r0 := @this: com.rabbitmq.client.impl.AMQImpl$Queue$Declare;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        z4 := @parameter6: boolean;

        r2 := @parameter7: java.util.Map;

        specialinvoke r0.<com.rabbitmq.client.impl.Method: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'queue\' must be non-null.");

        throw $r4;

     label1:
        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: int ticket> = i0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: java.lang.String queue> = r1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: boolean passive> = z0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: boolean durable> = z1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: boolean exclusive> = z2;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: boolean autoDelete> = z3;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: boolean nowait> = z4;

        if r2 != null goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(java.util.Map)>(r2);

        $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3);

     label3:
        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: java.util.Map arguments> = $r5;

        return;
    }

Method: <com.rabbitmq.client.impl.Method: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.Method r0;

        r0 := @this: com.rabbitmq.client.impl.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare build()>
Related methods: 3
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare build()>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare build()>
    public com.rabbitmq.client.AMQP$Queue$Declare build()
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r1;
        java.util.Map $r2;
        int $i0;
        com.rabbitmq.client.impl.AMQImpl$Queue$Declare $r0;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        $r0 = new com.rabbitmq.client.impl.AMQImpl$Queue$Declare;

        $i0 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: int ticket>;

        $r3 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.lang.String queue>;

        $z4 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean passive>;

        $z3 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean durable>;

        $z2 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean exclusive>;

        $z1 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean autoDelete>;

        $z0 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean nowait>;

        $r2 = r1.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: java.util.Map arguments>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(int,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>($i0, $r3, $z4, $z3, $z2, $z1, $z0, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.AMQImpl$Queue$Declare: void <init>(int,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>
    public void <init>(int, java.lang.String, boolean, boolean, boolean, boolean, boolean, java.util.Map)
    {
        java.lang.IllegalStateException $r4;
        java.util.HashMap $r3;
        java.util.Map r2, $r5;
        int i0;
        com.rabbitmq.client.impl.AMQImpl$Queue$Declare r0;
        java.lang.String r1;
        boolean z0, z1, z2, z3, z4;

        r0 := @this: com.rabbitmq.client.impl.AMQImpl$Queue$Declare;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        z4 := @parameter6: boolean;

        r2 := @parameter7: java.util.Map;

        specialinvoke r0.<com.rabbitmq.client.impl.Method: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'queue\' must be non-null.");

        throw $r4;

     label1:
        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: int ticket> = i0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: java.lang.String queue> = r1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: boolean passive> = z0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: boolean durable> = z1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: boolean exclusive> = z2;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: boolean autoDelete> = z3;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: boolean nowait> = z4;

        if r2 != null goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(java.util.Map)>(r2);

        $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3);

     label3:
        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Declare: java.util.Map arguments> = $r5;

        return;
    }

Method: <com.rabbitmq.client.impl.Method: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.Method r0;

        r0 := @this: com.rabbitmq.client.impl.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$BasicProperties: com.rabbitmq.client.AMQP$BasicProperties$Builder builder()>
Related methods: 16
caller is : <reactor.rabbitmq.Sender$PublishConfirmSubscriber: com.rabbitmq.client.AMQP$BasicProperties addReactorRabbitMQDeliveryTag(com.rabbitmq.client.AMQP$BasicProperties,long)>
callee is : <com.rabbitmq.client.AMQP$BasicProperties: com.rabbitmq.client.AMQP$BasicProperties$Builder builder()>

Method: <com.rabbitmq.client.AMQP$BasicProperties: com.rabbitmq.client.AMQP$BasicProperties$Builder builder()>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder builder()
    {
        java.util.Date $r20;
        java.lang.Integer $r8, $r10;
        java.util.Map $r6;
        com.rabbitmq.client.AMQP$BasicProperties$Builder $r0, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29;
        java.lang.String $r2, $r4, $r12, $r14, $r16, $r18, $r22, $r24, $r26, $r28;
        com.rabbitmq.client.AMQP$BasicProperties r1;

        r1 := @this: com.rabbitmq.client.AMQP$BasicProperties;

        $r0 = new com.rabbitmq.client.AMQP$BasicProperties$Builder;

        specialinvoke $r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>();

        $r2 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentType>;

        $r3 = virtualinvoke $r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)>($r2);

        $r4 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String contentEncoding>;

        $r5 = virtualinvoke $r3.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)>($r4);

        $r6 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Map headers>;

        $r7 = virtualinvoke $r5.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>($r6);

        $r8 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer deliveryMode>;

        $r9 = virtualinvoke $r7.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>($r8);

        $r10 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.Integer priority>;

        $r11 = virtualinvoke $r9.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>($r10);

        $r12 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String correlationId>;

        $r13 = virtualinvoke $r11.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>($r12);

        $r14 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String replyTo>;

        $r15 = virtualinvoke $r13.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>($r14);

        $r16 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String expiration>;

        $r17 = virtualinvoke $r15.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)>($r16);

        $r18 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String messageId>;

        $r19 = virtualinvoke $r17.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)>($r18);

        $r20 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.util.Date timestamp>;

        $r21 = virtualinvoke $r19.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)>($r20);

        $r22 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String type>;

        $r23 = virtualinvoke $r21.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)>($r22);

        $r24 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String userId>;

        $r25 = virtualinvoke $r23.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)>($r24);

        $r26 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String appId>;

        $r27 = virtualinvoke $r25.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)>($r26);

        $r28 = r1.<com.rabbitmq.client.AMQP$BasicProperties: java.lang.String clusterId>;

        $r29 = virtualinvoke $r27.<com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)>($r28);

        return $r29;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder clusterId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String clusterId> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder appId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String appId> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder userId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String userId> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder type(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String type> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder timestamp(java.util.Date)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.util.Date r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.util.Date;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Date timestamp> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder messageId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String messageId> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder expiration(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String expiration> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder replyTo(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String replyTo> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder correlationId(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String correlationId> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder priority(java.lang.Integer)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.Integer r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.Integer;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer priority> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder deliveryMode(java.lang.Integer)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.Integer r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.Integer;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.Integer deliveryMode> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder headers(java.util.Map)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.util.Map headers> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder contentEncoding(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentEncoding> = r1;

        return r0;
    }

Method: <com.rabbitmq.client.AMQP$BasicProperties$Builder: com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)>
    public com.rabbitmq.client.AMQP$BasicProperties$Builder contentType(java.lang.String)
    {
        com.rabbitmq.client.AMQP$BasicProperties$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$BasicProperties$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$BasicProperties$Builder: java.lang.String contentType> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(long)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(long)>

Method: <com.rabbitmq.client.ConnectionFactory: void setNetworkRecoveryInterval(long)>
    public void setNetworkRecoveryInterval(long)
    {
        long l0;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        l0 := @parameter0: long;

        r0.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval> = l0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setCredentialsRefreshService(com.rabbitmq.client.impl.CredentialsRefreshService)>
Related methods: 1
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setCredentialsRefreshService(com.rabbitmq.client.impl.CredentialsRefreshService)>

Method: <com.rabbitmq.client.ConnectionFactory: void setCredentialsRefreshService(com.rabbitmq.client.impl.CredentialsRefreshService)>
    public void setCredentialsRefreshService(com.rabbitmq.client.impl.CredentialsRefreshService)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.CredentialsRefreshService r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.impl.CredentialsRefreshService;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.List,java.lang.String)>
Related methods: 23
caller is : <io.vertx.rabbitmq.impl.RabbitMQClientImpl: com.rabbitmq.client.Connection newConnection(io.vertx.core.Vertx,io.vertx.rabbitmq.RabbitMQOptions)>
callee is : <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.List,java.lang.String)>

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.List,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.List, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List r1;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.String r2;
        com.rabbitmq.client.Connection $r4;
        java.util.concurrent.ExecutorService $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService sharedExecutor>;

        $r4 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>($r3, r1, r2);

        return $r4;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, java.util.List, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.String r4;
        com.rabbitmq.client.Connection $r5;
        java.util.concurrent.ExecutorService r1;
        com.rabbitmq.client.AddressResolver $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        r2 := @parameter1: java.util.List;

        r4 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>(r2);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>(r1, $r3, r4);

        return $r5;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>
    protected com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)
    {
        com.rabbitmq.client.ConnectionFactory r4;
        com.rabbitmq.client.ListAddressResolver $r6;
        java.lang.IllegalArgumentException $r1;
        java.util.List r0;
        com.rabbitmq.client.DnsRecordIpAddressResolver $r2;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, $z1;
        com.rabbitmq.client.Address $r5;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide at least one address to connect to");

        throw $r1;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 1 goto label3;

        $r6 = new com.rabbitmq.client.ListAddressResolver;

        specialinvoke $r6.<com.rabbitmq.client.ListAddressResolver: void <init>(java.util.List)>(r0);

        return $r6;

     label3:
        $r2 = new com.rabbitmq.client.DnsRecordIpAddressResolver;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (com.rabbitmq.client.Address) $r3;

        $z1 = virtualinvoke r4.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        specialinvoke $r2.<com.rabbitmq.client.DnsRecordIpAddressResolver: void <init>(com.rabbitmq.client.Address,boolean)>($r5, $z1);

        return $r2;
    }

Method: <com.rabbitmq.client.ConnectionFactory: boolean isSSL()>
    public boolean isSSL()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        boolean $z0, $z1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>();

        $z0 = $r1 instanceof javax.net.ssl.SSLSocketFactory;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        if $r2 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.rabbitmq.client.ListAddressResolver: void <init>(java.util.List)>
    public void <init>(java.util.List)
    {
        java.util.List r1;
        com.rabbitmq.client.ListAddressResolver r0;

        r0 := @this: com.rabbitmq.client.ListAddressResolver;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ListAddressResolver: java.util.List addresses> = r1;

        return;
    }

Method: <com.rabbitmq.client.DnsRecordIpAddressResolver: void <init>(com.rabbitmq.client.Address,boolean)>
    public void <init>(com.rabbitmq.client.Address, boolean)
    {
        com.rabbitmq.client.DnsRecordIpAddressResolver r0;
        com.rabbitmq.client.Address r1;
        boolean z0;

        r0 := @this: com.rabbitmq.client.DnsRecordIpAddressResolver;

        r1 := @parameter0: com.rabbitmq.client.Address;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address> = r1;

        r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: boolean ssl> = z0;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, com.rabbitmq.client.AddressResolver, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.lang.Throwable $r24, $r25, r26;
        com.rabbitmq.client.impl.ConnectionParams $r4;
        java.util.concurrent.TimeoutException $r10;
        java.util.HashMap $r21;
        com.rabbitmq.client.MetricsCollector $r1, $r15, $r17, $r20;
        com.rabbitmq.client.NoOpMetricsCollector $r23;
        java.util.Map $r22;
        com.rabbitmq.client.observation.ObservationCollector $r19;
        java.lang.String r5;
        java.util.concurrent.ExecutorService r3;
        com.rabbitmq.client.AddressResolver r6;
        boolean $z0, $z1, $z2, $z3;
        com.rabbitmq.client.impl.FrameHandler $r14;
        com.rabbitmq.client.ConnectionFactory r0;
        java.util.Iterator $r8;
        com.rabbitmq.client.impl.AMQConnection $r16;
        java.io.IOException $r9, $r11;
        com.rabbitmq.client.impl.FrameHandlerFactory $r2;
        java.util.List $r7;
        java.lang.Object $r12;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection $r18;
        com.rabbitmq.client.Address r13;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r3 := @parameter0: java.util.concurrent.ExecutorService;

        r6 := @parameter1: com.rabbitmq.client.AddressResolver;

        r5 := @parameter2: java.lang.String;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        if $r1 != null goto label01;

        $r23 = new com.rabbitmq.client.NoOpMetricsCollector;

        specialinvoke $r23.<com.rabbitmq.client.NoOpMetricsCollector: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector> = $r23;

     label01:
        $r2 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory()>();

        $r4 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)>(r3);

        if r5 == null goto label02;

        $r21 = new java.util.HashMap;

        $r22 = virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map getClientProperties()>();

        specialinvoke $r21.<java.util.HashMap: void <init>(java.util.Map)>($r22);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_name", r5);

        virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>($r21);

     label02:
        $z0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isAutomaticRecoveryEnabled()>();

        if $z0 == 0 goto label03;

        $r18 = new com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        $r20 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r19 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector>;

        specialinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>($r4, $r2, r6, $r20, $r19);

        virtualinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void init()>();

        return $r18;

     label03:
        $r7 = interfaceinvoke r6.<com.rabbitmq.client.AddressResolver: java.util.List getAddresses()>();

        r26 = null;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r12 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.rabbitmq.client.Address) $r12;

     label05:
        $r14 = interfaceinvoke $r2.<com.rabbitmq.client.impl.FrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>(r13, r5);

        $r15 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r16 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector)>($r4, $r14, $r15);

        virtualinvoke $r16.<com.rabbitmq.client.impl.AMQConnection: void start()>();

        $r17 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        interfaceinvoke $r17.<com.rabbitmq.client.MetricsCollector: void newConnection(com.rabbitmq.client.Connection)>($r16);

     label06:
        return $r16;

     label07:
        $r25 := @caughtexception;

        r26 = $r25;

        goto label09;

     label08:
        $r24 := @caughtexception;

        r26 = $r24;

     label09:
        goto label04;

     label10:
        if r26 == null goto label12;

        $z2 = r26 instanceof java.io.IOException;

        if $z2 == 0 goto label11;

        $r11 = (java.io.IOException) r26;

        throw $r11;

     label11:
        $z3 = r26 instanceof java.util.concurrent.TimeoutException;

        if $z3 == 0 goto label12;

        $r10 = (java.util.concurrent.TimeoutException) r26;

        throw $r10;

     label12:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("failed to connect");

        throw $r9;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.util.concurrent.TimeoutException from label05 to label06 with label08;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r1;
        java.util.function.Predicate $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.recovery.AutorecoveringConnection$lambda_static_0__3140: java.util.function.Predicate bootstrap$()>();

        <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate DEFAULT_CONNECTION_RECOVERY_TRIGGERING_CONDITION> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/recovery/AutorecoveringConnection;");

        <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: org.slf4j.Logger LOGGER> = $r1;

        return;
    }

Method: <com.rabbitmq.client.NoOpMetricsCollector: void newConnection(com.rabbitmq.client.Connection)>
    public void newConnection(com.rabbitmq.client.Connection)
    {
        com.rabbitmq.client.Connection r1;
        com.rabbitmq.client.NoOpMetricsCollector r0;

        r0 := @this: com.rabbitmq.client.NoOpMetricsCollector;

        r1 := @parameter0: com.rabbitmq.client.Connection;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void start()>
    public void start() throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.lang.Integer $r56, $r57, $r58, $r61, $r62, $r63;
        com.rabbitmq.client.AuthenticationFailureException $r124;
        com.rabbitmq.client.impl.Method $r8, $r26;
        com.rabbitmq.client.SaslMechanism $r17;
        java.util.Map $r9, $r10, $r65;
        java.time.Duration $r21, $r48, $r73;
        com.rabbitmq.client.AMQP$Connection$Open $r46;
        com.rabbitmq.client.SaslConfig $r16;
        com.rabbitmq.client.impl.CredentialsRefreshService $r49, $r70, $r72;
        java.lang.StringBuilder $r80, $r82, $r83, $r119;
        java.lang.Object[] $r54, $r59;
        com.rabbitmq.client.AMQP$Connection$StartOk$Builder $r66, $r68, $r69, $r122;
        com.rabbitmq.client.AMQP$Connection$Open$Builder $r45, $r128;
        com.rabbitmq.client.AMQP$Connection$Tune r109;
        java.io.IOException $r90, $r98, $r120;
        com.rabbitmq.client.impl.HeartbeatSender $r88, $r92;
        com.rabbitmq.client.AMQP$Connection$TuneOk $r41;
        java.util.concurrent.ThreadFactory $r29;
        com.rabbitmq.client.impl.AMQChannel $r2, $r24, $r37, $r43;
        com.rabbitmq.client.impl.Version $r12, $r86, $r117;
        com.rabbitmq.client.ShutdownSignalException $r87, $r96, $r101;
        com.rabbitmq.client.AMQP$Connection$SecureOk$Builder $r23, $r123;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i23;
        com.rabbitmq.client.Method $r102, $r115;
        org.slf4j.Logger $r55, $r60;
        com.rabbitmq.client.impl.AMQConnection r0;
        java.lang.Object $r6;
        com.rabbitmq.client.AMQP$Connection$Close r104;
        java.net.InetAddress $r33;
        com.rabbitmq.client.impl.AMQCommand $r7, $r25;
        com.rabbitmq.client.impl.CredentialsProvider $r18, $r19, $r20, $r47, $r50, $r71, $r74, $r75, $r76;
        com.rabbitmq.client.ShutdownListener $r53;
        java.lang.Throwable $r91, $r94, $r99, $r107;
        java.util.concurrent.Callable $r51;
        com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo $r126;
        java.lang.String $r14, $r34, $r44, $r52, $r67, $r84, $r106, r111, r112;
        com.rabbitmq.client.ProtocolVersionMismatchException $r118;
        com.rabbitmq.client.LongString $r13, $r28, $r81, r113, r114;
        java.lang.IllegalStateException $r121;
        com.rabbitmq.client.AMQP$Connection$Start r110;
        boolean $z0, $z1, $z2, $z3;
        com.rabbitmq.client.impl.FrameHandler $r3, $r4, $r5, $r32, $r35, $r89, $r93, $r95, $r97, $r100, $r108;
        com.rabbitmq.client.impl.ChannelManager $r30;
        com.rabbitmq.client.PossibleAuthenticationFailureException $r125;
        java.lang.String[] $r15;
        com.rabbitmq.client.AMQP$Connection$Secure $r27;
        com.rabbitmq.client.AMQP$Connection$TuneOk$Builder $r38, $r39, $r40, $r127;
        com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation $r116;

        r0 := @this: com.rabbitmq.client.impl.AMQConnection;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void initializeConsumerWorkService()>();

        specialinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void initializeHeartbeatSender()>();

        r0.<com.rabbitmq.client.impl.AMQConnection: boolean _running> = 1;

        $r116 = new com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation;

        specialinvoke $r116.<com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation: void <init>()>();

        $r2 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        virtualinvoke $r2.<com.rabbitmq.client.impl.AMQChannel: void enqueueRpc(com.rabbitmq.client.impl.AMQChannel$RpcContinuation)>($r116);

     label01:
        $r3 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $i0 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        interfaceinvoke $r3.<com.rabbitmq.client.impl.FrameHandler: void setTimeout(int)>($i0);

        $r4 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r4.<com.rabbitmq.client.impl.FrameHandler: void sendHeader()>();

     label02:
        goto label04;

     label03:
        $r107 := @caughtexception;

        $r108 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r108.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r107;

     label04:
        $r5 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r5.<com.rabbitmq.client.impl.FrameHandler: void initialize(com.rabbitmq.client.impl.AMQConnection)>(r0);

        r109 = null;

     label05:
        $i1 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        $i2 = $i1 / 2;

        $r6 = virtualinvoke $r116.<com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation: java.lang.Object getReply(int)>($i2);

        $r7 = (com.rabbitmq.client.impl.AMQCommand) $r6;

        $r8 = virtualinvoke $r7.<com.rabbitmq.client.impl.AMQCommand: com.rabbitmq.client.impl.Method getMethod()>();

        r110 = (com.rabbitmq.client.AMQP$Connection$Start) $r8;

        $r9 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: java.util.Map getServerProperties()>();

        $r10 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r9);

        r0.<com.rabbitmq.client.impl.AMQConnection: java.util.Map _serverProperties> = $r10;

        $r117 = new com.rabbitmq.client.impl.Version;

        $i3 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: int getVersionMajor()>();

        $i4 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: int getVersionMinor()>();

        specialinvoke $r117.<com.rabbitmq.client.impl.Version: void <init>(int,int)>($i3, $i4);

        $r12 = <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion>;

        $z0 = staticinvoke <com.rabbitmq.client.impl.Version: boolean checkVersion(com.rabbitmq.client.impl.Version,com.rabbitmq.client.impl.Version)>($r12, $r117);

        if $z0 != 0 goto label06;

        $r118 = new com.rabbitmq.client.ProtocolVersionMismatchException;

        $r86 = <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion>;

        specialinvoke $r118.<com.rabbitmq.client.ProtocolVersionMismatchException: void <init>(com.rabbitmq.client.impl.Version,com.rabbitmq.client.impl.Version)>($r86, $r117);

        throw $r118;

     label06:
        $r13 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: com.rabbitmq.client.LongString getMechanisms()>();

        $r14 = interfaceinvoke $r13.<com.rabbitmq.client.LongString: java.lang.String toString()>();

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $r16 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.SaslConfig saslConfig>;

        $r17 = interfaceinvoke $r16.<com.rabbitmq.client.SaslConfig: com.rabbitmq.client.SaslMechanism getSaslMechanism(java.lang.String[])>($r15);

        if $r17 != null goto label07;

        $r120 = new java.io.IOException;

        $r119 = new java.lang.StringBuilder;

        specialinvoke $r119.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No compatible authentication mechanism found - server offered [");

        $r81 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: com.rabbitmq.client.LongString getMechanisms()>();

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r120.<java.io.IOException: void <init>(java.lang.String)>($r84);

        throw $r120;

     label07:
        $r18 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r111 = interfaceinvoke $r18.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        $r19 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r112 = interfaceinvoke $r19.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        $r20 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r21 = interfaceinvoke $r20.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        if $r21 == null goto label09;

        $r70 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        if $r70 != null goto label08;

        $r121 = new java.lang.IllegalStateException;

        specialinvoke $r121.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Credentials can expire, a credentials refresh service should be set");

        throw $r121;

     label08:
        $r72 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        $r71 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r73 = interfaceinvoke $r71.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        $z2 = interfaceinvoke $r72.<com.rabbitmq.client.impl.CredentialsRefreshService: boolean isApproachingExpiration(java.time.Duration)>($r73);

        if $z2 == 0 goto label09;

        $r74 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        interfaceinvoke $r74.<com.rabbitmq.client.impl.CredentialsProvider: void refresh()>();

        $r75 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r111 = interfaceinvoke $r75.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        $r76 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r112 = interfaceinvoke $r76.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

     label09:
        r113 = null;

        r114 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: com.rabbitmq.client.LongString handleChallenge(com.rabbitmq.client.LongString,java.lang.String,java.lang.String)>(null, r111, r112);

     label10:
        if r113 != null goto label11;

        $r122 = new com.rabbitmq.client.AMQP$Connection$StartOk$Builder;

        specialinvoke $r122.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: void <init>()>();

        $r65 = r0.<com.rabbitmq.client.impl.AMQConnection: java.util.Map _clientProperties>;

        $r66 = virtualinvoke $r122.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder clientProperties(java.util.Map)>($r65);

        $r67 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: java.lang.String getName()>();

        $r68 = virtualinvoke $r66.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder mechanism(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder response(com.rabbitmq.client.LongString)>(r114);

        $r115 = virtualinvoke $r69.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk build()>();

        goto label12;

     label11:
        $r123 = new com.rabbitmq.client.AMQP$Connection$SecureOk$Builder;

        specialinvoke $r123.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: void <init>()>();

        $r23 = virtualinvoke $r123.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: com.rabbitmq.client.AMQP$Connection$SecureOk$Builder response(com.rabbitmq.client.LongString)>(r114);

        $r115 = virtualinvoke $r23.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: com.rabbitmq.client.AMQP$Connection$SecureOk build()>();

     label12:
        $r24 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $i5 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        $i6 = $i5 / 2;

        $r25 = virtualinvoke $r24.<com.rabbitmq.client.impl.AMQChannel: com.rabbitmq.client.impl.AMQCommand rpc(com.rabbitmq.client.Method,int)>($r115, $i6);

        $r26 = virtualinvoke $r25.<com.rabbitmq.client.impl.AMQCommand: com.rabbitmq.client.impl.Method getMethod()>();

        $z1 = $r26 instanceof com.rabbitmq.client.AMQP$Connection$Tune;

        if $z1 == 0 goto label13;

        r109 = (com.rabbitmq.client.AMQP$Connection$Tune) $r26;

        goto label14;

     label13:
        $r27 = (com.rabbitmq.client.AMQP$Connection$Secure) $r26;

        $r28 = interfaceinvoke $r27.<com.rabbitmq.client.AMQP$Connection$Secure: com.rabbitmq.client.LongString getChallenge()>();

        r113 = $r28;

        r114 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: com.rabbitmq.client.LongString handleChallenge(com.rabbitmq.client.LongString,java.lang.String,java.lang.String)>($r28, r111, r112);

     label14:
        goto label17;

     label15:
        $r101 := @caughtexception;

        $r102 = virtualinvoke $r101.<com.rabbitmq.client.ShutdownSignalException: com.rabbitmq.client.Method getReason()>();

        $z3 = $r102 instanceof com.rabbitmq.client.AMQP$Connection$Close;

        if $z3 == 0 goto label16;

        r104 = (com.rabbitmq.client.AMQP$Connection$Close) $r102;

        $i19 = interfaceinvoke r104.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>();

        if $i19 != 403 goto label16;

        $r124 = new com.rabbitmq.client.AuthenticationFailureException;

        $r106 = interfaceinvoke r104.<com.rabbitmq.client.AMQP$Connection$Close: java.lang.String getReplyText()>();

        specialinvoke $r124.<com.rabbitmq.client.AuthenticationFailureException: void <init>(java.lang.String)>($r106);

        throw $r124;

     label16:
        $r125 = new com.rabbitmq.client.PossibleAuthenticationFailureException;

        specialinvoke $r125.<com.rabbitmq.client.PossibleAuthenticationFailureException: void <init>(java.lang.Throwable)>($r101);

        throw $r125;

     label17:
        if r109 == null goto label10;

     label18:
        goto label22;

     label19:
        $r99 := @caughtexception;

        $r100 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r100.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r99;

     label20:
        $r96 := @caughtexception;

        $r97 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r97.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        $r98 = staticinvoke <com.rabbitmq.client.impl.AMQChannel: java.io.IOException wrap(com.rabbitmq.client.ShutdownSignalException)>($r96);

        throw $r98;

     label21:
        $r94 := @caughtexception;

        $r95 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r95.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r94;

     label22:
        $i7 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedChannelMax>;

        $i8 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getChannelMax()>();

        $i9 = virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: int negotiateChannelMax(int,int)>($i7, $i8);

        $i10 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>($i9);

        if $i10 == $i9 goto label23;

        $r60 = <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER>;

        $r59 = newarray (java.lang.Object)[3];

        $i21 = (int) 65535;

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21);

        $r59[0] = $r61;

        $r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r59[1] = $r62;

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r59[2] = $r63;

        interfaceinvoke $r60.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Channel max must be between 0 and {}, value has been set to {} instead of {}", $r59);

     label23:
        $r29 = r0.<com.rabbitmq.client.impl.AMQConnection: java.util.concurrent.ThreadFactory threadFactory>;

        $r30 = virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.ChannelManager instantiateChannelManager(int,java.util.concurrent.ThreadFactory)>($i10, $r29);

        r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.ChannelManager _channelManager> = $r30;

        $i11 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedFrameMax>;

        $i12 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getFrameMax()>();

        $i13 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: int negotiatedMaxValue(int,int)>($i11, $i12);

        r0.<com.rabbitmq.client.impl.AMQConnection: int _frameMax> = $i13;

        $i14 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedHeartbeat>;

        $i15 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getHeartbeat()>();

        $i16 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: int negotiatedMaxValue(int,int)>($i14, $i15);

        $i17 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>($i16);

        if $i17 == $i16 goto label24;

        $r55 = <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER>;

        $r54 = newarray (java.lang.Object)[3];

        $i23 = (int) 65535;

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i23);

        $r54[0] = $r56;

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r54[1] = $r57;

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        $r54[2] = $r58;

        interfaceinvoke $r55.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Heartbeat must be between 0 and {}, value has been set to {} instead of {}", $r54);

     label24:
        virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void setHeartbeat(int)>($i17);

        $r126 = new com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo;

        $r32 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $r33 = interfaceinvoke $r32.<com.rabbitmq.client.impl.FrameHandler: java.net.InetAddress getAddress()>();

        $r34 = virtualinvoke $r33.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r35 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $i18 = interfaceinvoke $r35.<com.rabbitmq.client.impl.FrameHandler: int getPort()>();

        specialinvoke $r126.<com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo: void <init>(java.lang.String,int,com.rabbitmq.client.impl.AMQConnection$1)>($r34, $i18, null);

        r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.observation.ObservationCollector$ConnectionInfo connectionInfo> = $r126;

        $r37 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $r127 = new com.rabbitmq.client.AMQP$Connection$TuneOk$Builder;

        specialinvoke $r127.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: void <init>()>();

        $r38 = virtualinvoke $r127.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder channelMax(int)>($i10);

        $r39 = virtualinvoke $r38.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder frameMax(int)>($i13);

        $r40 = virtualinvoke $r39.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder heartbeat(int)>($i17);

        $r41 = virtualinvoke $r40.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk build()>();

        virtualinvoke $r37.<com.rabbitmq.client.impl.AMQChannel: void transmit(com.rabbitmq.client.Method)>($r41);

        $r43 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $r128 = new com.rabbitmq.client.AMQP$Connection$Open$Builder;

        specialinvoke $r128.<com.rabbitmq.client.AMQP$Connection$Open$Builder: void <init>()>();

        $r44 = r0.<com.rabbitmq.client.impl.AMQConnection: java.lang.String _virtualHost>;

        $r45 = virtualinvoke $r128.<com.rabbitmq.client.AMQP$Connection$Open$Builder: com.rabbitmq.client.AMQP$Connection$Open$Builder virtualHost(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<com.rabbitmq.client.AMQP$Connection$Open$Builder: com.rabbitmq.client.AMQP$Connection$Open build()>();

        virtualinvoke $r43.<com.rabbitmq.client.impl.AMQChannel: com.rabbitmq.client.impl.AMQCommand exnWrappingRpc(com.rabbitmq.client.Method)>($r46);

     label25:
        goto label28;

     label26:
        $r91 := @caughtexception;

        $r92 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.HeartbeatSender _heartbeatSender>;

        virtualinvoke $r92.<com.rabbitmq.client.impl.HeartbeatSender: void shutdown()>();

        $r93 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r93.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r91;

     label27:
        $r87 := @caughtexception;

        $r88 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.HeartbeatSender _heartbeatSender>;

        virtualinvoke $r88.<com.rabbitmq.client.impl.HeartbeatSender: void shutdown()>();

        $r89 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r89.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        $r90 = staticinvoke <com.rabbitmq.client.impl.AMQChannel: java.io.IOException wrap(com.rabbitmq.client.ShutdownSignalException)>($r87);

        throw $r90;

     label28:
        $r47 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r48 = interfaceinvoke $r47.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        if $r48 == null goto label29;

        $r49 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        $r50 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r51 = staticinvoke <com.rabbitmq.client.impl.AMQConnection$lambda_start_1__3171: java.util.concurrent.Callable bootstrap$(com.rabbitmq.client.impl.AMQConnection)>(r0);

        $r52 = interfaceinvoke $r49.<com.rabbitmq.client.impl.CredentialsRefreshService: java.lang.String register(com.rabbitmq.client.impl.CredentialsProvider,java.util.concurrent.Callable)>($r50, $r51);

        $r53 = staticinvoke <com.rabbitmq.client.impl.AMQConnection$lambda_start_2__3172: com.rabbitmq.client.ShutdownListener bootstrap$(com.rabbitmq.client.impl.AMQConnection,java.lang.String)>(r0, $r52);

        virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void addShutdownListener(com.rabbitmq.client.ShutdownListener)>($r53);

     label29:
        r0.<com.rabbitmq.client.impl.AMQConnection: boolean _inConnectionNegotiation> = 0;

        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch com.rabbitmq.client.ShutdownSignalException from label12 to label14 with label15;
        catch java.util.concurrent.TimeoutException from label05 to label18 with label19;
        catch com.rabbitmq.client.ShutdownSignalException from label05 to label18 with label20;
        catch java.io.IOException from label05 to label18 with label21;
        catch java.io.IOException from label22 to label25 with label26;
        catch com.rabbitmq.client.ShutdownSignalException from label22 to label25 with label27;
    }

Method: <com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>
    public void setClientProperties(java.util.Map)
    {
        com.rabbitmq.client.impl.ConnectionParams r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.impl.ConnectionParams;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map clientProperties> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.ConnectionParams: java.util.Map getClientProperties()>
    public java.util.Map getClientProperties()
    {
        com.rabbitmq.client.impl.ConnectionParams r0;
        java.util.Map $r1;

        r0 := @this: com.rabbitmq.client.impl.ConnectionParams;

        $r1 = r0.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map clientProperties>;

        return $r1;
    }

Method: <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>
    public com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address, java.lang.String) throws java.io.IOException
    {
        javax.net.ssl.SSLContext $r29;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory r1;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandler $r51;
        javax.net.ssl.SSLHandshakeException $r52;
        javax.net.ssl.SSLException $r49;
        com.rabbitmq.client.SocketChannelConfigurator $r26, $r48;
        com.rabbitmq.client.Address r0;
        java.lang.Throwable $r36, $r37, $r38, $r40;
        long $l3, $l5, $l10;
        javax.net.ssl.SSLSession $r21;
        java.lang.String r27, $r30, $r42;
        java.util.concurrent.atomic.AtomicLong $r4;
        java.util.concurrent.locks.Lock $r3, $r11, $r39;
        java.nio.channels.WritableByteChannel $r19;
        java.nio.channels.SocketChannel r44, $r46;
        boolean $z0, $z1, $z2, $z3;
        java.net.InetSocketAddress $r45;
        java.util.List $r6;
        java.net.Socket $r2, $r12, $r13, $r14, $r17, $r20;
        javax.net.ssl.SSLEngine $r31, r43;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState $r50;
        com.rabbitmq.client.impl.nio.NioLoopContext $r22;
        int $i0, $i1, $i2, $i4, $i6, $i7, $i8, $i9;
        com.rabbitmq.client.SslContextFactory $r28;
        com.rabbitmq.client.impl.nio.NioParams $r5, $r9, $r25, $r32, $r34, $r47;
        java.io.OutputStream $r18;
        java.nio.channels.ReadableByteChannel $r16;
        org.slf4j.Logger $r23, $r41;
        com.rabbitmq.client.SslEngineConfigurator $r33, $r35;
        java.lang.Object $r7;
        java.io.InputStream $r15;

        r1 := @this: com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory;

        r0 := @parameter0: com.rabbitmq.client.Address;

        r27 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        r43 = null;

        r44 = null;

     label01:
        $z1 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        if $z1 == 0 goto label02;

        $r28 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $r29 = interfaceinvoke $r28.<com.rabbitmq.client.SslContextFactory: javax.net.ssl.SSLContext create(java.lang.String)>(r27);

        $r30 = virtualinvoke r0.<com.rabbitmq.client.Address: java.lang.String getHost()>();

        $r31 = virtualinvoke $r29.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine(java.lang.String,int)>($r30, $i1);

        r43 = $r31;

        virtualinvoke $r31.<javax.net.ssl.SSLEngine: void setUseClientMode(boolean)>(1);

        $r32 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r33 = virtualinvoke $r32.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator getSslEngineConfigurator()>();

        if $r33 == null goto label02;

        $r34 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r35 = virtualinvoke $r34.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator getSslEngineConfigurator()>();

        interfaceinvoke $r35.<com.rabbitmq.client.SslEngineConfigurator: void configure(javax.net.ssl.SSLEngine)>($r31);

     label02:
        $r45 = virtualinvoke r0.<com.rabbitmq.client.Address: java.net.InetSocketAddress toInetSocketAddress(int)>($i1);

        $r46 = staticinvoke <java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>();

        r44 = $r46;

        virtualinvoke $r46.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

        $r47 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r48 = virtualinvoke $r47.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator getSocketChannelConfigurator()>();

        if $r48 == null goto label03;

        $r25 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r26 = virtualinvoke $r25.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator getSocketChannelConfigurator()>();

        interfaceinvoke $r26.<com.rabbitmq.client.SocketChannelConfigurator: void configure(java.nio.channels.SocketChannel)>($r46);

     label03:
        $r2 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i2 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r2.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r45, $i2);

        $z2 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        if $z2 == 0 goto label09;

        $r12 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i8 = virtualinvoke $r12.<java.net.Socket: int getSoTimeout()>();

        $r13 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i9 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r13.<java.net.Socket: void setSoTimeout(int)>($i9);

        virtualinvoke r43.<javax.net.ssl.SSLEngine: void beginHandshake()>();

     label04:
        $r14 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r15 = virtualinvoke $r14.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r16 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>($r15);

        $r17 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r18 = virtualinvoke $r17.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        $r19 = staticinvoke <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>($r18);

        $z3 = staticinvoke <com.rabbitmq.client.impl.nio.SslEngineHelper: boolean doHandshake(java.nio.channels.WritableByteChannel,java.nio.channels.ReadableByteChannel,javax.net.ssl.SSLEngine)>($r19, $r16, r43);

        if $z3 != 0 goto label05;

        $r23 = <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r23.<org.slf4j.Logger: void error(java.lang.String)>("TLS connection failed");

        $r49 = new javax.net.ssl.SSLException;

        specialinvoke $r49.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("TLS handshake failed");

        throw $r49;

     label05:
        $r20 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        virtualinvoke $r20.<java.net.Socket: void setSoTimeout(int)>($i8);

     label06:
        goto label08;

     label07:
        $r40 := @caughtexception;

        $r41 = <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: org.slf4j.Logger LOGGER>;

        $r52 = (javax.net.ssl.SSLHandshakeException) $r40;

        $r42 = virtualinvoke $r52.<javax.net.ssl.SSLHandshakeException: java.lang.String getMessage()>();

        interfaceinvoke $r41.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("TLS connection failed: {}", $r42);

        throw $r40;

     label08:
        $r21 = virtualinvoke r43.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>();

        staticinvoke <com.rabbitmq.client.impl.TlsUtils: void logPeerCertificateInfo(javax.net.ssl.SSLSession)>($r21);

     label09:
        virtualinvoke $r46.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

        $r3 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label10:
        $r4 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.atomic.AtomicLong globalConnectionCount>;

        $l3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r5 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $i4 = virtualinvoke $r5.<com.rabbitmq.client.impl.nio.NioParams: int getNbIoThreads()>();

        $l5 = (long) $i4;

        $l10 = $l3 % $l5;

        $r6 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.List nioLoopContexts>;

        $i6 = (int) $l10;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i6);

        $r22 = (com.rabbitmq.client.impl.nio.NioLoopContext) $r7;

        virtualinvoke $r22.<com.rabbitmq.client.impl.nio.NioLoopContext: void initStateIfNecessary()>();

        $r50 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState;

        $r9 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $i7 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int maxInboundMessageBodySize>;

        specialinvoke $r50.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState: void <init>(java.nio.channels.SocketChannel,com.rabbitmq.client.impl.nio.NioLoopContext,com.rabbitmq.client.impl.nio.NioParams,javax.net.ssl.SSLEngine,int)>($r46, $r22, $r9, r43, $i7);

        virtualinvoke $r50.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState: void startReading()>();

        $r51 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandler;

        specialinvoke $r51.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandler: void <init>(com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState)>($r50);

     label11:
        $r11 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

     label12:
        return $r51;

     label13:
        $r38 := @caughtexception;

     label14:
        $r39 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r39.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r38;

     label15:
        $r37 := @caughtexception;

     label16:
        if r43 == null goto label17;

        if r44 == null goto label17;

        staticinvoke <com.rabbitmq.client.impl.nio.SslEngineHelper: void close(java.nio.channels.WritableByteChannel,javax.net.ssl.SSLEngine)>(r44, r43);

     label17:
        if r44 == null goto label18;

        virtualinvoke r44.<java.nio.channels.SocketChannel: void close()>();

     label18:
        goto label20;

     label19:
        $r36 := @caughtexception;

     label20:
        throw $r37;

        catch javax.net.ssl.SSLHandshakeException from label04 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.io.IOException from label01 to label12 with label15;
        catch java.io.IOException from label13 to label15 with label15;
        catch java.io.IOException from label16 to label18 with label19;
    }

Method: <com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>
    public com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        java.net.Socket $r3, r8;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.impl.FrameHandler $r6;
        com.rabbitmq.client.impl.SocketFrameHandlerFactory r1;
        java.net.InetSocketAddress $r5;
        int $i0, $i1, $i2;
        java.lang.String r2;
        com.rabbitmq.client.Address r0;
        boolean $z0;

        r1 := @this: com.rabbitmq.client.impl.SocketFrameHandlerFactory;

        r0 := @parameter0: com.rabbitmq.client.Address;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        r8 = null;

     label1:
        $r3 = virtualinvoke r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: java.net.Socket createSocket(java.lang.String)>(r2);

        r8 = $r3;

        $r4 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.SocketConfigurator configurator>;

        interfaceinvoke $r4.<com.rabbitmq.client.SocketConfigurator: void configure(java.net.Socket)>($r3);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.Address: java.net.InetSocketAddress toInetSocketAddress(int)>($i1);

        $i2 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r3.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r5, $i2);

        $r6 = virtualinvoke r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(java.net.Socket)>($r3);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        staticinvoke <com.rabbitmq.client.impl.SocketFrameHandlerFactory: void quietTrySocketClose(java.net.Socket)>(r8);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector)>
    protected com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams, com.rabbitmq.client.impl.FrameHandler, com.rabbitmq.client.MetricsCollector)
    {
        com.rabbitmq.client.impl.FrameHandler r2;
        com.rabbitmq.client.impl.AMQConnection $r0;
        com.rabbitmq.client.ConnectionFactory r4;
        com.rabbitmq.client.impl.ConnectionParams r1;
        com.rabbitmq.client.observation.ObservationCollector $r5;
        com.rabbitmq.client.MetricsCollector r3;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.impl.ConnectionParams;

        r2 := @parameter1: com.rabbitmq.client.impl.FrameHandler;

        r3 := @parameter2: com.rabbitmq.client.MetricsCollector;

        $r0 = new com.rabbitmq.client.impl.AMQConnection;

        $r5 = r4.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>(r1, r2, r3, $r5);

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: boolean isAutomaticRecoveryEnabled()>
    public boolean isAutomaticRecoveryEnabled()
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $z0 = r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery>;

        return $z0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)>
    public com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)
    {
        com.rabbitmq.client.RecoveryDelayHandler $r7;
        com.rabbitmq.client.impl.ConnectionParams $r0;
        long $l3;
        com.rabbitmq.client.impl.ErrorOnWriteListener $r13;
        java.util.Map $r5;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8;
        java.util.concurrent.ScheduledExecutorService $r12;
        java.lang.String $r4;
        java.util.concurrent.ThreadFactory $r10;
        java.util.concurrent.ExecutorService r3, $r8, $r11;
        boolean $z0, $z1;
        com.rabbitmq.client.SaslConfig $r6;
        com.rabbitmq.client.ConnectionFactory r1;
        com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter $r14;
        java.util.function.Predicate $r15;
        com.rabbitmq.client.impl.CredentialsRefreshService $r19;
        com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier $r17;
        com.rabbitmq.client.impl.recovery.RetryHandler $r16;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.TrafficListener $r18;
        com.rabbitmq.client.ExceptionHandler $r9;

        r1 := @this: com.rabbitmq.client.ConnectionFactory;

        r3 := @parameter0: java.util.concurrent.ExecutorService;

        $r0 = new com.rabbitmq.client.impl.ConnectionParams;

        specialinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void <init>()>();

        $r2 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>($r2);

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setConsumerWorkServiceExecutor(java.util.concurrent.ExecutorService)>(r3);

        $r4 = r1.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setVirtualHost(java.lang.String)>($r4);

        $r5 = virtualinvoke r1.<com.rabbitmq.client.ConnectionFactory: java.util.Map getClientProperties()>();

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>($r5);

        $i0 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedFrameMax(int)>($i0);

        $i1 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedChannelMax(int)>($i1);

        $i2 = r1.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setShutdownTimeout(int)>($i2);

        $r6 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setSaslConfig(com.rabbitmq.client.SaslConfig)>($r6);

        $l3 = r1.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setNetworkRecoveryInterval(long)>($l3);

        $r7 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.RecoveryDelayHandler recoveryDelayHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRecoveryDelayHandler(com.rabbitmq.client.RecoveryDelayHandler)>($r7);

        $z0 = r1.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecovery(boolean)>($z0);

        $r8 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService topologyRecoveryExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryExecutor(java.util.concurrent.ExecutorService)>($r8);

        $r9 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)>($r9);

        $r10 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setThreadFactory(java.util.concurrent.ThreadFactory)>($r10);

        $i4 = r1.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setHandshakeTimeout(int)>($i4);

        $i5 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedHeartbeat(int)>($i5);

        $r11 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService shutdownExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setShutdownExecutor(java.util.concurrent.ExecutorService)>($r11);

        $r12 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ScheduledExecutorService heartbeatExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setHeartbeatExecutor(java.util.concurrent.ScheduledExecutorService)>($r12);

        $i6 = r1.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setChannelRpcTimeout(int)>($i6);

        $z1 = r1.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setChannelShouldCheckRpcResponseType(boolean)>($z1);

        $i7 = r1.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setWorkPoolTimeout(int)>($i7);

        $r13 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ErrorOnWriteListener errorOnWriteListener>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setErrorOnWriteListener(com.rabbitmq.client.impl.ErrorOnWriteListener)>($r13);

        $r14 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter topologyRecoveryFilter>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryFilter(com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter)>($r14);

        $r15 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.function.Predicate connectionRecoveryTriggeringCondition>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setConnectionRecoveryTriggeringCondition(java.util.function.Predicate)>($r15);

        $r16 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.RetryHandler topologyRecoveryRetryHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryRetryHandler(com.rabbitmq.client.impl.recovery.RetryHandler)>($r16);

        $r17 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier recoveredQueueNameSupplier>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRecoveredQueueNameSupplier(com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier)>($r17);

        $r18 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTrafficListener(com.rabbitmq.client.TrafficListener)>($r18);

        $r19 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setCredentialsRefreshService(com.rabbitmq.client.impl.CredentialsRefreshService)>($r19);

        $i8 = r1.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setMaxInboundMessageBodySize(int)>($i8);

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory()>
    protected synchronized com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory() throws java.io.IOException
    {
        com.rabbitmq.client.SocketConfigurator $r3;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory $r13;
        int $i0, $i1, $i2, $i3;
        com.rabbitmq.client.SslContextFactory $r4, $r15;
        com.rabbitmq.client.impl.nio.NioParams $r7, $r9, $r11, $r14;
        java.util.concurrent.ThreadFactory $r10, $r12;
        java.util.concurrent.ExecutorService $r5, $r8;
        boolean $z0, $z1, $z2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.SocketFrameHandlerFactory $r1;
        com.rabbitmq.client.impl.FrameHandlerFactory $r6, $r16;
        javax.net.SocketFactory $r2;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $z0 = r0.<com.rabbitmq.client.ConnectionFactory: boolean nio>;

        if $z0 == 0 goto label3;

        $r6 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory>;

        if $r6 != null goto label2;

        $r7 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r8 = virtualinvoke $r7.<com.rabbitmq.client.impl.nio.NioParams: java.util.concurrent.ExecutorService getNioExecutor()>();

        if $r8 != null goto label1;

        $r9 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r10 = virtualinvoke $r9.<com.rabbitmq.client.impl.nio.NioParams: java.util.concurrent.ThreadFactory getThreadFactory()>();

        if $r10 != null goto label1;

        $r11 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r12 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory getThreadFactory()>();

        virtualinvoke $r11.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.NioParams setThreadFactory(java.util.concurrent.ThreadFactory)>($r12);

     label1:
        $r13 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory;

        $i2 = r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout>;

        $r14 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $z2 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $r15 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $i3 = r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        specialinvoke $r13.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: void <init>(int,com.rabbitmq.client.impl.nio.NioParams,boolean,com.rabbitmq.client.SslContextFactory,int)>($i2, $r14, $z2, $r15, $i3);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory> = $r13;

     label2:
        $r16 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory>;

        return $r16;

     label3:
        $r1 = new com.rabbitmq.client.impl.SocketFrameHandlerFactory;

        $i0 = r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout>;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory>;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf>;

        $z1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $r5 = r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService shutdownExecutor>;

        $r4 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $i1 = r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        specialinvoke $r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: void <init>(int,javax.net.SocketFactory,com.rabbitmq.client.SocketConfigurator,boolean,java.util.concurrent.ExecutorService,com.rabbitmq.client.SslContextFactory,int)>($i0, $r2, $r3, $z1, $r5, $r4, $i1);

        return $r1;
    }

Method: <com.rabbitmq.client.DnsRecordIpAddressResolver: java.util.List getAddresses()>
    public java.util.List getAddresses() throws java.net.UnknownHostException
    {
        java.net.InetAddress[] $r4;
        java.util.ArrayList $r5;
        java.net.InetAddress r6;
        com.rabbitmq.client.DnsRecordIpAddressResolver r0;
        com.rabbitmq.client.ResolvedInetAddress $r7;
        int $i0, $i1, i2, i3;
        java.lang.String $r2;
        com.rabbitmq.client.Address $r1, $r3;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.DnsRecordIpAddressResolver;

        $r1 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address>;

        $r2 = virtualinvoke $r1.<com.rabbitmq.client.Address: java.lang.String getHost()>();

        $r3 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address>;

        $i0 = virtualinvoke $r3.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        $r4 = virtualinvoke r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: java.net.InetAddress[] resolveIpAddresses(java.lang.String)>($r2);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i2 = lengthof $r4;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r6 = $r4[i3];

        $r7 = new com.rabbitmq.client.ResolvedInetAddress;

        specialinvoke $r7.<com.rabbitmq.client.ResolvedInetAddress: void <init>(java.lang.String,java.net.InetAddress,int)>($r2, r6, $i1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        i3 = i3 + 1;

        goto label1;

     label2:
        return $r5;
    }

Method: <com.rabbitmq.client.ListAddressResolver: java.util.List getAddresses()>
    public java.util.List getAddresses()
    {
        java.util.List $r1;
        com.rabbitmq.client.ListAddressResolver r0;

        r0 := @this: com.rabbitmq.client.ListAddressResolver;

        $r1 = r0.<com.rabbitmq.client.ListAddressResolver: java.util.List addresses>;

        return $r1;
    }

Method: <com.rabbitmq.client.NoOpMetricsCollector: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.NoOpMetricsCollector r0;

        r0 := @this: com.rabbitmq.client.NoOpMetricsCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void init()>
    public void init() throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory $r1;
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection $r2, $r3;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection r0;

        r0 := @this: com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        $r1 = r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory cf>;

        $r2 = virtualinvoke $r1.<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection newConnection()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection delegate> = $r2;

        $r3 = r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection delegate>;

        specialinvoke r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void addAutomaticRecoveryListener(com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection)>($r3);

        return;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>
    public void <init>(com.rabbitmq.client.impl.ConnectionParams, com.rabbitmq.client.impl.FrameHandlerFactory, com.rabbitmq.client.AddressResolver, com.rabbitmq.client.MetricsCollector, com.rabbitmq.client.observation.ObservationCollector)
    {
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory $r20;
        com.rabbitmq.client.MetricsCollector r24;
        java.util.Map $r8, $r12, $r14;
        com.rabbitmq.client.observation.ObservationCollector r25;
        com.rabbitmq.client.AddressResolver r23;
        java.util.function.Predicate $r26, $r31;
        com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter $r28, $r32;
        java.util.concurrent.ConcurrentHashMap $r27;
        java.util.List $r2, $r4, $r6, $r10, $r16, $r18;
        com.rabbitmq.client.impl.recovery.RetryHandler $r29;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection r0;
        com.rabbitmq.client.impl.ConnectionParams r21;
        java.util.ArrayList $r1, $r3, $r5, $r9, $r15, $r17;
        java.util.LinkedHashMap $r7, $r11, $r13;
        com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier $r30, $r33;
        com.rabbitmq.client.impl.FrameHandlerFactory r22;
        java.lang.Object $r19;

        r0 := @this: com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        r21 := @parameter0: com.rabbitmq.client.impl.ConnectionParams;

        r22 := @parameter1: com.rabbitmq.client.impl.FrameHandlerFactory;

        r23 := @parameter2: com.rabbitmq.client.AddressResolver;

        r24 := @parameter3: com.rabbitmq.client.MetricsCollector;

        r25 := @parameter4: com.rabbitmq.client.observation.ObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List shutdownHooks> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r3);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List recoveryListeners> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r5);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List blockedListeners> = $r6;

        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        $r8 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r7);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map recordedQueues> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r9);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List recordedBindings> = $r10;

        $r11 = new java.util.LinkedHashMap;

        specialinvoke $r11.<java.util.LinkedHashMap: void <init>()>();

        $r12 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r11);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map recordedExchanges> = $r12;

        $r13 = new java.util.LinkedHashMap;

        specialinvoke $r13.<java.util.LinkedHashMap: void <init>()>();

        $r14 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r13);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map consumers> = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r16 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r15);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List consumerRecoveryListeners> = $r16;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        $r18 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r17);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List queueRecoveryListeners> = $r18;

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: boolean manuallyClosed> = 0;

        $r19 = new java.lang.Object;

        specialinvoke $r19.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.lang.Object recoveryLock> = $r19;

        $r20 = new com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory;

        specialinvoke $r20.<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>(r21, r22, r23, r24, r25);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory cf> = $r20;

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.ConnectionParams params> = r21;

        $r26 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: java.util.function.Predicate getConnectionRecoveryTriggeringCondition()>();

        if $r26 != null goto label1;

        $r31 = <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate DEFAULT_CONNECTION_RECOVERY_TRIGGERING_CONDITION>;

        goto label2;

     label1:
        $r31 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: java.util.function.Predicate getConnectionRecoveryTriggeringCondition()>();

     label2:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate connectionRecoveryTriggeringCondition> = $r31;

        specialinvoke r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void setupErrorOnWriteListenerForPotentialRecovery()>();

        $r27 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r27.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map channels> = $r27;

        $r28 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter getTopologyRecoveryFilter()>();

        if $r28 != null goto label3;

        $r32 = staticinvoke <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter letAllPassFilter()>();

        goto label4;

     label3:
        $r32 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter getTopologyRecoveryFilter()>();

     label4:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter topologyRecoveryFilter> = $r32;

        $r29 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RetryHandler getTopologyRecoveryRetryHandler()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RetryHandler retryHandler> = $r29;

        $r30 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier getRecoveredQueueNameSupplier()>();

        if $r30 != null goto label5;

        $r33 = <com.rabbitmq.client.impl.recovery.RecordedQueue: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier DEFAULT_QUEUE_NAME_SUPPLIER>;

        goto label6;

     label5:
        $r33 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier getRecoveredQueueNameSupplier()>();

     label6:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier recoveredQueueNameSupplier> = $r33;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(com.rabbitmq.client.Address[])>
Related methods: 23
caller is : <com.mware.core.model.workQueue.RabbitMQUtils: com.rabbitmq.client.Connection openConnection(com.rabbitmq.client.Address[],com.mware.core.config.Configuration)>
callee is : <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(com.rabbitmq.client.Address[])>

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(com.rabbitmq.client.Address[])>
    public com.rabbitmq.client.Connection newConnection(com.rabbitmq.client.Address[]) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List $r3;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.Connection $r4;
        com.rabbitmq.client.Address[] r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.Address[];

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService sharedExecutor>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r4 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>($r2, $r3, null);

        return $r4;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,java.util.List,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, java.util.List, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.util.List r2;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.String r4;
        com.rabbitmq.client.Connection $r5;
        java.util.concurrent.ExecutorService r1;
        com.rabbitmq.client.AddressResolver $r3;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        r2 := @parameter1: java.util.List;

        r4 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>(r2);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>(r1, $r3, r4);

        return $r5;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)>
    protected com.rabbitmq.client.AddressResolver createAddressResolver(java.util.List)
    {
        com.rabbitmq.client.ConnectionFactory r4;
        com.rabbitmq.client.ListAddressResolver $r6;
        java.lang.IllegalArgumentException $r1;
        java.util.List r0;
        com.rabbitmq.client.DnsRecordIpAddressResolver $r2;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, $z1;
        com.rabbitmq.client.Address $r5;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide at least one address to connect to");

        throw $r1;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 1 goto label3;

        $r6 = new com.rabbitmq.client.ListAddressResolver;

        specialinvoke $r6.<com.rabbitmq.client.ListAddressResolver: void <init>(java.util.List)>(r0);

        return $r6;

     label3:
        $r2 = new com.rabbitmq.client.DnsRecordIpAddressResolver;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (com.rabbitmq.client.Address) $r3;

        $z1 = virtualinvoke r4.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        specialinvoke $r2.<com.rabbitmq.client.DnsRecordIpAddressResolver: void <init>(com.rabbitmq.client.Address,boolean)>($r5, $z1);

        return $r2;
    }

Method: <com.rabbitmq.client.ConnectionFactory: boolean isSSL()>
    public boolean isSSL()
    {
        javax.net.SocketFactory $r1;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.SslContextFactory $r2;
        boolean $z0, $z1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $r1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory getSocketFactory()>();

        $z0 = $r1 instanceof javax.net.ssl.SSLSocketFactory;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        if $r2 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.rabbitmq.client.ListAddressResolver: void <init>(java.util.List)>
    public void <init>(java.util.List)
    {
        java.util.List r1;
        com.rabbitmq.client.ListAddressResolver r0;

        r0 := @this: com.rabbitmq.client.ListAddressResolver;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.ListAddressResolver: java.util.List addresses> = r1;

        return;
    }

Method: <com.rabbitmq.client.DnsRecordIpAddressResolver: void <init>(com.rabbitmq.client.Address,boolean)>
    public void <init>(com.rabbitmq.client.Address, boolean)
    {
        com.rabbitmq.client.DnsRecordIpAddressResolver r0;
        com.rabbitmq.client.Address r1;
        boolean z0;

        r0 := @this: com.rabbitmq.client.DnsRecordIpAddressResolver;

        r1 := @parameter0: com.rabbitmq.client.Address;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address> = r1;

        r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: boolean ssl> = z0;

        return;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService,com.rabbitmq.client.AddressResolver,java.lang.String)>
    public com.rabbitmq.client.Connection newConnection(java.util.concurrent.ExecutorService, com.rabbitmq.client.AddressResolver, java.lang.String) throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.lang.Throwable $r24, $r25, r26;
        com.rabbitmq.client.impl.ConnectionParams $r4;
        java.util.concurrent.TimeoutException $r10;
        java.util.HashMap $r21;
        com.rabbitmq.client.MetricsCollector $r1, $r15, $r17, $r20;
        com.rabbitmq.client.NoOpMetricsCollector $r23;
        java.util.Map $r22;
        com.rabbitmq.client.observation.ObservationCollector $r19;
        java.lang.String r5;
        java.util.concurrent.ExecutorService r3;
        com.rabbitmq.client.AddressResolver r6;
        boolean $z0, $z1, $z2, $z3;
        com.rabbitmq.client.impl.FrameHandler $r14;
        com.rabbitmq.client.ConnectionFactory r0;
        java.util.Iterator $r8;
        com.rabbitmq.client.impl.AMQConnection $r16;
        java.io.IOException $r9, $r11;
        com.rabbitmq.client.impl.FrameHandlerFactory $r2;
        java.util.List $r7;
        java.lang.Object $r12;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection $r18;
        com.rabbitmq.client.Address r13;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r3 := @parameter0: java.util.concurrent.ExecutorService;

        r6 := @parameter1: com.rabbitmq.client.AddressResolver;

        r5 := @parameter2: java.lang.String;

        $r1 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        if $r1 != null goto label01;

        $r23 = new com.rabbitmq.client.NoOpMetricsCollector;

        specialinvoke $r23.<com.rabbitmq.client.NoOpMetricsCollector: void <init>()>();

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector> = $r23;

     label01:
        $r2 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory()>();

        $r4 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)>(r3);

        if r5 == null goto label02;

        $r21 = new java.util.HashMap;

        $r22 = virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map getClientProperties()>();

        specialinvoke $r21.<java.util.HashMap: void <init>(java.util.Map)>($r22);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("connection_name", r5);

        virtualinvoke $r4.<com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>($r21);

     label02:
        $z0 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isAutomaticRecoveryEnabled()>();

        if $z0 == 0 goto label03;

        $r18 = new com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        $r20 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r19 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector>;

        specialinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>($r4, $r2, r6, $r20, $r19);

        virtualinvoke $r18.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void init()>();

        return $r18;

     label03:
        $r7 = interfaceinvoke r6.<com.rabbitmq.client.AddressResolver: java.util.List getAddresses()>();

        r26 = null;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r12 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.rabbitmq.client.Address) $r12;

     label05:
        $r14 = interfaceinvoke $r2.<com.rabbitmq.client.impl.FrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>(r13, r5);

        $r15 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        $r16 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector)>($r4, $r14, $r15);

        virtualinvoke $r16.<com.rabbitmq.client.impl.AMQConnection: void start()>();

        $r17 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.MetricsCollector metricsCollector>;

        interfaceinvoke $r17.<com.rabbitmq.client.MetricsCollector: void newConnection(com.rabbitmq.client.Connection)>($r16);

     label06:
        return $r16;

     label07:
        $r25 := @caughtexception;

        r26 = $r25;

        goto label09;

     label08:
        $r24 := @caughtexception;

        r26 = $r24;

     label09:
        goto label04;

     label10:
        if r26 == null goto label12;

        $z2 = r26 instanceof java.io.IOException;

        if $z2 == 0 goto label11;

        $r11 = (java.io.IOException) r26;

        throw $r11;

     label11:
        $z3 = r26 instanceof java.util.concurrent.TimeoutException;

        if $z3 == 0 goto label12;

        $r10 = (java.util.concurrent.TimeoutException) r26;

        throw $r10;

     label12:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("failed to connect");

        throw $r9;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.util.concurrent.TimeoutException from label05 to label06 with label08;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <clinit>()>
    static void <clinit>()
    {
        org.slf4j.Logger $r1;
        java.util.function.Predicate $r0;

        $r0 = staticinvoke <com.rabbitmq.client.impl.recovery.AutorecoveringConnection$lambda_static_0__3140: java.util.function.Predicate bootstrap$()>();

        <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate DEFAULT_CONNECTION_RECOVERY_TRIGGERING_CONDITION> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/rabbitmq/client/impl/recovery/AutorecoveringConnection;");

        <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: org.slf4j.Logger LOGGER> = $r1;

        return;
    }

Method: <com.rabbitmq.client.NoOpMetricsCollector: void newConnection(com.rabbitmq.client.Connection)>
    public void newConnection(com.rabbitmq.client.Connection)
    {
        com.rabbitmq.client.Connection r1;
        com.rabbitmq.client.NoOpMetricsCollector r0;

        r0 := @this: com.rabbitmq.client.NoOpMetricsCollector;

        r1 := @parameter0: com.rabbitmq.client.Connection;

        return;
    }

Method: <com.rabbitmq.client.impl.AMQConnection: void start()>
    public void start() throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        java.lang.Integer $r56, $r57, $r58, $r61, $r62, $r63;
        com.rabbitmq.client.AuthenticationFailureException $r124;
        com.rabbitmq.client.impl.Method $r8, $r26;
        com.rabbitmq.client.SaslMechanism $r17;
        java.util.Map $r9, $r10, $r65;
        java.time.Duration $r21, $r48, $r73;
        com.rabbitmq.client.AMQP$Connection$Open $r46;
        com.rabbitmq.client.SaslConfig $r16;
        com.rabbitmq.client.impl.CredentialsRefreshService $r49, $r70, $r72;
        java.lang.StringBuilder $r80, $r82, $r83, $r119;
        java.lang.Object[] $r54, $r59;
        com.rabbitmq.client.AMQP$Connection$StartOk$Builder $r66, $r68, $r69, $r122;
        com.rabbitmq.client.AMQP$Connection$Open$Builder $r45, $r128;
        com.rabbitmq.client.AMQP$Connection$Tune r109;
        java.io.IOException $r90, $r98, $r120;
        com.rabbitmq.client.impl.HeartbeatSender $r88, $r92;
        com.rabbitmq.client.AMQP$Connection$TuneOk $r41;
        java.util.concurrent.ThreadFactory $r29;
        com.rabbitmq.client.impl.AMQChannel $r2, $r24, $r37, $r43;
        com.rabbitmq.client.impl.Version $r12, $r86, $r117;
        com.rabbitmq.client.ShutdownSignalException $r87, $r96, $r101;
        com.rabbitmq.client.AMQP$Connection$SecureOk$Builder $r23, $r123;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i23;
        com.rabbitmq.client.Method $r102, $r115;
        org.slf4j.Logger $r55, $r60;
        com.rabbitmq.client.impl.AMQConnection r0;
        java.lang.Object $r6;
        com.rabbitmq.client.AMQP$Connection$Close r104;
        java.net.InetAddress $r33;
        com.rabbitmq.client.impl.AMQCommand $r7, $r25;
        com.rabbitmq.client.impl.CredentialsProvider $r18, $r19, $r20, $r47, $r50, $r71, $r74, $r75, $r76;
        com.rabbitmq.client.ShutdownListener $r53;
        java.lang.Throwable $r91, $r94, $r99, $r107;
        java.util.concurrent.Callable $r51;
        com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo $r126;
        java.lang.String $r14, $r34, $r44, $r52, $r67, $r84, $r106, r111, r112;
        com.rabbitmq.client.ProtocolVersionMismatchException $r118;
        com.rabbitmq.client.LongString $r13, $r28, $r81, r113, r114;
        java.lang.IllegalStateException $r121;
        com.rabbitmq.client.AMQP$Connection$Start r110;
        boolean $z0, $z1, $z2, $z3;
        com.rabbitmq.client.impl.FrameHandler $r3, $r4, $r5, $r32, $r35, $r89, $r93, $r95, $r97, $r100, $r108;
        com.rabbitmq.client.impl.ChannelManager $r30;
        com.rabbitmq.client.PossibleAuthenticationFailureException $r125;
        java.lang.String[] $r15;
        com.rabbitmq.client.AMQP$Connection$Secure $r27;
        com.rabbitmq.client.AMQP$Connection$TuneOk$Builder $r38, $r39, $r40, $r127;
        com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation $r116;

        r0 := @this: com.rabbitmq.client.impl.AMQConnection;

        specialinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void initializeConsumerWorkService()>();

        specialinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void initializeHeartbeatSender()>();

        r0.<com.rabbitmq.client.impl.AMQConnection: boolean _running> = 1;

        $r116 = new com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation;

        specialinvoke $r116.<com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation: void <init>()>();

        $r2 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        virtualinvoke $r2.<com.rabbitmq.client.impl.AMQChannel: void enqueueRpc(com.rabbitmq.client.impl.AMQChannel$RpcContinuation)>($r116);

     label01:
        $r3 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $i0 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        interfaceinvoke $r3.<com.rabbitmq.client.impl.FrameHandler: void setTimeout(int)>($i0);

        $r4 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r4.<com.rabbitmq.client.impl.FrameHandler: void sendHeader()>();

     label02:
        goto label04;

     label03:
        $r107 := @caughtexception;

        $r108 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r108.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r107;

     label04:
        $r5 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r5.<com.rabbitmq.client.impl.FrameHandler: void initialize(com.rabbitmq.client.impl.AMQConnection)>(r0);

        r109 = null;

     label05:
        $i1 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        $i2 = $i1 / 2;

        $r6 = virtualinvoke $r116.<com.rabbitmq.client.impl.AMQChannel$SimpleBlockingRpcContinuation: java.lang.Object getReply(int)>($i2);

        $r7 = (com.rabbitmq.client.impl.AMQCommand) $r6;

        $r8 = virtualinvoke $r7.<com.rabbitmq.client.impl.AMQCommand: com.rabbitmq.client.impl.Method getMethod()>();

        r110 = (com.rabbitmq.client.AMQP$Connection$Start) $r8;

        $r9 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: java.util.Map getServerProperties()>();

        $r10 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r9);

        r0.<com.rabbitmq.client.impl.AMQConnection: java.util.Map _serverProperties> = $r10;

        $r117 = new com.rabbitmq.client.impl.Version;

        $i3 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: int getVersionMajor()>();

        $i4 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: int getVersionMinor()>();

        specialinvoke $r117.<com.rabbitmq.client.impl.Version: void <init>(int,int)>($i3, $i4);

        $r12 = <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion>;

        $z0 = staticinvoke <com.rabbitmq.client.impl.Version: boolean checkVersion(com.rabbitmq.client.impl.Version,com.rabbitmq.client.impl.Version)>($r12, $r117);

        if $z0 != 0 goto label06;

        $r118 = new com.rabbitmq.client.ProtocolVersionMismatchException;

        $r86 = <com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.Version clientVersion>;

        specialinvoke $r118.<com.rabbitmq.client.ProtocolVersionMismatchException: void <init>(com.rabbitmq.client.impl.Version,com.rabbitmq.client.impl.Version)>($r86, $r117);

        throw $r118;

     label06:
        $r13 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: com.rabbitmq.client.LongString getMechanisms()>();

        $r14 = interfaceinvoke $r13.<com.rabbitmq.client.LongString: java.lang.String toString()>();

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $r16 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.SaslConfig saslConfig>;

        $r17 = interfaceinvoke $r16.<com.rabbitmq.client.SaslConfig: com.rabbitmq.client.SaslMechanism getSaslMechanism(java.lang.String[])>($r15);

        if $r17 != null goto label07;

        $r120 = new java.io.IOException;

        $r119 = new java.lang.StringBuilder;

        specialinvoke $r119.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No compatible authentication mechanism found - server offered [");

        $r81 = interfaceinvoke r110.<com.rabbitmq.client.AMQP$Connection$Start: com.rabbitmq.client.LongString getMechanisms()>();

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r120.<java.io.IOException: void <init>(java.lang.String)>($r84);

        throw $r120;

     label07:
        $r18 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r111 = interfaceinvoke $r18.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        $r19 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r112 = interfaceinvoke $r19.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

        $r20 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r21 = interfaceinvoke $r20.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        if $r21 == null goto label09;

        $r70 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        if $r70 != null goto label08;

        $r121 = new java.lang.IllegalStateException;

        specialinvoke $r121.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Credentials can expire, a credentials refresh service should be set");

        throw $r121;

     label08:
        $r72 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        $r71 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r73 = interfaceinvoke $r71.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        $z2 = interfaceinvoke $r72.<com.rabbitmq.client.impl.CredentialsRefreshService: boolean isApproachingExpiration(java.time.Duration)>($r73);

        if $z2 == 0 goto label09;

        $r74 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        interfaceinvoke $r74.<com.rabbitmq.client.impl.CredentialsProvider: void refresh()>();

        $r75 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r111 = interfaceinvoke $r75.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getUsername()>();

        $r76 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        r112 = interfaceinvoke $r76.<com.rabbitmq.client.impl.CredentialsProvider: java.lang.String getPassword()>();

     label09:
        r113 = null;

        r114 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: com.rabbitmq.client.LongString handleChallenge(com.rabbitmq.client.LongString,java.lang.String,java.lang.String)>(null, r111, r112);

     label10:
        if r113 != null goto label11;

        $r122 = new com.rabbitmq.client.AMQP$Connection$StartOk$Builder;

        specialinvoke $r122.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: void <init>()>();

        $r65 = r0.<com.rabbitmq.client.impl.AMQConnection: java.util.Map _clientProperties>;

        $r66 = virtualinvoke $r122.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder clientProperties(java.util.Map)>($r65);

        $r67 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: java.lang.String getName()>();

        $r68 = virtualinvoke $r66.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder mechanism(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk$Builder response(com.rabbitmq.client.LongString)>(r114);

        $r115 = virtualinvoke $r69.<com.rabbitmq.client.AMQP$Connection$StartOk$Builder: com.rabbitmq.client.AMQP$Connection$StartOk build()>();

        goto label12;

     label11:
        $r123 = new com.rabbitmq.client.AMQP$Connection$SecureOk$Builder;

        specialinvoke $r123.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: void <init>()>();

        $r23 = virtualinvoke $r123.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: com.rabbitmq.client.AMQP$Connection$SecureOk$Builder response(com.rabbitmq.client.LongString)>(r114);

        $r115 = virtualinvoke $r23.<com.rabbitmq.client.AMQP$Connection$SecureOk$Builder: com.rabbitmq.client.AMQP$Connection$SecureOk build()>();

     label12:
        $r24 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $i5 = r0.<com.rabbitmq.client.impl.AMQConnection: int handshakeTimeout>;

        $i6 = $i5 / 2;

        $r25 = virtualinvoke $r24.<com.rabbitmq.client.impl.AMQChannel: com.rabbitmq.client.impl.AMQCommand rpc(com.rabbitmq.client.Method,int)>($r115, $i6);

        $r26 = virtualinvoke $r25.<com.rabbitmq.client.impl.AMQCommand: com.rabbitmq.client.impl.Method getMethod()>();

        $z1 = $r26 instanceof com.rabbitmq.client.AMQP$Connection$Tune;

        if $z1 == 0 goto label13;

        r109 = (com.rabbitmq.client.AMQP$Connection$Tune) $r26;

        goto label14;

     label13:
        $r27 = (com.rabbitmq.client.AMQP$Connection$Secure) $r26;

        $r28 = interfaceinvoke $r27.<com.rabbitmq.client.AMQP$Connection$Secure: com.rabbitmq.client.LongString getChallenge()>();

        r113 = $r28;

        r114 = interfaceinvoke $r17.<com.rabbitmq.client.SaslMechanism: com.rabbitmq.client.LongString handleChallenge(com.rabbitmq.client.LongString,java.lang.String,java.lang.String)>($r28, r111, r112);

     label14:
        goto label17;

     label15:
        $r101 := @caughtexception;

        $r102 = virtualinvoke $r101.<com.rabbitmq.client.ShutdownSignalException: com.rabbitmq.client.Method getReason()>();

        $z3 = $r102 instanceof com.rabbitmq.client.AMQP$Connection$Close;

        if $z3 == 0 goto label16;

        r104 = (com.rabbitmq.client.AMQP$Connection$Close) $r102;

        $i19 = interfaceinvoke r104.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>();

        if $i19 != 403 goto label16;

        $r124 = new com.rabbitmq.client.AuthenticationFailureException;

        $r106 = interfaceinvoke r104.<com.rabbitmq.client.AMQP$Connection$Close: java.lang.String getReplyText()>();

        specialinvoke $r124.<com.rabbitmq.client.AuthenticationFailureException: void <init>(java.lang.String)>($r106);

        throw $r124;

     label16:
        $r125 = new com.rabbitmq.client.PossibleAuthenticationFailureException;

        specialinvoke $r125.<com.rabbitmq.client.PossibleAuthenticationFailureException: void <init>(java.lang.Throwable)>($r101);

        throw $r125;

     label17:
        if r109 == null goto label10;

     label18:
        goto label22;

     label19:
        $r99 := @caughtexception;

        $r100 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r100.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r99;

     label20:
        $r96 := @caughtexception;

        $r97 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r97.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        $r98 = staticinvoke <com.rabbitmq.client.impl.AMQChannel: java.io.IOException wrap(com.rabbitmq.client.ShutdownSignalException)>($r96);

        throw $r98;

     label21:
        $r94 := @caughtexception;

        $r95 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r95.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r94;

     label22:
        $i7 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedChannelMax>;

        $i8 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getChannelMax()>();

        $i9 = virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: int negotiateChannelMax(int,int)>($i7, $i8);

        $i10 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>($i9);

        if $i10 == $i9 goto label23;

        $r60 = <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER>;

        $r59 = newarray (java.lang.Object)[3];

        $i21 = (int) 65535;

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21);

        $r59[0] = $r61;

        $r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r59[1] = $r62;

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r59[2] = $r63;

        interfaceinvoke $r60.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Channel max must be between 0 and {}, value has been set to {} instead of {}", $r59);

     label23:
        $r29 = r0.<com.rabbitmq.client.impl.AMQConnection: java.util.concurrent.ThreadFactory threadFactory>;

        $r30 = virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.ChannelManager instantiateChannelManager(int,java.util.concurrent.ThreadFactory)>($i10, $r29);

        r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.ChannelManager _channelManager> = $r30;

        $i11 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedFrameMax>;

        $i12 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getFrameMax()>();

        $i13 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: int negotiatedMaxValue(int,int)>($i11, $i12);

        r0.<com.rabbitmq.client.impl.AMQConnection: int _frameMax> = $i13;

        $i14 = r0.<com.rabbitmq.client.impl.AMQConnection: int requestedHeartbeat>;

        $i15 = interfaceinvoke r109.<com.rabbitmq.client.AMQP$Connection$Tune: int getHeartbeat()>();

        $i16 = staticinvoke <com.rabbitmq.client.impl.AMQConnection: int negotiatedMaxValue(int,int)>($i14, $i15);

        $i17 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int ensureUnsignedShort(int)>($i16);

        if $i17 == $i16 goto label24;

        $r55 = <com.rabbitmq.client.impl.AMQConnection: org.slf4j.Logger LOGGER>;

        $r54 = newarray (java.lang.Object)[3];

        $i23 = (int) 65535;

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i23);

        $r54[0] = $r56;

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r54[1] = $r57;

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        $r54[2] = $r58;

        interfaceinvoke $r55.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Heartbeat must be between 0 and {}, value has been set to {} instead of {}", $r54);

     label24:
        virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void setHeartbeat(int)>($i17);

        $r126 = new com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo;

        $r32 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $r33 = interfaceinvoke $r32.<com.rabbitmq.client.impl.FrameHandler: java.net.InetAddress getAddress()>();

        $r34 = virtualinvoke $r33.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r35 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        $i18 = interfaceinvoke $r35.<com.rabbitmq.client.impl.FrameHandler: int getPort()>();

        specialinvoke $r126.<com.rabbitmq.client.impl.AMQConnection$DefaultConnectionInfo: void <init>(java.lang.String,int,com.rabbitmq.client.impl.AMQConnection$1)>($r34, $i18, null);

        r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.observation.ObservationCollector$ConnectionInfo connectionInfo> = $r126;

        $r37 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $r127 = new com.rabbitmq.client.AMQP$Connection$TuneOk$Builder;

        specialinvoke $r127.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: void <init>()>();

        $r38 = virtualinvoke $r127.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder channelMax(int)>($i10);

        $r39 = virtualinvoke $r38.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder frameMax(int)>($i13);

        $r40 = virtualinvoke $r39.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk$Builder heartbeat(int)>($i17);

        $r41 = virtualinvoke $r40.<com.rabbitmq.client.AMQP$Connection$TuneOk$Builder: com.rabbitmq.client.AMQP$Connection$TuneOk build()>();

        virtualinvoke $r37.<com.rabbitmq.client.impl.AMQChannel: void transmit(com.rabbitmq.client.Method)>($r41);

        $r43 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.AMQChannel _channel0>;

        $r128 = new com.rabbitmq.client.AMQP$Connection$Open$Builder;

        specialinvoke $r128.<com.rabbitmq.client.AMQP$Connection$Open$Builder: void <init>()>();

        $r44 = r0.<com.rabbitmq.client.impl.AMQConnection: java.lang.String _virtualHost>;

        $r45 = virtualinvoke $r128.<com.rabbitmq.client.AMQP$Connection$Open$Builder: com.rabbitmq.client.AMQP$Connection$Open$Builder virtualHost(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<com.rabbitmq.client.AMQP$Connection$Open$Builder: com.rabbitmq.client.AMQP$Connection$Open build()>();

        virtualinvoke $r43.<com.rabbitmq.client.impl.AMQChannel: com.rabbitmq.client.impl.AMQCommand exnWrappingRpc(com.rabbitmq.client.Method)>($r46);

     label25:
        goto label28;

     label26:
        $r91 := @caughtexception;

        $r92 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.HeartbeatSender _heartbeatSender>;

        virtualinvoke $r92.<com.rabbitmq.client.impl.HeartbeatSender: void shutdown()>();

        $r93 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r93.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        throw $r91;

     label27:
        $r87 := @caughtexception;

        $r88 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.HeartbeatSender _heartbeatSender>;

        virtualinvoke $r88.<com.rabbitmq.client.impl.HeartbeatSender: void shutdown()>();

        $r89 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.FrameHandler _frameHandler>;

        interfaceinvoke $r89.<com.rabbitmq.client.impl.FrameHandler: void close()>();

        $r90 = staticinvoke <com.rabbitmq.client.impl.AMQChannel: java.io.IOException wrap(com.rabbitmq.client.ShutdownSignalException)>($r87);

        throw $r90;

     label28:
        $r47 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r48 = interfaceinvoke $r47.<com.rabbitmq.client.impl.CredentialsProvider: java.time.Duration getTimeBeforeExpiration()>();

        if $r48 == null goto label29;

        $r49 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        $r50 = r0.<com.rabbitmq.client.impl.AMQConnection: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        $r51 = staticinvoke <com.rabbitmq.client.impl.AMQConnection$lambda_start_1__3171: java.util.concurrent.Callable bootstrap$(com.rabbitmq.client.impl.AMQConnection)>(r0);

        $r52 = interfaceinvoke $r49.<com.rabbitmq.client.impl.CredentialsRefreshService: java.lang.String register(com.rabbitmq.client.impl.CredentialsProvider,java.util.concurrent.Callable)>($r50, $r51);

        $r53 = staticinvoke <com.rabbitmq.client.impl.AMQConnection$lambda_start_2__3172: com.rabbitmq.client.ShutdownListener bootstrap$(com.rabbitmq.client.impl.AMQConnection,java.lang.String)>(r0, $r52);

        virtualinvoke r0.<com.rabbitmq.client.impl.AMQConnection: void addShutdownListener(com.rabbitmq.client.ShutdownListener)>($r53);

     label29:
        r0.<com.rabbitmq.client.impl.AMQConnection: boolean _inConnectionNegotiation> = 0;

        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch com.rabbitmq.client.ShutdownSignalException from label12 to label14 with label15;
        catch java.util.concurrent.TimeoutException from label05 to label18 with label19;
        catch com.rabbitmq.client.ShutdownSignalException from label05 to label18 with label20;
        catch java.io.IOException from label05 to label18 with label21;
        catch java.io.IOException from label22 to label25 with label26;
        catch com.rabbitmq.client.ShutdownSignalException from label22 to label25 with label27;
    }

Method: <com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>
    public void setClientProperties(java.util.Map)
    {
        com.rabbitmq.client.impl.ConnectionParams r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.impl.ConnectionParams;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map clientProperties> = r1;

        return;
    }

Method: <com.rabbitmq.client.impl.ConnectionParams: java.util.Map getClientProperties()>
    public java.util.Map getClientProperties()
    {
        com.rabbitmq.client.impl.ConnectionParams r0;
        java.util.Map $r1;

        r0 := @this: com.rabbitmq.client.impl.ConnectionParams;

        $r1 = r0.<com.rabbitmq.client.impl.ConnectionParams: java.util.Map clientProperties>;

        return $r1;
    }

Method: <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>
    public com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address, java.lang.String) throws java.io.IOException
    {
        javax.net.ssl.SSLContext $r29;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory r1;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandler $r51;
        javax.net.ssl.SSLHandshakeException $r52;
        javax.net.ssl.SSLException $r49;
        com.rabbitmq.client.SocketChannelConfigurator $r26, $r48;
        com.rabbitmq.client.Address r0;
        java.lang.Throwable $r36, $r37, $r38, $r40;
        long $l3, $l5, $l10;
        javax.net.ssl.SSLSession $r21;
        java.lang.String r27, $r30, $r42;
        java.util.concurrent.atomic.AtomicLong $r4;
        java.util.concurrent.locks.Lock $r3, $r11, $r39;
        java.nio.channels.WritableByteChannel $r19;
        java.nio.channels.SocketChannel r44, $r46;
        boolean $z0, $z1, $z2, $z3;
        java.net.InetSocketAddress $r45;
        java.util.List $r6;
        java.net.Socket $r2, $r12, $r13, $r14, $r17, $r20;
        javax.net.ssl.SSLEngine $r31, r43;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState $r50;
        com.rabbitmq.client.impl.nio.NioLoopContext $r22;
        int $i0, $i1, $i2, $i4, $i6, $i7, $i8, $i9;
        com.rabbitmq.client.SslContextFactory $r28;
        com.rabbitmq.client.impl.nio.NioParams $r5, $r9, $r25, $r32, $r34, $r47;
        java.io.OutputStream $r18;
        java.nio.channels.ReadableByteChannel $r16;
        org.slf4j.Logger $r23, $r41;
        com.rabbitmq.client.SslEngineConfigurator $r33, $r35;
        java.lang.Object $r7;
        java.io.InputStream $r15;

        r1 := @this: com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory;

        r0 := @parameter0: com.rabbitmq.client.Address;

        r27 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        r43 = null;

        r44 = null;

     label01:
        $z1 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        if $z1 == 0 goto label02;

        $r28 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $r29 = interfaceinvoke $r28.<com.rabbitmq.client.SslContextFactory: javax.net.ssl.SSLContext create(java.lang.String)>(r27);

        $r30 = virtualinvoke r0.<com.rabbitmq.client.Address: java.lang.String getHost()>();

        $r31 = virtualinvoke $r29.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine(java.lang.String,int)>($r30, $i1);

        r43 = $r31;

        virtualinvoke $r31.<javax.net.ssl.SSLEngine: void setUseClientMode(boolean)>(1);

        $r32 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r33 = virtualinvoke $r32.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator getSslEngineConfigurator()>();

        if $r33 == null goto label02;

        $r34 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r35 = virtualinvoke $r34.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SslEngineConfigurator getSslEngineConfigurator()>();

        interfaceinvoke $r35.<com.rabbitmq.client.SslEngineConfigurator: void configure(javax.net.ssl.SSLEngine)>($r31);

     label02:
        $r45 = virtualinvoke r0.<com.rabbitmq.client.Address: java.net.InetSocketAddress toInetSocketAddress(int)>($i1);

        $r46 = staticinvoke <java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>();

        r44 = $r46;

        virtualinvoke $r46.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

        $r47 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r48 = virtualinvoke $r47.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator getSocketChannelConfigurator()>();

        if $r48 == null goto label03;

        $r25 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r26 = virtualinvoke $r25.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.SocketChannelConfigurator getSocketChannelConfigurator()>();

        interfaceinvoke $r26.<com.rabbitmq.client.SocketChannelConfigurator: void configure(java.nio.channels.SocketChannel)>($r46);

     label03:
        $r2 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i2 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r2.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r45, $i2);

        $z2 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: boolean ssl>;

        if $z2 == 0 goto label09;

        $r12 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i8 = virtualinvoke $r12.<java.net.Socket: int getSoTimeout()>();

        $r13 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i9 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r13.<java.net.Socket: void setSoTimeout(int)>($i9);

        virtualinvoke r43.<javax.net.ssl.SSLEngine: void beginHandshake()>();

     label04:
        $r14 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r15 = virtualinvoke $r14.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r16 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>($r15);

        $r17 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r18 = virtualinvoke $r17.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        $r19 = staticinvoke <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>($r18);

        $z3 = staticinvoke <com.rabbitmq.client.impl.nio.SslEngineHelper: boolean doHandshake(java.nio.channels.WritableByteChannel,java.nio.channels.ReadableByteChannel,javax.net.ssl.SSLEngine)>($r19, $r16, r43);

        if $z3 != 0 goto label05;

        $r23 = <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r23.<org.slf4j.Logger: void error(java.lang.String)>("TLS connection failed");

        $r49 = new javax.net.ssl.SSLException;

        specialinvoke $r49.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("TLS handshake failed");

        throw $r49;

     label05:
        $r20 = virtualinvoke $r46.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        virtualinvoke $r20.<java.net.Socket: void setSoTimeout(int)>($i8);

     label06:
        goto label08;

     label07:
        $r40 := @caughtexception;

        $r41 = <com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: org.slf4j.Logger LOGGER>;

        $r52 = (javax.net.ssl.SSLHandshakeException) $r40;

        $r42 = virtualinvoke $r52.<javax.net.ssl.SSLHandshakeException: java.lang.String getMessage()>();

        interfaceinvoke $r41.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("TLS connection failed: {}", $r42);

        throw $r40;

     label08:
        $r21 = virtualinvoke r43.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>();

        staticinvoke <com.rabbitmq.client.impl.TlsUtils: void logPeerCertificateInfo(javax.net.ssl.SSLSession)>($r21);

     label09:
        virtualinvoke $r46.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

        $r3 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label10:
        $r4 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.atomic.AtomicLong globalConnectionCount>;

        $l3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r5 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $i4 = virtualinvoke $r5.<com.rabbitmq.client.impl.nio.NioParams: int getNbIoThreads()>();

        $l5 = (long) $i4;

        $l10 = $l3 % $l5;

        $r6 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.List nioLoopContexts>;

        $i6 = (int) $l10;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i6);

        $r22 = (com.rabbitmq.client.impl.nio.NioLoopContext) $r7;

        virtualinvoke $r22.<com.rabbitmq.client.impl.nio.NioLoopContext: void initStateIfNecessary()>();

        $r50 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState;

        $r9 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $i7 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: int maxInboundMessageBodySize>;

        specialinvoke $r50.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState: void <init>(java.nio.channels.SocketChannel,com.rabbitmq.client.impl.nio.NioLoopContext,com.rabbitmq.client.impl.nio.NioParams,javax.net.ssl.SSLEngine,int)>($r46, $r22, $r9, r43, $i7);

        virtualinvoke $r50.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState: void startReading()>();

        $r51 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandler;

        specialinvoke $r51.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandler: void <init>(com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerState)>($r50);

     label11:
        $r11 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

     label12:
        return $r51;

     label13:
        $r38 := @caughtexception;

     label14:
        $r39 = r1.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: java.util.concurrent.locks.Lock stateLock>;

        interfaceinvoke $r39.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r38;

     label15:
        $r37 := @caughtexception;

     label16:
        if r43 == null goto label17;

        if r44 == null goto label17;

        staticinvoke <com.rabbitmq.client.impl.nio.SslEngineHelper: void close(java.nio.channels.WritableByteChannel,javax.net.ssl.SSLEngine)>(r44, r43);

     label17:
        if r44 == null goto label18;

        virtualinvoke r44.<java.nio.channels.SocketChannel: void close()>();

     label18:
        goto label20;

     label19:
        $r36 := @caughtexception;

     label20:
        throw $r37;

        catch javax.net.ssl.SSLHandshakeException from label04 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.io.IOException from label01 to label12 with label15;
        catch java.io.IOException from label13 to label15 with label15;
        catch java.io.IOException from label16 to label18 with label19;
    }

Method: <com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address,java.lang.String)>
    public com.rabbitmq.client.impl.FrameHandler create(com.rabbitmq.client.Address, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        java.net.Socket $r3, r8;
        com.rabbitmq.client.SocketConfigurator $r4;
        com.rabbitmq.client.impl.FrameHandler $r6;
        com.rabbitmq.client.impl.SocketFrameHandlerFactory r1;
        java.net.InetSocketAddress $r5;
        int $i0, $i1, $i2;
        java.lang.String r2;
        com.rabbitmq.client.Address r0;
        boolean $z0;

        r1 := @this: com.rabbitmq.client.impl.SocketFrameHandlerFactory;

        r0 := @parameter0: com.rabbitmq.client.Address;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        r8 = null;

     label1:
        $r3 = virtualinvoke r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: java.net.Socket createSocket(java.lang.String)>(r2);

        r8 = $r3;

        $r4 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.SocketConfigurator configurator>;

        interfaceinvoke $r4.<com.rabbitmq.client.SocketConfigurator: void configure(java.net.Socket)>($r3);

        $r5 = virtualinvoke r0.<com.rabbitmq.client.Address: java.net.InetSocketAddress toInetSocketAddress(int)>($i1);

        $i2 = r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: int connectionTimeout>;

        virtualinvoke $r3.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r5, $i2);

        $r6 = virtualinvoke r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: com.rabbitmq.client.impl.FrameHandler create(java.net.Socket)>($r3);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        staticinvoke <com.rabbitmq.client.impl.SocketFrameHandlerFactory: void quietTrySocketClose(java.net.Socket)>(r8);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector)>
    protected com.rabbitmq.client.impl.AMQConnection createConnection(com.rabbitmq.client.impl.ConnectionParams, com.rabbitmq.client.impl.FrameHandler, com.rabbitmq.client.MetricsCollector)
    {
        com.rabbitmq.client.impl.FrameHandler r2;
        com.rabbitmq.client.impl.AMQConnection $r0;
        com.rabbitmq.client.ConnectionFactory r4;
        com.rabbitmq.client.impl.ConnectionParams r1;
        com.rabbitmq.client.observation.ObservationCollector $r5;
        com.rabbitmq.client.MetricsCollector r3;

        r4 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.impl.ConnectionParams;

        r2 := @parameter1: com.rabbitmq.client.impl.FrameHandler;

        r3 := @parameter2: com.rabbitmq.client.MetricsCollector;

        $r0 = new com.rabbitmq.client.impl.AMQConnection;

        $r5 = r4.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.observation.ObservationCollector observationCollector>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandler,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>(r1, r2, r3, $r5);

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: boolean isAutomaticRecoveryEnabled()>
    public boolean isAutomaticRecoveryEnabled()
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $z0 = r0.<com.rabbitmq.client.ConnectionFactory: boolean automaticRecovery>;

        return $z0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)>
    public com.rabbitmq.client.impl.ConnectionParams params(java.util.concurrent.ExecutorService)
    {
        com.rabbitmq.client.RecoveryDelayHandler $r7;
        com.rabbitmq.client.impl.ConnectionParams $r0;
        long $l3;
        com.rabbitmq.client.impl.ErrorOnWriteListener $r13;
        java.util.Map $r5;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8;
        java.util.concurrent.ScheduledExecutorService $r12;
        java.lang.String $r4;
        java.util.concurrent.ThreadFactory $r10;
        java.util.concurrent.ExecutorService r3, $r8, $r11;
        boolean $z0, $z1;
        com.rabbitmq.client.SaslConfig $r6;
        com.rabbitmq.client.ConnectionFactory r1;
        com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter $r14;
        java.util.function.Predicate $r15;
        com.rabbitmq.client.impl.CredentialsRefreshService $r19;
        com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier $r17;
        com.rabbitmq.client.impl.recovery.RetryHandler $r16;
        com.rabbitmq.client.impl.CredentialsProvider $r2;
        com.rabbitmq.client.TrafficListener $r18;
        com.rabbitmq.client.ExceptionHandler $r9;

        r1 := @this: com.rabbitmq.client.ConnectionFactory;

        r3 := @parameter0: java.util.concurrent.ExecutorService;

        $r0 = new com.rabbitmq.client.impl.ConnectionParams;

        specialinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void <init>()>();

        $r2 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsProvider credentialsProvider>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setCredentialsProvider(com.rabbitmq.client.impl.CredentialsProvider)>($r2);

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setConsumerWorkServiceExecutor(java.util.concurrent.ExecutorService)>(r3);

        $r4 = r1.<com.rabbitmq.client.ConnectionFactory: java.lang.String virtualHost>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setVirtualHost(java.lang.String)>($r4);

        $r5 = virtualinvoke r1.<com.rabbitmq.client.ConnectionFactory: java.util.Map getClientProperties()>();

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setClientProperties(java.util.Map)>($r5);

        $i0 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedFrameMax>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedFrameMax(int)>($i0);

        $i1 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedChannelMax>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedChannelMax(int)>($i1);

        $i2 = r1.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setShutdownTimeout(int)>($i2);

        $r6 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SaslConfig saslConfig>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setSaslConfig(com.rabbitmq.client.SaslConfig)>($r6);

        $l3 = r1.<com.rabbitmq.client.ConnectionFactory: long networkRecoveryInterval>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setNetworkRecoveryInterval(long)>($l3);

        $r7 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.RecoveryDelayHandler recoveryDelayHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRecoveryDelayHandler(com.rabbitmq.client.RecoveryDelayHandler)>($r7);

        $z0 = r1.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecovery(boolean)>($z0);

        $r8 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService topologyRecoveryExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryExecutor(java.util.concurrent.ExecutorService)>($r8);

        $r9 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.ExceptionHandler exceptionHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setExceptionHandler(com.rabbitmq.client.ExceptionHandler)>($r9);

        $r10 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory threadFactory>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setThreadFactory(java.util.concurrent.ThreadFactory)>($r10);

        $i4 = r1.<com.rabbitmq.client.ConnectionFactory: int handshakeTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setHandshakeTimeout(int)>($i4);

        $i5 = r1.<com.rabbitmq.client.ConnectionFactory: int requestedHeartbeat>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRequestedHeartbeat(int)>($i5);

        $r11 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService shutdownExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setShutdownExecutor(java.util.concurrent.ExecutorService)>($r11);

        $r12 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ScheduledExecutorService heartbeatExecutor>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setHeartbeatExecutor(java.util.concurrent.ScheduledExecutorService)>($r12);

        $i6 = r1.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setChannelRpcTimeout(int)>($i6);

        $z1 = r1.<com.rabbitmq.client.ConnectionFactory: boolean channelShouldCheckRpcResponseType>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setChannelShouldCheckRpcResponseType(boolean)>($z1);

        $i7 = r1.<com.rabbitmq.client.ConnectionFactory: int workPoolTimeout>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setWorkPoolTimeout(int)>($i7);

        $r13 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.ErrorOnWriteListener errorOnWriteListener>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setErrorOnWriteListener(com.rabbitmq.client.impl.ErrorOnWriteListener)>($r13);

        $r14 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter topologyRecoveryFilter>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryFilter(com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter)>($r14);

        $r15 = r1.<com.rabbitmq.client.ConnectionFactory: java.util.function.Predicate connectionRecoveryTriggeringCondition>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setConnectionRecoveryTriggeringCondition(java.util.function.Predicate)>($r15);

        $r16 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.RetryHandler topologyRecoveryRetryHandler>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTopologyRecoveryRetryHandler(com.rabbitmq.client.impl.recovery.RetryHandler)>($r16);

        $r17 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier recoveredQueueNameSupplier>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setRecoveredQueueNameSupplier(com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier)>($r17);

        $r18 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.TrafficListener trafficListener>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setTrafficListener(com.rabbitmq.client.TrafficListener)>($r18);

        $r19 = r1.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.CredentialsRefreshService credentialsRefreshService>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setCredentialsRefreshService(com.rabbitmq.client.impl.CredentialsRefreshService)>($r19);

        $i8 = r1.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        virtualinvoke $r0.<com.rabbitmq.client.impl.ConnectionParams: void setMaxInboundMessageBodySize(int)>($i8);

        return $r0;
    }

Method: <com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory()>
    protected synchronized com.rabbitmq.client.impl.FrameHandlerFactory createFrameHandlerFactory() throws java.io.IOException
    {
        com.rabbitmq.client.SocketConfigurator $r3;
        com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory $r13;
        int $i0, $i1, $i2, $i3;
        com.rabbitmq.client.SslContextFactory $r4, $r15;
        com.rabbitmq.client.impl.nio.NioParams $r7, $r9, $r11, $r14;
        java.util.concurrent.ThreadFactory $r10, $r12;
        java.util.concurrent.ExecutorService $r5, $r8;
        boolean $z0, $z1, $z2;
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.impl.SocketFrameHandlerFactory $r1;
        com.rabbitmq.client.impl.FrameHandlerFactory $r6, $r16;
        javax.net.SocketFactory $r2;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        $z0 = r0.<com.rabbitmq.client.ConnectionFactory: boolean nio>;

        if $z0 == 0 goto label3;

        $r6 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory>;

        if $r6 != null goto label2;

        $r7 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r8 = virtualinvoke $r7.<com.rabbitmq.client.impl.nio.NioParams: java.util.concurrent.ExecutorService getNioExecutor()>();

        if $r8 != null goto label1;

        $r9 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r10 = virtualinvoke $r9.<com.rabbitmq.client.impl.nio.NioParams: java.util.concurrent.ThreadFactory getThreadFactory()>();

        if $r10 != null goto label1;

        $r11 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $r12 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ThreadFactory getThreadFactory()>();

        virtualinvoke $r11.<com.rabbitmq.client.impl.nio.NioParams: com.rabbitmq.client.impl.nio.NioParams setThreadFactory(java.util.concurrent.ThreadFactory)>($r12);

     label1:
        $r13 = new com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory;

        $i2 = r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout>;

        $r14 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.nio.NioParams nioParams>;

        $z2 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $r15 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $i3 = r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        specialinvoke $r13.<com.rabbitmq.client.impl.nio.SocketChannelFrameHandlerFactory: void <init>(int,com.rabbitmq.client.impl.nio.NioParams,boolean,com.rabbitmq.client.SslContextFactory,int)>($i2, $r14, $z2, $r15, $i3);

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory> = $r13;

     label2:
        $r16 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.impl.FrameHandlerFactory frameHandlerFactory>;

        return $r16;

     label3:
        $r1 = new com.rabbitmq.client.impl.SocketFrameHandlerFactory;

        $i0 = r0.<com.rabbitmq.client.ConnectionFactory: int connectionTimeout>;

        $r2 = r0.<com.rabbitmq.client.ConnectionFactory: javax.net.SocketFactory socketFactory>;

        $r3 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SocketConfigurator socketConf>;

        $z1 = virtualinvoke r0.<com.rabbitmq.client.ConnectionFactory: boolean isSSL()>();

        $r5 = r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService shutdownExecutor>;

        $r4 = r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.SslContextFactory sslContextFactory>;

        $i1 = r0.<com.rabbitmq.client.ConnectionFactory: int maxInboundMessageBodySize>;

        specialinvoke $r1.<com.rabbitmq.client.impl.SocketFrameHandlerFactory: void <init>(int,javax.net.SocketFactory,com.rabbitmq.client.SocketConfigurator,boolean,java.util.concurrent.ExecutorService,com.rabbitmq.client.SslContextFactory,int)>($i0, $r2, $r3, $z1, $r5, $r4, $i1);

        return $r1;
    }

Method: <com.rabbitmq.client.DnsRecordIpAddressResolver: java.util.List getAddresses()>
    public java.util.List getAddresses() throws java.net.UnknownHostException
    {
        java.net.InetAddress[] $r4;
        java.util.ArrayList $r5;
        java.net.InetAddress r6;
        com.rabbitmq.client.DnsRecordIpAddressResolver r0;
        com.rabbitmq.client.ResolvedInetAddress $r7;
        int $i0, $i1, i2, i3;
        java.lang.String $r2;
        com.rabbitmq.client.Address $r1, $r3;
        boolean $z0;

        r0 := @this: com.rabbitmq.client.DnsRecordIpAddressResolver;

        $r1 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address>;

        $r2 = virtualinvoke $r1.<com.rabbitmq.client.Address: java.lang.String getHost()>();

        $r3 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: com.rabbitmq.client.Address address>;

        $i0 = virtualinvoke $r3.<com.rabbitmq.client.Address: int getPort()>();

        $z0 = r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: boolean ssl>;

        $i1 = staticinvoke <com.rabbitmq.client.ConnectionFactory: int portOrDefault(int,boolean)>($i0, $z0);

        $r4 = virtualinvoke r0.<com.rabbitmq.client.DnsRecordIpAddressResolver: java.net.InetAddress[] resolveIpAddresses(java.lang.String)>($r2);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i2 = lengthof $r4;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r6 = $r4[i3];

        $r7 = new com.rabbitmq.client.ResolvedInetAddress;

        specialinvoke $r7.<com.rabbitmq.client.ResolvedInetAddress: void <init>(java.lang.String,java.net.InetAddress,int)>($r2, r6, $i1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        i3 = i3 + 1;

        goto label1;

     label2:
        return $r5;
    }

Method: <com.rabbitmq.client.ListAddressResolver: java.util.List getAddresses()>
    public java.util.List getAddresses()
    {
        java.util.List $r1;
        com.rabbitmq.client.ListAddressResolver r0;

        r0 := @this: com.rabbitmq.client.ListAddressResolver;

        $r1 = r0.<com.rabbitmq.client.ListAddressResolver: java.util.List addresses>;

        return $r1;
    }

Method: <com.rabbitmq.client.NoOpMetricsCollector: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.NoOpMetricsCollector r0;

        r0 := @this: com.rabbitmq.client.NoOpMetricsCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void init()>
    public void init() throws java.io.IOException, java.util.concurrent.TimeoutException
    {
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory $r1;
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection $r2, $r3;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection r0;

        r0 := @this: com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        $r1 = r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory cf>;

        $r2 = virtualinvoke $r1.<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection newConnection()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection delegate> = $r2;

        $r3 = r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection delegate>;

        specialinvoke r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void addAutomaticRecoveryListener(com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnection)>($r3);

        return;
    }

Method: <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>
    public void <init>(com.rabbitmq.client.impl.ConnectionParams, com.rabbitmq.client.impl.FrameHandlerFactory, com.rabbitmq.client.AddressResolver, com.rabbitmq.client.MetricsCollector, com.rabbitmq.client.observation.ObservationCollector)
    {
        com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory $r20;
        com.rabbitmq.client.MetricsCollector r24;
        java.util.Map $r8, $r12, $r14;
        com.rabbitmq.client.observation.ObservationCollector r25;
        com.rabbitmq.client.AddressResolver r23;
        java.util.function.Predicate $r26, $r31;
        com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter $r28, $r32;
        java.util.concurrent.ConcurrentHashMap $r27;
        java.util.List $r2, $r4, $r6, $r10, $r16, $r18;
        com.rabbitmq.client.impl.recovery.RetryHandler $r29;
        com.rabbitmq.client.impl.recovery.AutorecoveringConnection r0;
        com.rabbitmq.client.impl.ConnectionParams r21;
        java.util.ArrayList $r1, $r3, $r5, $r9, $r15, $r17;
        java.util.LinkedHashMap $r7, $r11, $r13;
        com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier $r30, $r33;
        com.rabbitmq.client.impl.FrameHandlerFactory r22;
        java.lang.Object $r19;

        r0 := @this: com.rabbitmq.client.impl.recovery.AutorecoveringConnection;

        r21 := @parameter0: com.rabbitmq.client.impl.ConnectionParams;

        r22 := @parameter1: com.rabbitmq.client.impl.FrameHandlerFactory;

        r23 := @parameter2: com.rabbitmq.client.AddressResolver;

        r24 := @parameter3: com.rabbitmq.client.MetricsCollector;

        r25 := @parameter4: com.rabbitmq.client.observation.ObservationCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List shutdownHooks> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r3);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List recoveryListeners> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r5);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List blockedListeners> = $r6;

        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        $r8 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r7);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map recordedQueues> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r9);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List recordedBindings> = $r10;

        $r11 = new java.util.LinkedHashMap;

        specialinvoke $r11.<java.util.LinkedHashMap: void <init>()>();

        $r12 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r11);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map recordedExchanges> = $r12;

        $r13 = new java.util.LinkedHashMap;

        specialinvoke $r13.<java.util.LinkedHashMap: void <init>()>();

        $r14 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r13);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map consumers> = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r16 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r15);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List consumerRecoveryListeners> = $r16;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        $r18 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r17);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.List queueRecoveryListeners> = $r18;

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: boolean manuallyClosed> = 0;

        $r19 = new java.lang.Object;

        specialinvoke $r19.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.lang.Object recoveryLock> = $r19;

        $r20 = new com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory;

        specialinvoke $r20.<com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory: void <init>(com.rabbitmq.client.impl.ConnectionParams,com.rabbitmq.client.impl.FrameHandlerFactory,com.rabbitmq.client.AddressResolver,com.rabbitmq.client.MetricsCollector,com.rabbitmq.client.observation.ObservationCollector)>(r21, r22, r23, r24, r25);

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory cf> = $r20;

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.ConnectionParams params> = r21;

        $r26 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: java.util.function.Predicate getConnectionRecoveryTriggeringCondition()>();

        if $r26 != null goto label1;

        $r31 = <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate DEFAULT_CONNECTION_RECOVERY_TRIGGERING_CONDITION>;

        goto label2;

     label1:
        $r31 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: java.util.function.Predicate getConnectionRecoveryTriggeringCondition()>();

     label2:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.function.Predicate connectionRecoveryTriggeringCondition> = $r31;

        specialinvoke r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: void setupErrorOnWriteListenerForPotentialRecovery()>();

        $r27 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r27.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: java.util.Map channels> = $r27;

        $r28 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter getTopologyRecoveryFilter()>();

        if $r28 != null goto label3;

        $r32 = staticinvoke <com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter letAllPassFilter()>();

        goto label4;

     label3:
        $r32 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter getTopologyRecoveryFilter()>();

     label4:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.TopologyRecoveryFilter topologyRecoveryFilter> = $r32;

        $r29 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RetryHandler getTopologyRecoveryRetryHandler()>();

        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RetryHandler retryHandler> = $r29;

        $r30 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier getRecoveredQueueNameSupplier()>();

        if $r30 != null goto label5;

        $r33 = <com.rabbitmq.client.impl.recovery.RecordedQueue: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier DEFAULT_QUEUE_NAME_SUPPLIER>;

        goto label6;

     label5:
        $r33 = virtualinvoke r21.<com.rabbitmq.client.impl.ConnectionParams: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier getRecoveredQueueNameSupplier()>();

     label6:
        r0.<com.rabbitmq.client.impl.recovery.AutorecoveringConnection: com.rabbitmq.client.impl.recovery.RecoveredQueueNameSupplier recoveredQueueNameSupplier> = $r33;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Address: void <init>(java.lang.String)>
Related methods: 1
caller is : <com.mware.core.model.workQueue.RabbitMQUtils: com.rabbitmq.client.Address[] createAddresses(java.lang.String[])>
callee is : <com.rabbitmq.client.Address: void <init>(java.lang.String)>

Method: <com.rabbitmq.client.Address: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        int $i1;
        java.lang.String r1;
        com.rabbitmq.client.Address r0;

        r0 := @this: com.rabbitmq.client.Address;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Address: java.lang.String _host> = r1;

        $i1 = (int) -1;

        r0.<com.rabbitmq.client.Address: int _port> = $i1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setShutdownTimeout(int)>
Related methods: 1
caller is : <org.apache.james.backends.rabbitmq.RabbitMQConnectionFactory: com.rabbitmq.client.ConnectionFactory 'from'(org.apache.james.backends.rabbitmq.RabbitMQConfiguration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setShutdownTimeout(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setShutdownTimeout(int)>
    public void setShutdownTimeout(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        r0.<com.rabbitmq.client.ConnectionFactory: int shutdownTimeout> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setChannelRpcTimeout(int)>
Related methods: 1
caller is : <org.apache.james.backends.rabbitmq.RabbitMQConnectionFactory: com.rabbitmq.client.ConnectionFactory 'from'(org.apache.james.backends.rabbitmq.RabbitMQConfiguration)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setChannelRpcTimeout(int)>

Method: <com.rabbitmq.client.ConnectionFactory: void setChannelRpcTimeout(int)>
    public void setChannelRpcTimeout(int)
    {
        int i0;
        com.rabbitmq.client.ConnectionFactory r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Timeout cannot be less than 0");

        throw $r1;

     label1:
        r0.<com.rabbitmq.client.ConnectionFactory: int channelRpcTimeout> = i0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Confirm$SelectOk$Builder: void <init>()>
Related methods: 1
caller is : <org.apache.james.backends.rabbitmq.ReactorRabbitMQChannelPool$SelectOnceChannel: com.rabbitmq.client.AMQP$Confirm$SelectOk confirmSelect()>
callee is : <com.rabbitmq.client.AMQP$Confirm$SelectOk$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$Confirm$SelectOk$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$Confirm$SelectOk$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Confirm$SelectOk$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Confirm$SelectOk$Builder: com.rabbitmq.client.AMQP$Confirm$SelectOk build()>
Related methods: 3
caller is : <org.apache.james.backends.rabbitmq.ReactorRabbitMQChannelPool$SelectOnceChannel: com.rabbitmq.client.AMQP$Confirm$SelectOk confirmSelect()>
callee is : <com.rabbitmq.client.AMQP$Confirm$SelectOk$Builder: com.rabbitmq.client.AMQP$Confirm$SelectOk build()>

Method: <com.rabbitmq.client.AMQP$Confirm$SelectOk$Builder: com.rabbitmq.client.AMQP$Confirm$SelectOk build()>
    public com.rabbitmq.client.AMQP$Confirm$SelectOk build()
    {
        com.rabbitmq.client.impl.AMQImpl$Confirm$SelectOk $r0;
        com.rabbitmq.client.AMQP$Confirm$SelectOk$Builder r1;

        r1 := @this: com.rabbitmq.client.AMQP$Confirm$SelectOk$Builder;

        $r0 = new com.rabbitmq.client.impl.AMQImpl$Confirm$SelectOk;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQImpl$Confirm$SelectOk: void <init>()>();

        return $r0;
    }

Method: <com.rabbitmq.client.impl.AMQImpl$Confirm$SelectOk: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.AMQImpl$Confirm$SelectOk r0;

        r0 := @this: com.rabbitmq.client.impl.AMQImpl$Confirm$SelectOk;

        specialinvoke r0.<com.rabbitmq.client.impl.Method: void <init>()>();

        return;
    }

Method: <com.rabbitmq.client.impl.Method: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.Method r0;

        r0 := @this: com.rabbitmq.client.impl.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setTopologyRecoveryEnabled(boolean)>
Related methods: 1
caller is : <org.apache.camel.component.rabbitmq.RabbitMQConnectionFactorySupport: com.rabbitmq.client.ConnectionFactory createFactoryFor(org.apache.camel.component.rabbitmq.RabbitMQEndpoint)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setTopologyRecoveryEnabled(boolean)>

Method: <com.rabbitmq.client.ConnectionFactory: void setTopologyRecoveryEnabled(boolean)>
    public void setTopologyRecoveryEnabled(boolean)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.ConnectionFactory: boolean topologyRecovery> = z0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setConnectionRecoveryTriggeringCondition(java.util.function.Predicate)>
Related methods: 1
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setConnectionRecoveryTriggeringCondition(java.util.function.Predicate)>

Method: <com.rabbitmq.client.ConnectionFactory: void setConnectionRecoveryTriggeringCondition(java.util.function.Predicate)>
    public void setConnectionRecoveryTriggeringCondition(java.util.function.Predicate)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        java.util.function.Predicate r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.function.Predicate;

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.function.Predicate connectionRecoveryTriggeringCondition> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setRecoveryDelayHandler(com.rabbitmq.client.RecoveryDelayHandler)>
Related methods: 1
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setRecoveryDelayHandler(com.rabbitmq.client.RecoveryDelayHandler)>

Method: <com.rabbitmq.client.ConnectionFactory: void setRecoveryDelayHandler(com.rabbitmq.client.RecoveryDelayHandler)>
    public void setRecoveryDelayHandler(com.rabbitmq.client.RecoveryDelayHandler)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        com.rabbitmq.client.RecoveryDelayHandler r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: com.rabbitmq.client.RecoveryDelayHandler;

        r0.<com.rabbitmq.client.ConnectionFactory: com.rabbitmq.client.RecoveryDelayHandler recoveryDelayHandler> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.ConnectionFactory: void setSharedExecutor(java.util.concurrent.ExecutorService)>
Related methods: 1
caller is : <com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManager: void <init>(java.lang.String,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.RabbitMQConfiguration,com.exactpro.th2.common.schema.message.impl.rabbitmq.configuration.ConnectionManagerConfiguration,java.util.concurrent.ExecutorService,java.util.concurrent.ScheduledExecutorService)>
callee is : <com.rabbitmq.client.ConnectionFactory: void setSharedExecutor(java.util.concurrent.ExecutorService)>

Method: <com.rabbitmq.client.ConnectionFactory: void setSharedExecutor(java.util.concurrent.ExecutorService)>
    public void setSharedExecutor(java.util.concurrent.ExecutorService)
    {
        com.rabbitmq.client.ConnectionFactory r0;
        java.util.concurrent.ExecutorService r1;

        r0 := @this: com.rabbitmq.client.ConnectionFactory;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        r0.<com.rabbitmq.client.ConnectionFactory: java.util.concurrent.ExecutorService sharedExecutor> = r1;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder passive(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareQueue(reactor.rabbitmq.QueueSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder passive(boolean)>

Method: <com.rabbitmq.client.AMQP$Queue$Declare$Builder: com.rabbitmq.client.AMQP$Queue$Declare$Builder passive(boolean)>
    public com.rabbitmq.client.AMQP$Queue$Declare$Builder passive(boolean)
    {
        com.rabbitmq.client.AMQP$Queue$Declare$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Declare$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Queue$Declare$Builder: boolean passive> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Delete$Builder: void <init>()>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono deleteQueue(reactor.rabbitmq.QueueSpecification,boolean,boolean,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Delete$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$Queue$Delete$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$Queue$Delete$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Delete$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: int ticket> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: java.lang.String queue> = "";

        r0.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: boolean ifUnused> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: boolean ifEmpty> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: boolean nowait> = 0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete$Builder queue(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono deleteQueue(reactor.rabbitmq.QueueSpecification,boolean,boolean,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete$Builder queue(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete$Builder queue(java.lang.String)>
    public com.rabbitmq.client.AMQP$Queue$Delete$Builder queue(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.AMQP$Queue$Delete$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Delete$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: java.lang.String queue> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete$Builder ifUnused(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono deleteQueue(reactor.rabbitmq.QueueSpecification,boolean,boolean,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete$Builder ifUnused(boolean)>

Method: <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete$Builder ifUnused(boolean)>
    public com.rabbitmq.client.AMQP$Queue$Delete$Builder ifUnused(boolean)
    {
        com.rabbitmq.client.AMQP$Queue$Delete$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Delete$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: boolean ifUnused> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete$Builder ifEmpty(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono deleteQueue(reactor.rabbitmq.QueueSpecification,boolean,boolean,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete$Builder ifEmpty(boolean)>

Method: <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete$Builder ifEmpty(boolean)>
    public com.rabbitmq.client.AMQP$Queue$Delete$Builder ifEmpty(boolean)
    {
        com.rabbitmq.client.AMQP$Queue$Delete$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Delete$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: boolean ifEmpty> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete build()>
Related methods: 3
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono deleteQueue(reactor.rabbitmq.QueueSpecification,boolean,boolean,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete build()>

Method: <com.rabbitmq.client.AMQP$Queue$Delete$Builder: com.rabbitmq.client.AMQP$Queue$Delete build()>
    public com.rabbitmq.client.AMQP$Queue$Delete build()
    {
        com.rabbitmq.client.impl.AMQImpl$Queue$Delete $r0;
        com.rabbitmq.client.AMQP$Queue$Delete$Builder r1;
        int $i0;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        r1 := @this: com.rabbitmq.client.AMQP$Queue$Delete$Builder;

        $r0 = new com.rabbitmq.client.impl.AMQImpl$Queue$Delete;

        $i0 = r1.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: int ticket>;

        $r2 = r1.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: java.lang.String queue>;

        $z2 = r1.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: boolean ifUnused>;

        $z1 = r1.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: boolean ifEmpty>;

        $z0 = r1.<com.rabbitmq.client.AMQP$Queue$Delete$Builder: boolean nowait>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(int,java.lang.String,boolean,boolean,boolean)>($i0, $r2, $z2, $z1, $z0);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.AMQImpl$Queue$Delete: void <init>(int,java.lang.String,boolean,boolean,boolean)>
    public void <init>(int, java.lang.String, boolean, boolean, boolean)
    {
        java.lang.IllegalStateException $r2;
        com.rabbitmq.client.impl.AMQImpl$Queue$Delete r0;
        int i0;
        java.lang.String r1;
        boolean z0, z1, z2;

        r0 := @this: com.rabbitmq.client.impl.AMQImpl$Queue$Delete;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        specialinvoke r0.<com.rabbitmq.client.impl.Method: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'queue\' must be non-null.");

        throw $r2;

     label1:
        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: int ticket> = i0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: java.lang.String queue> = r1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: boolean ifUnused> = z0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: boolean ifEmpty> = z1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Delete: boolean nowait> = z2;

        return;
    }

Method: <com.rabbitmq.client.impl.Method: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.Method r0;

        r0 := @this: com.rabbitmq.client.impl.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: void <init>()>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareExchange(reactor.rabbitmq.ExchangeSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$Exchange$Declare$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Declare$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: int ticket> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: java.lang.String type> = "direct";

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean passive> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean durable> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean autoDelete> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean internal> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean nowait> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: java.util.Map arguments> = null;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder exchange(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareExchange(reactor.rabbitmq.ExchangeSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder exchange(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder exchange(java.lang.String)>
    public com.rabbitmq.client.AMQP$Exchange$Declare$Builder exchange(java.lang.String)
    {
        com.rabbitmq.client.AMQP$Exchange$Declare$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Declare$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: java.lang.String exchange> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder type(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareExchange(reactor.rabbitmq.ExchangeSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder type(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder type(java.lang.String)>
    public com.rabbitmq.client.AMQP$Exchange$Declare$Builder type(java.lang.String)
    {
        com.rabbitmq.client.AMQP$Exchange$Declare$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Declare$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: java.lang.String type> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder durable(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareExchange(reactor.rabbitmq.ExchangeSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder durable(boolean)>

Method: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder durable(boolean)>
    public com.rabbitmq.client.AMQP$Exchange$Declare$Builder durable(boolean)
    {
        com.rabbitmq.client.AMQP$Exchange$Declare$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Declare$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean durable> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder autoDelete(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareExchange(reactor.rabbitmq.ExchangeSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder autoDelete(boolean)>

Method: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder autoDelete(boolean)>
    public com.rabbitmq.client.AMQP$Exchange$Declare$Builder autoDelete(boolean)
    {
        com.rabbitmq.client.AMQP$Exchange$Declare$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Declare$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean autoDelete> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder internal(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareExchange(reactor.rabbitmq.ExchangeSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder internal(boolean)>

Method: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder internal(boolean)>
    public com.rabbitmq.client.AMQP$Exchange$Declare$Builder internal(boolean)
    {
        com.rabbitmq.client.AMQP$Exchange$Declare$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Declare$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean internal> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder passive(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareExchange(reactor.rabbitmq.ExchangeSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder passive(boolean)>

Method: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder passive(boolean)>
    public com.rabbitmq.client.AMQP$Exchange$Declare$Builder passive(boolean)
    {
        com.rabbitmq.client.AMQP$Exchange$Declare$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Declare$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean passive> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder arguments(java.util.Map)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareExchange(reactor.rabbitmq.ExchangeSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder arguments(java.util.Map)>

Method: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare$Builder arguments(java.util.Map)>
    public com.rabbitmq.client.AMQP$Exchange$Declare$Builder arguments(java.util.Map)
    {
        com.rabbitmq.client.AMQP$Exchange$Declare$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Declare$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: java.util.Map arguments> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare build()>
Related methods: 3
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono declareExchange(reactor.rabbitmq.ExchangeSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare build()>

Method: <com.rabbitmq.client.AMQP$Exchange$Declare$Builder: com.rabbitmq.client.AMQP$Exchange$Declare build()>
    public com.rabbitmq.client.AMQP$Exchange$Declare build()
    {
        com.rabbitmq.client.AMQP$Exchange$Declare$Builder r1;
        java.util.Map $r2;
        int $i0;
        java.lang.String $r3, $r4;
        com.rabbitmq.client.impl.AMQImpl$Exchange$Declare $r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: com.rabbitmq.client.AMQP$Exchange$Declare$Builder;

        $r0 = new com.rabbitmq.client.impl.AMQImpl$Exchange$Declare;

        $i0 = r1.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: int ticket>;

        $r4 = r1.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: java.lang.String exchange>;

        $r3 = r1.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: java.lang.String type>;

        $z4 = r1.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean passive>;

        $z3 = r1.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean durable>;

        $z2 = r1.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean autoDelete>;

        $z1 = r1.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean internal>;

        $z0 = r1.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: boolean nowait>;

        $r2 = r1.<com.rabbitmq.client.AMQP$Exchange$Declare$Builder: java.util.Map arguments>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>($i0, $r4, $r3, $z4, $z3, $z2, $z1, $z0, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: void <init>(int,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.util.Map)>
    public void <init>(int, java.lang.String, java.lang.String, boolean, boolean, boolean, boolean, boolean, java.util.Map)
    {
        java.lang.IllegalStateException $r5, $r6;
        java.util.HashMap $r4;
        java.util.Map r3, $r7;
        int i0;
        java.lang.String r1, r2;
        com.rabbitmq.client.impl.AMQImpl$Exchange$Declare r0;
        boolean z0, z1, z2, z3, z4;

        r0 := @this: com.rabbitmq.client.impl.AMQImpl$Exchange$Declare;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        z3 := @parameter6: boolean;

        z4 := @parameter7: boolean;

        r3 := @parameter8: java.util.Map;

        specialinvoke r0.<com.rabbitmq.client.impl.Method: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'exchange\' must be non-null.");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'type\' must be non-null.");

        throw $r5;

     label2:
        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: int ticket> = i0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: java.lang.String exchange> = r1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: java.lang.String type> = r2;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: boolean passive> = z0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: boolean durable> = z1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: boolean autoDelete> = z2;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: boolean internal> = z3;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: boolean nowait> = z4;

        if r3 != null goto label3;

        $r7 = null;

        goto label4;

     label3:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>(r3);

        $r7 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4);

     label4:
        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Declare: java.util.Map arguments> = $r7;

        return;
    }

Method: <com.rabbitmq.client.impl.Method: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.Method r0;

        r0 := @this: com.rabbitmq.client.impl.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: void <init>()>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono deleteExchange(reactor.rabbitmq.ExchangeSpecification,boolean,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$Exchange$Delete$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Delete$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$Exchange$Delete$Builder: int ticket> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Delete$Builder: boolean ifUnused> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Delete$Builder: boolean nowait> = 0;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: com.rabbitmq.client.AMQP$Exchange$Delete$Builder exchange(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono deleteExchange(reactor.rabbitmq.ExchangeSpecification,boolean,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: com.rabbitmq.client.AMQP$Exchange$Delete$Builder exchange(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: com.rabbitmq.client.AMQP$Exchange$Delete$Builder exchange(java.lang.String)>
    public com.rabbitmq.client.AMQP$Exchange$Delete$Builder exchange(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.AMQP$Exchange$Delete$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Delete$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Exchange$Delete$Builder: java.lang.String exchange> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: com.rabbitmq.client.AMQP$Exchange$Delete$Builder ifUnused(boolean)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono deleteExchange(reactor.rabbitmq.ExchangeSpecification,boolean,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: com.rabbitmq.client.AMQP$Exchange$Delete$Builder ifUnused(boolean)>

Method: <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: com.rabbitmq.client.AMQP$Exchange$Delete$Builder ifUnused(boolean)>
    public com.rabbitmq.client.AMQP$Exchange$Delete$Builder ifUnused(boolean)
    {
        com.rabbitmq.client.AMQP$Exchange$Delete$Builder r0;
        boolean z0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Delete$Builder;

        z0 := @parameter0: boolean;

        r0.<com.rabbitmq.client.AMQP$Exchange$Delete$Builder: boolean ifUnused> = z0;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: com.rabbitmq.client.AMQP$Exchange$Delete build()>
Related methods: 3
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono deleteExchange(reactor.rabbitmq.ExchangeSpecification,boolean,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: com.rabbitmq.client.AMQP$Exchange$Delete build()>

Method: <com.rabbitmq.client.AMQP$Exchange$Delete$Builder: com.rabbitmq.client.AMQP$Exchange$Delete build()>
    public com.rabbitmq.client.AMQP$Exchange$Delete build()
    {
        com.rabbitmq.client.AMQP$Exchange$Delete$Builder r1;
        com.rabbitmq.client.impl.AMQImpl$Exchange$Delete $r0;
        int $i0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r1 := @this: com.rabbitmq.client.AMQP$Exchange$Delete$Builder;

        $r0 = new com.rabbitmq.client.impl.AMQImpl$Exchange$Delete;

        $i0 = r1.<com.rabbitmq.client.AMQP$Exchange$Delete$Builder: int ticket>;

        $r2 = r1.<com.rabbitmq.client.AMQP$Exchange$Delete$Builder: java.lang.String exchange>;

        $z1 = r1.<com.rabbitmq.client.AMQP$Exchange$Delete$Builder: boolean ifUnused>;

        $z0 = r1.<com.rabbitmq.client.AMQP$Exchange$Delete$Builder: boolean nowait>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: void <init>(int,java.lang.String,boolean,boolean)>($i0, $r2, $z1, $z0);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: void <init>(int,java.lang.String,boolean,boolean)>
    public void <init>(int, java.lang.String, boolean, boolean)
    {
        java.lang.IllegalStateException $r2;
        com.rabbitmq.client.impl.AMQImpl$Exchange$Delete r0;
        int i0;
        java.lang.String r1;
        boolean z0, z1;

        r0 := @this: com.rabbitmq.client.impl.AMQImpl$Exchange$Delete;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<com.rabbitmq.client.impl.Method: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'exchange\' must be non-null.");

        throw $r2;

     label1:
        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: int ticket> = i0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: java.lang.String exchange> = r1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: boolean ifUnused> = z0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Delete: boolean nowait> = z1;

        return;
    }

Method: <com.rabbitmq.client.impl.Method: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.Method r0;

        r0 := @this: com.rabbitmq.client.impl.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: void <init>()>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$Queue$Unbind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Unbind$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: int ticket> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: java.lang.String queue> = "";

        r0.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: java.lang.String routingKey> = "";

        r0.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: java.util.Map arguments> = null;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder exchange(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder exchange(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder exchange(java.lang.String)>
    public com.rabbitmq.client.AMQP$Queue$Unbind$Builder exchange(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.AMQP$Queue$Unbind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Unbind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: java.lang.String exchange> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder queue(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder queue(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder queue(java.lang.String)>
    public com.rabbitmq.client.AMQP$Queue$Unbind$Builder queue(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.AMQP$Queue$Unbind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Unbind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: java.lang.String queue> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder routingKey(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder routingKey(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder routingKey(java.lang.String)>
    public com.rabbitmq.client.AMQP$Queue$Unbind$Builder routingKey(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.AMQP$Queue$Unbind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Unbind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: java.lang.String routingKey> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder arguments(java.util.Map)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder arguments(java.util.Map)>

Method: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind$Builder arguments(java.util.Map)>
    public com.rabbitmq.client.AMQP$Queue$Unbind$Builder arguments(java.util.Map)
    {
        com.rabbitmq.client.AMQP$Queue$Unbind$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Unbind$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: java.util.Map arguments> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind build()>
Related methods: 3
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind build()>

Method: <com.rabbitmq.client.AMQP$Queue$Unbind$Builder: com.rabbitmq.client.AMQP$Queue$Unbind build()>
    public com.rabbitmq.client.AMQP$Queue$Unbind build()
    {
        com.rabbitmq.client.impl.AMQImpl$Queue$Unbind $r0;
        java.util.Map $r2;
        int $i0;
        java.lang.String $r3, $r4, $r5;
        com.rabbitmq.client.AMQP$Queue$Unbind$Builder r1;

        r1 := @this: com.rabbitmq.client.AMQP$Queue$Unbind$Builder;

        $r0 = new com.rabbitmq.client.impl.AMQImpl$Queue$Unbind;

        $i0 = r1.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: int ticket>;

        $r5 = r1.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: java.lang.String queue>;

        $r4 = r1.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: java.lang.String exchange>;

        $r3 = r1.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: java.lang.String routingKey>;

        $r2 = r1.<com.rabbitmq.client.AMQP$Queue$Unbind$Builder: java.util.Map arguments>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>($i0, $r5, $r4, $r3, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
    public void <init>(int, java.lang.String, java.lang.String, java.lang.String, java.util.Map)
    {
        java.lang.IllegalStateException $r6, $r7, $r8;
        com.rabbitmq.client.impl.AMQImpl$Queue$Unbind r0;
        java.util.HashMap $r5;
        java.util.Map r4, $r9;
        int i0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.rabbitmq.client.impl.AMQImpl$Queue$Unbind;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.util.Map;

        specialinvoke r0.<com.rabbitmq.client.impl.Method: void <init>()>();

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'exchange\' must be non-null.");

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'queue\' must be non-null.");

        throw $r7;

     label2:
        if r3 != null goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'routingKey\' must be non-null.");

        throw $r6;

     label3:
        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: int ticket> = i0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: java.lang.String queue> = r2;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: java.lang.String exchange> = r1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: java.lang.String routingKey> = r3;

        if r4 != null goto label4;

        $r9 = null;

        goto label5;

     label4:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>(java.util.Map)>(r4);

        $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r5);

     label5:
        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Unbind: java.util.Map arguments> = $r9;

        return;
    }

Method: <com.rabbitmq.client.impl.Method: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.Method r0;

        r0 := @this: com.rabbitmq.client.impl.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: void <init>()>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$Exchange$Unbind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: int ticket> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: java.lang.String routingKey> = "";

        r0.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: boolean nowait> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: java.util.Map arguments> = null;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder source(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder source(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder source(java.lang.String)>
    public com.rabbitmq.client.AMQP$Exchange$Unbind$Builder source(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.AMQP$Exchange$Unbind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: java.lang.String source> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder destination(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder destination(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder destination(java.lang.String)>
    public com.rabbitmq.client.AMQP$Exchange$Unbind$Builder destination(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.AMQP$Exchange$Unbind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: java.lang.String destination> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder routingKey(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder routingKey(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder routingKey(java.lang.String)>
    public com.rabbitmq.client.AMQP$Exchange$Unbind$Builder routingKey(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.AMQP$Exchange$Unbind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: java.lang.String routingKey> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder arguments(java.util.Map)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder arguments(java.util.Map)>

Method: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder arguments(java.util.Map)>
    public com.rabbitmq.client.AMQP$Exchange$Unbind$Builder arguments(java.util.Map)
    {
        com.rabbitmq.client.AMQP$Exchange$Unbind$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: java.util.Map arguments> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind build()>
Related methods: 3
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono unbindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind build()>

Method: <com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: com.rabbitmq.client.AMQP$Exchange$Unbind build()>
    public com.rabbitmq.client.AMQP$Exchange$Unbind build()
    {
        com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind $r0;
        com.rabbitmq.client.AMQP$Exchange$Unbind$Builder r1;
        java.util.Map $r2;
        int $i0;
        java.lang.String $r3, $r4, $r5;
        boolean $z0;

        r1 := @this: com.rabbitmq.client.AMQP$Exchange$Unbind$Builder;

        $r0 = new com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind;

        $i0 = r1.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: int ticket>;

        $r5 = r1.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: java.lang.String destination>;

        $r4 = r1.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: java.lang.String source>;

        $r3 = r1.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: java.lang.String routingKey>;

        $z0 = r1.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: boolean nowait>;

        $r2 = r1.<com.rabbitmq.client.AMQP$Exchange$Unbind$Builder: java.util.Map arguments>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>($i0, $r5, $r4, $r3, $z0, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>
    public void <init>(int, java.lang.String, java.lang.String, java.lang.String, boolean, java.util.Map)
    {
        java.lang.IllegalStateException $r6, $r7, $r8;
        java.util.HashMap $r5;
        com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind r0;
        java.util.Map r4, $r9;
        int i0;
        java.lang.String r1, r2, r3;
        boolean z0;

        r0 := @this: com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        r4 := @parameter5: java.util.Map;

        specialinvoke r0.<com.rabbitmq.client.impl.Method: void <init>()>();

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'destination\' must be non-null.");

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'routingKey\' must be non-null.");

        throw $r7;

     label2:
        if r3 != null goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'source\' must be non-null.");

        throw $r6;

     label3:
        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: int ticket> = i0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: java.lang.String destination> = r1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: java.lang.String source> = r3;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: java.lang.String routingKey> = r2;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: boolean nowait> = z0;

        if r4 != null goto label4;

        $r9 = null;

        goto label5;

     label4:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>(java.util.Map)>(r4);

        $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r5);

     label5:
        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Unbind: java.util.Map arguments> = $r9;

        return;
    }

Method: <com.rabbitmq.client.impl.Method: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.Method r0;

        r0 := @this: com.rabbitmq.client.impl.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: void <init>()>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Bind$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$Queue$Bind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Bind$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: int ticket> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: java.lang.String queue> = "";

        r0.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: java.lang.String routingKey> = "";

        r0.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: boolean nowait> = 0;

        r0.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: java.util.Map arguments> = null;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder exchange(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder exchange(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder exchange(java.lang.String)>
    public com.rabbitmq.client.AMQP$Queue$Bind$Builder exchange(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.AMQP$Queue$Bind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Bind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: java.lang.String exchange> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder queue(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder queue(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder queue(java.lang.String)>
    public com.rabbitmq.client.AMQP$Queue$Bind$Builder queue(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.AMQP$Queue$Bind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Bind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: java.lang.String queue> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder routingKey(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder routingKey(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder routingKey(java.lang.String)>
    public com.rabbitmq.client.AMQP$Queue$Bind$Builder routingKey(java.lang.String)
    {
        java.lang.String r1;
        com.rabbitmq.client.AMQP$Queue$Bind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Bind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: java.lang.String routingKey> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder arguments(java.util.Map)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder arguments(java.util.Map)>

Method: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind$Builder arguments(java.util.Map)>
    public com.rabbitmq.client.AMQP$Queue$Bind$Builder arguments(java.util.Map)
    {
        com.rabbitmq.client.AMQP$Queue$Bind$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$Queue$Bind$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: java.util.Map arguments> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind build()>
Related methods: 3
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bind(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind build()>

Method: <com.rabbitmq.client.AMQP$Queue$Bind$Builder: com.rabbitmq.client.AMQP$Queue$Bind build()>
    public com.rabbitmq.client.AMQP$Queue$Bind build()
    {
        com.rabbitmq.client.AMQP$Queue$Bind$Builder r1;
        com.rabbitmq.client.impl.AMQImpl$Queue$Bind $r0;
        java.util.Map $r2;
        int $i0;
        java.lang.String $r3, $r4, $r5;
        boolean $z0;

        r1 := @this: com.rabbitmq.client.AMQP$Queue$Bind$Builder;

        $r0 = new com.rabbitmq.client.impl.AMQImpl$Queue$Bind;

        $i0 = r1.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: int ticket>;

        $r5 = r1.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: java.lang.String queue>;

        $r4 = r1.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: java.lang.String exchange>;

        $r3 = r1.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: java.lang.String routingKey>;

        $z0 = r1.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: boolean nowait>;

        $r2 = r1.<com.rabbitmq.client.AMQP$Queue$Bind$Builder: java.util.Map arguments>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>($i0, $r5, $r4, $r3, $z0, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.AMQImpl$Queue$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>
    public void <init>(int, java.lang.String, java.lang.String, java.lang.String, boolean, java.util.Map)
    {
        java.lang.IllegalStateException $r6, $r7, $r8;
        java.util.HashMap $r5;
        com.rabbitmq.client.impl.AMQImpl$Queue$Bind r0;
        java.util.Map r4, $r9;
        int i0;
        java.lang.String r1, r2, r3;
        boolean z0;

        r0 := @this: com.rabbitmq.client.impl.AMQImpl$Queue$Bind;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        r4 := @parameter5: java.util.Map;

        specialinvoke r0.<com.rabbitmq.client.impl.Method: void <init>()>();

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'exchange\' must be non-null.");

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'queue\' must be non-null.");

        throw $r7;

     label2:
        if r3 != null goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'routingKey\' must be non-null.");

        throw $r6;

     label3:
        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: int ticket> = i0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: java.lang.String queue> = r2;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: java.lang.String exchange> = r1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: java.lang.String routingKey> = r3;

        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: boolean nowait> = z0;

        if r4 != null goto label4;

        $r9 = null;

        goto label5;

     label4:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>(java.util.Map)>(r4);

        $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r5);

     label5:
        r0.<com.rabbitmq.client.impl.AMQImpl$Queue$Bind: java.util.Map arguments> = $r9;

        return;
    }

Method: <com.rabbitmq.client.impl.Method: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.Method r0;

        r0 := @this: com.rabbitmq.client.impl.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: void <init>()>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: void <init>()>

Method: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.AMQP$Exchange$Bind$Builder r0;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Bind$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: int ticket> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: java.lang.String routingKey> = "";

        r0.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: boolean nowait> = 0;

        r0.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: java.util.Map arguments> = null;

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder source(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder source(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder source(java.lang.String)>
    public com.rabbitmq.client.AMQP$Exchange$Bind$Builder source(java.lang.String)
    {
        com.rabbitmq.client.AMQP$Exchange$Bind$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Bind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: java.lang.String source> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder destination(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder destination(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder destination(java.lang.String)>
    public com.rabbitmq.client.AMQP$Exchange$Bind$Builder destination(java.lang.String)
    {
        com.rabbitmq.client.AMQP$Exchange$Bind$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Bind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: java.lang.String destination> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder routingKey(java.lang.String)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder routingKey(java.lang.String)>

Method: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder routingKey(java.lang.String)>
    public com.rabbitmq.client.AMQP$Exchange$Bind$Builder routingKey(java.lang.String)
    {
        com.rabbitmq.client.AMQP$Exchange$Bind$Builder r0;
        java.lang.String r1;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Bind$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: java.lang.String routingKey> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder arguments(java.util.Map)>
Related methods: 1
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder arguments(java.util.Map)>

Method: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind$Builder arguments(java.util.Map)>
    public com.rabbitmq.client.AMQP$Exchange$Bind$Builder arguments(java.util.Map)
    {
        com.rabbitmq.client.AMQP$Exchange$Bind$Builder r0;
        java.util.Map r1;

        r0 := @this: com.rabbitmq.client.AMQP$Exchange$Bind$Builder;

        r1 := @parameter0: java.util.Map;

        r0.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: java.util.Map arguments> = r1;

        return r0;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind build()>
Related methods: 3
caller is : <reactor.rabbitmq.Sender: reactor.core.publisher.Mono bindExchange(reactor.rabbitmq.BindingSpecification,reactor.rabbitmq.ResourceManagementOptions)>
callee is : <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind build()>

Method: <com.rabbitmq.client.AMQP$Exchange$Bind$Builder: com.rabbitmq.client.AMQP$Exchange$Bind build()>
    public com.rabbitmq.client.AMQP$Exchange$Bind build()
    {
        com.rabbitmq.client.impl.AMQImpl$Exchange$Bind $r0;
        com.rabbitmq.client.AMQP$Exchange$Bind$Builder r1;
        java.util.Map $r2;
        int $i0;
        java.lang.String $r3, $r4, $r5;
        boolean $z0;

        r1 := @this: com.rabbitmq.client.AMQP$Exchange$Bind$Builder;

        $r0 = new com.rabbitmq.client.impl.AMQImpl$Exchange$Bind;

        $i0 = r1.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: int ticket>;

        $r5 = r1.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: java.lang.String destination>;

        $r4 = r1.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: java.lang.String source>;

        $r3 = r1.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: java.lang.String routingKey>;

        $z0 = r1.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: boolean nowait>;

        $r2 = r1.<com.rabbitmq.client.AMQP$Exchange$Bind$Builder: java.util.Map arguments>;

        specialinvoke $r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>($i0, $r5, $r4, $r3, $z0, $r2);

        return $r0;
    }

Method: <com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean,java.util.Map)>
    public void <init>(int, java.lang.String, java.lang.String, java.lang.String, boolean, java.util.Map)
    {
        com.rabbitmq.client.impl.AMQImpl$Exchange$Bind r0;
        java.lang.IllegalStateException $r6, $r7, $r8;
        java.util.HashMap $r5;
        java.util.Map r4, $r9;
        int i0;
        java.lang.String r1, r2, r3;
        boolean z0;

        r0 := @this: com.rabbitmq.client.impl.AMQImpl$Exchange$Bind;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        r4 := @parameter5: java.util.Map;

        specialinvoke r0.<com.rabbitmq.client.impl.Method: void <init>()>();

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'destination\' must be non-null.");

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'routingKey\' must be non-null.");

        throw $r7;

     label2:
        if r3 != null goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid configuration: \'source\' must be non-null.");

        throw $r6;

     label3:
        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: int ticket> = i0;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: java.lang.String destination> = r1;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: java.lang.String source> = r3;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: java.lang.String routingKey> = r2;

        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: boolean nowait> = z0;

        if r4 != null goto label4;

        $r9 = null;

        goto label5;

     label4:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>(java.util.Map)>(r4);

        $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r5);

     label5:
        r0.<com.rabbitmq.client.impl.AMQImpl$Exchange$Bind: java.util.Map arguments> = $r9;

        return;
    }

Method: <com.rabbitmq.client.impl.Method: void <init>()>
    public void <init>()
    {
        com.rabbitmq.client.impl.Method r0;

        r0 := @this: com.rabbitmq.client.impl.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.AlreadyClosedException: void <init>(com.rabbitmq.client.ShutdownSignalException)>
Related methods: 5
caller is : <net.jodah.lyra.internal.ChannelHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>
callee is : <com.rabbitmq.client.AlreadyClosedException: void <init>(com.rabbitmq.client.ShutdownSignalException)>

Method: <com.rabbitmq.client.AlreadyClosedException: void <init>(com.rabbitmq.client.ShutdownSignalException)>
    public void <init>(com.rabbitmq.client.ShutdownSignalException)
    {
        com.rabbitmq.client.ShutdownSignalException r1;
        com.rabbitmq.client.AlreadyClosedException r0;

        r0 := @this: com.rabbitmq.client.AlreadyClosedException;

        r1 := @parameter0: com.rabbitmq.client.ShutdownSignalException;

        specialinvoke r0.<com.rabbitmq.client.AlreadyClosedException: void <init>(com.rabbitmq.client.ShutdownSignalException,java.lang.Throwable)>(r1, null);

        return;
    }

Method: <com.rabbitmq.client.AlreadyClosedException: void <init>(com.rabbitmq.client.ShutdownSignalException,java.lang.Throwable)>
    public void <init>(com.rabbitmq.client.ShutdownSignalException, java.lang.Throwable)
    {
        java.lang.Throwable r5, $r6;
        com.rabbitmq.client.ShutdownSignalException r1;
        com.rabbitmq.client.AlreadyClosedException r0;
        com.rabbitmq.client.Method $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @this: com.rabbitmq.client.AlreadyClosedException;

        r1 := @parameter0: com.rabbitmq.client.ShutdownSignalException;

        r5 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r1.<com.rabbitmq.client.ShutdownSignalException: boolean isHardError()>();

        $z1 = virtualinvoke r1.<com.rabbitmq.client.ShutdownSignalException: boolean isInitiatedByApplication()>();

        $r2 = virtualinvoke r1.<com.rabbitmq.client.ShutdownSignalException: com.rabbitmq.client.Method getReason()>();

        $r3 = virtualinvoke r1.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReference()>();

        $r4 = staticinvoke <com.rabbitmq.client.AlreadyClosedException: java.lang.String composeMessagePrefix(com.rabbitmq.client.ShutdownSignalException)>(r1);

        if r5 != null goto label1;

        $r6 = virtualinvoke r1.<com.rabbitmq.client.ShutdownSignalException: java.lang.Throwable getCause()>();

        goto label2;

     label1:
        $r6 = r5;

     label2:
        specialinvoke r0.<com.rabbitmq.client.ShutdownSignalException: void <init>(boolean,boolean,com.rabbitmq.client.Method,java.lang.Object,java.lang.String,java.lang.Throwable)>($z0, $z1, $r2, $r3, $r4, $r6);

        return;
    }

Method: <com.rabbitmq.client.ShutdownSignalException: void <init>(boolean,boolean,com.rabbitmq.client.Method,java.lang.Object,java.lang.String,java.lang.Throwable)>
    public void <init>(boolean, boolean, com.rabbitmq.client.Method, java.lang.Object, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        com.rabbitmq.client.ShutdownSignalException r0;
        com.rabbitmq.client.Method r1;
        java.lang.Object r5;
        java.lang.String r2, $r4;
        boolean z0, z1;

        r0 := @this: com.rabbitmq.client.ShutdownSignalException;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 := @parameter2: com.rabbitmq.client.Method;

        r5 := @parameter3: java.lang.Object;

        r2 := @parameter4: java.lang.String;

        r3 := @parameter5: java.lang.Throwable;

        $r4 = staticinvoke <com.rabbitmq.client.ShutdownSignalException: java.lang.String composeMessage(boolean,boolean,com.rabbitmq.client.Method,java.lang.String,java.lang.Throwable)>(z0, z1, r1, r2, r3);

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        r0.<com.rabbitmq.client.ShutdownSignalException: boolean _hardError> = z0;

        r0.<com.rabbitmq.client.ShutdownSignalException: boolean _initiatedByApplication> = z1;

        r0.<com.rabbitmq.client.ShutdownSignalException: com.rabbitmq.client.Method _reason> = r1;

        r0.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object _ref> = r5;

        return;
    }

Method: <com.rabbitmq.client.ShutdownSignalException: java.lang.String composeMessage(boolean,boolean,com.rabbitmq.client.Method,java.lang.String,java.lang.Throwable)>
    private static java.lang.String composeMessage(boolean, boolean, com.rabbitmq.client.Method, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r12;
        com.rabbitmq.client.Method r11;
        java.lang.String $r4, r9, $r13, $r17, $r18, $r19;
        boolean z0, z1;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r10, $r14, $r15;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r11 := @parameter2: com.rabbitmq.client.Method;

        r9 := @parameter3: java.lang.String;

        r12 := @parameter4: java.lang.Throwable;

        if z0 == 0 goto label1;

        $r19 = "connection";

        $r18 = "connection";

        goto label2;

     label1:
        $r19 = "channel";

        $r18 = "channel";

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clean ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shutdown");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" error");

        if z1 == 0 goto label3;

        $r17 = $r4;

        goto label4;

     label3:
        $r17 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(r9);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        if r11 == null goto label5;

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; protocol method: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

     label5:
        if r12 == null goto label6;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; cause: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

     label6:
        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

Method: <com.rabbitmq.client.AlreadyClosedException: java.lang.String composeMessagePrefix(com.rabbitmq.client.ShutdownSignalException)>
    private static java.lang.String composeMessagePrefix(com.rabbitmq.client.ShutdownSignalException)
    {
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4, $r5;
        com.rabbitmq.client.ShutdownSignalException r0;
        boolean $z0;

        r0 := @parameter0: com.rabbitmq.client.ShutdownSignalException;

        $z0 = virtualinvoke r0.<com.rabbitmq.client.ShutdownSignalException: boolean isHardError()>();

        if $z0 == 0 goto label1;

        $r5 = "connection ";

        goto label2;

     label1:
        $r5 = "channel ";

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is already closed due to ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

-----------
Method to be analyzed: <com.rabbitmq.client.Envelope: void <init>(long,boolean,java.lang.String,java.lang.String)>
Related methods: 1
caller is : <net.jodah.lyra.internal.ConsumerDelegate: void handleDelivery(java.lang.String,com.rabbitmq.client.Envelope,com.rabbitmq.client.AMQP$BasicProperties,byte[])>
callee is : <com.rabbitmq.client.Envelope: void <init>(long,boolean,java.lang.String,java.lang.String)>

Method: <com.rabbitmq.client.Envelope: void <init>(long,boolean,java.lang.String,java.lang.String)>
    public void <init>(long, boolean, java.lang.String, java.lang.String)
    {
        com.rabbitmq.client.Envelope r0;
        long l0;
        java.lang.String r1, r2;
        boolean z0;

        r0 := @this: com.rabbitmq.client.Envelope;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.rabbitmq.client.Envelope: long _deliveryTag> = l0;

        r0.<com.rabbitmq.client.Envelope: boolean _redeliver> = z0;

        r0.<com.rabbitmq.client.Envelope: java.lang.String _exchange> = r1;

        r0.<com.rabbitmq.client.Envelope: java.lang.String _routingKey> = r2;

        return;
    }

-----------
