Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.v3.ConnectionFactoryImpl: java.util.List getParametersForStartup(java.lang.String,java.lang.String,java.util.Properties,boolean)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.v3.ConnectionFactoryImpl: java.util.List getParametersForStartup(java.lang.String,java.lang.String,java.util.Properties,boolean)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.v3.ConnectionFactoryImpl: java.util.List getParametersForStartup(java.lang.String,java.lang.String,java.util.Properties,boolean)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.v3.ConnectionFactoryImpl: java.util.List getParametersForStartup(java.lang.String,java.lang.String,java.util.Properties,boolean)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.v3.ConnectionFactoryImpl: java.util.List getParametersForStartup(java.lang.String,java.lang.String,java.util.Properties,boolean)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.NativeAuthPluginHelper: java.lang.String getNativeAuthPluginCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties setAuthProperties(com.amazon.redshift.util.RedshiftProperties,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties setAuthProperties(com.amazon.redshift.util.RedshiftProperties,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: com.amazon.redshift.util.RedshiftProperties setIAMProperties(com.amazon.redshift.util.RedshiftProperties,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: com.amazon.redshift.util.RedshiftProperties setIAMProperties(com.amazon.redshift.util.RedshiftProperties,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.utils.CheckUtils: void checkMissingAndThrows(java.lang.String,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.BrowserIdcAuthPlugin$1: java.lang.Object apply(java.util.List)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String formBasedAuthentication()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.CommonCredentialsProvider: void refresh()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.CommonCredentialsProvider: java.lang.String getIdpToken()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.IdpTokenAuthPlugin: void checkRequiredParameters()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.IdpTokenAuthPlugin: void checkRequiredParameters()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.BrowserIdcAuthPlugin: void checkRequiredParameters()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.BrowserIdcAuthPlugin: void checkRequiredParameters()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.BrowserIdcAuthPlugin: void addParameter(java.lang.String,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.BrowserIdcAuthPlugin: void addParameter(java.lang.String,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazon.redshift.NativeTokenHolder processCreateTokenResult(com.amazonaws.services.ssooidc.model.CreateTokenResult)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: com.amazon.redshift.CredentialsHolder getCredentials()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void checkRequiredParameters()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void checkRequiredParameters()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void checkRequiredParameters()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.BrowserAzureCredentialsProvider: java.lang.String extractSamlAssertion(java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.BrowserAzureCredentialsProvider$1: java.lang.Object apply(java.util.List)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String handleSamlAssertion(org.apache.http.impl.client.CloseableHttpClient,java.lang.String)>
callee is : <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String formBasedAuthentication()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String formBasedAuthentication()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.io.File extractExecutable()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.io.File extractExecutable()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.io.File extractExecutable()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.io.File extractExecutable()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String oktaAuthentication(org.apache.http.impl.client.CloseableHttpClient)>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String oktaAuthentication(org.apache.http.impl.client.CloseableHttpClient)>
callee is : <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>

Method: <com.amazonaws.util.IOUtils: void closeQuietly(java.io.Closeable,org.apache.commons.logging.Log)>
    public static void closeQuietly(java.io.Closeable, org.apache.commons.logging.Log)
    {
        java.lang.Throwable $r1;
        java.io.Closeable r0;
        org.apache.commons.logging.Log r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.io.Closeable;

        r2 := @parameter1: org.apache.commons.logging.Log;

        if r0 == null goto label6;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        if r2 != null goto label4;

        $r3 = <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog>;

        goto label5;

     label4:
        $r3 = r2;

     label5:
        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Ignore failure in closing the Closeable", $r1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String formBasedAuthentication()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: java.lang.String getIdpToken()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: java.lang.String getIdpToken()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.PingCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.OktaCredentialsProvider: java.lang.String getSamlAssertion()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: com.amazon.redshift.CredentialsHolder getCredentials()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.SdkClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
Related methods: 2
caller is : <com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
callee is : <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
Related methods: 2
caller is : <com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
callee is : <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
Related methods: 2
caller is : <com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
Related methods: 2
caller is : <com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
Related methods: 2
caller is : <com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
Related methods: 2
caller is : <com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkBaseException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.SdkBaseException r0;

        r0 := @this: com.amazonaws.SdkBaseException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.services.s3.model.ObjectMetadata: java.util.Map getUserMetadata()>
Related methods: 1
caller is : <org.modeshape.jcr.value.binary.S3BinaryStore: org.modeshape.jcr.value.BinaryValue storeValue(java.io.InputStream,boolean)>
callee is : <com.amazonaws.services.s3.model.ObjectMetadata: java.util.Map getUserMetadata()>

Method: <com.amazonaws.services.s3.model.ObjectMetadata: java.util.Map getUserMetadata()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>
Related methods: 2
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>

Method: <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>
    public void <init>(com.amazonaws.auth.AWSCredentials)
    {
        com.amazonaws.auth.AWSStaticCredentialsProvider r0;
        java.lang.Object $r2;
        com.amazonaws.auth.AWSCredentials r1, $r3;

        r0 := @this: com.amazonaws.auth.AWSStaticCredentialsProvider;

        r1 := @parameter0: com.amazonaws.auth.AWSCredentials;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>(r1, "credentials");

        $r3 = (com.amazonaws.auth.AWSCredentials) $r2;

        r0.<com.amazonaws.auth.AWSStaticCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials> = $r3;

        return;
    }

Method: <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>
    public static java.lang.Object assertNotNull(java.lang.Object, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r2;
        java.lang.Object r0;
        java.lang.String r3, $r4;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s cannot be null", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        return r0;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>
Related methods: 2
caller is : <com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
callee is : <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>

Method: <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>
    public void <init>(com.amazonaws.auth.AWSCredentials)
    {
        com.amazonaws.auth.AWSStaticCredentialsProvider r0;
        java.lang.Object $r2;
        com.amazonaws.auth.AWSCredentials r1, $r3;

        r0 := @this: com.amazonaws.auth.AWSStaticCredentialsProvider;

        r1 := @parameter0: com.amazonaws.auth.AWSCredentials;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>(r1, "credentials");

        $r3 = (com.amazonaws.auth.AWSCredentials) $r2;

        r0.<com.amazonaws.auth.AWSStaticCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials> = $r3;

        return;
    }

Method: <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>
    public static java.lang.Object assertNotNull(java.lang.Object, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r2;
        java.lang.Object r0;
        java.lang.String r3, $r4;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s cannot be null", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        return r0;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>
Related methods: 2
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>

Method: <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>
    public void <init>(com.amazonaws.auth.AWSCredentials)
    {
        com.amazonaws.auth.AWSStaticCredentialsProvider r0;
        java.lang.Object $r2;
        com.amazonaws.auth.AWSCredentials r1, $r3;

        r0 := @this: com.amazonaws.auth.AWSStaticCredentialsProvider;

        r1 := @parameter0: com.amazonaws.auth.AWSCredentials;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>(r1, "credentials");

        $r3 = (com.amazonaws.auth.AWSCredentials) $r2;

        r0.<com.amazonaws.auth.AWSStaticCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials> = $r3;

        return;
    }

Method: <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>
    public static java.lang.Object assertNotNull(java.lang.Object, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r2;
        java.lang.Object r0;
        java.lang.String r3, $r4;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s cannot be null", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        return r0;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>
Related methods: 2
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>

Method: <com.amazonaws.auth.AWSStaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>
    public void <init>(com.amazonaws.auth.AWSCredentials)
    {
        com.amazonaws.auth.AWSStaticCredentialsProvider r0;
        java.lang.Object $r2;
        com.amazonaws.auth.AWSCredentials r1, $r3;

        r0 := @this: com.amazonaws.auth.AWSStaticCredentialsProvider;

        r1 := @parameter0: com.amazonaws.auth.AWSCredentials;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>(r1, "credentials");

        $r3 = (com.amazonaws.auth.AWSCredentials) $r2;

        r0.<com.amazonaws.auth.AWSStaticCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials> = $r3;

        return;
    }

Method: <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>
    public static java.lang.Object assertNotNull(java.lang.Object, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r2;
        java.lang.Object r0;
        java.lang.String r3, $r4;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s cannot be null", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        return r0;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
callee is : <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, null);

        return;
    }

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3, r4;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, null);

        return;
    }

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3, r4, r5;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsAccessKey> = r1;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsSecretKey> = r2;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String sessionToken> = r3;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String accountId> = r4;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String providerName> = r5;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
callee is : <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, null);

        return;
    }

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3, r4;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, null);

        return;
    }

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3, r4, r5;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsAccessKey> = r1;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsSecretKey> = r2;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String sessionToken> = r3;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String accountId> = r4;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String providerName> = r5;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, null);

        return;
    }

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3, r4;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, null);

        return;
    }

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3, r4, r5;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsAccessKey> = r1;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsSecretKey> = r2;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String sessionToken> = r3;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String accountId> = r4;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String providerName> = r5;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>
Related methods: 3
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, null);

        return;
    }

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3, r4;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, null);

        return;
    }

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3, r4, r5;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsAccessKey> = r1;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsSecretKey> = r2;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String sessionToken> = r3;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String accountId> = r4;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String providerName> = r5;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>
Related methods: 21
caller is : <com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
callee is : <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>

Method: <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>
    public static com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)
    {
        java.lang.Object $r1;
        com.fasterxml.jackson.databind.JsonNode $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.amazonaws.util.json.Jackson: java.lang.Object fromJsonString(java.lang.String,java.lang.Class)>(r0, class "Lcom/fasterxml/jackson/databind/JsonNode;");

        $r2 = (com.fasterxml.jackson.databind.JsonNode) $r1;

        return $r2;
    }

Method: <com.amazonaws.util.json.Jackson: void <clinit>()>
    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ObjectWriter $r8, $r10;
        com.fasterxml.jackson.databind.ObjectMapper $r2, $r4, $r6, $r7, $r9;
        com.fasterxml.jackson.databind.DeserializationFeature $r5;
        com.amazonaws.util.json.Jackson$1 $r11;
        com.fasterxml.jackson.core.JsonParser$Feature $r3;
        com.amazonaws.util.json.Jackson[] $r0;
        com.amazonaws.log.InternalLogApi $r1;

        $r0 = newarray (com.amazonaws.util.json.Jackson)[0];

        <com.amazonaws.util.json.Jackson: com.amazonaws.util.json.Jackson[] $VALUES> = $r0;

        $r1 = staticinvoke <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>(class "Lcom/amazonaws/util/json/Jackson;");

        <com.amazonaws.util.json.Jackson: com.amazonaws.log.InternalLogApi log> = $r1;

        $r2 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper> = $r2;

        $r4 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>($r3, 1);

        $r6 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r5 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES>;

        virtualinvoke $r6.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)>($r5, 0);

        $r7 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r8 = virtualinvoke $r7.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writer()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter writer> = $r8;

        $r9 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r10 = virtualinvoke $r9.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter prettyWriter> = $r10;

        $r11 = new com.amazonaws.util.json.Jackson$1;

        specialinvoke $r11.<com.amazonaws.util.json.Jackson$1: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.core.type.TypeReference STRING_MAP_TYPEREFERENCE> = $r11;

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.amazonaws.log.JulLogFactory: void <init>()>
    public void <init>()
    {
        com.amazonaws.log.JulLogFactory r0;

        r0 := @this: com.amazonaws.log.JulLogFactory;

        specialinvoke r0.<com.amazonaws.log.InternalLogFactory: void <init>()>();

        return;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>
Abstract method
Method: <com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
Abstract method
Method: <com.amazonaws.util.json.Jackson$1: void <init>()>
    void <init>()
    {
        com.amazonaws.util.json.Jackson$1 r0;

        r0 := @this: com.amazonaws.util.json.Jackson$1;

        specialinvoke r0.<com.fasterxml.jackson.core.type.TypeReference: void <init>()>();

        return;
    }

Method: <com.fasterxml.jackson.core.type.TypeReference: void <init>()>
Abstract method
Method: <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>
    public static com.amazonaws.log.InternalLogApi getLog(java.lang.Class)
    {
        com.amazonaws.log.InternalLogFactory $r2;
        java.lang.Class r0;
        java.lang.String $r1;
        com.amazonaws.log.InternalLog $r4;
        boolean $z0;
        com.amazonaws.log.InternalLogApi $r3;

        r0 := @parameter0: java.lang.Class;

        $z0 = <com.amazonaws.log.InternalLogFactory: boolean factoryConfigured>;

        if $z0 == 0 goto label1;

        $r2 = <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory>;

        $r3 = virtualinvoke $r2.<com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi doGetLog(java.lang.Class)>(r0);

        goto label2;

     label1:
        $r4 = new com.amazonaws.log.InternalLog;

        $r3 = $r4;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<com.amazonaws.log.InternalLog: void <init>(java.lang.String)>($r1);

     label2:
        return $r3;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.amazonaws.log.InternalLog: void <init>(java.lang.String)>
    void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.log.InternalLog r0;

        r0 := @this: com.amazonaws.log.InternalLog;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.log.InternalLog: java.lang.String name> = r1;

        return;
    }

Method: <com.amazonaws.util.json.Jackson: java.lang.Object fromJsonString(java.lang.String,java.lang.Class)>
    public static java.lang.Object fromJsonString(java.lang.String, java.lang.Class)
    {
        com.amazonaws.SdkClientException $r5;
        com.fasterxml.jackson.databind.ObjectMapper $r2;
        java.lang.Class r1;
        java.lang.Object $r3;
        java.lang.String r0;
        java.lang.Exception $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>(r0, r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.amazonaws.SdkClientException;

        specialinvoke $r5.<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to parse Json String.", $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.json.Jackson: void <clinit>()>
    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ObjectWriter $r8, $r10;
        com.fasterxml.jackson.databind.ObjectMapper $r2, $r4, $r6, $r7, $r9;
        com.fasterxml.jackson.databind.DeserializationFeature $r5;
        com.amazonaws.util.json.Jackson$1 $r11;
        com.fasterxml.jackson.core.JsonParser$Feature $r3;
        com.amazonaws.util.json.Jackson[] $r0;
        com.amazonaws.log.InternalLogApi $r1;

        $r0 = newarray (com.amazonaws.util.json.Jackson)[0];

        <com.amazonaws.util.json.Jackson: com.amazonaws.util.json.Jackson[] $VALUES> = $r0;

        $r1 = staticinvoke <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>(class "Lcom/amazonaws/util/json/Jackson;");

        <com.amazonaws.util.json.Jackson: com.amazonaws.log.InternalLogApi log> = $r1;

        $r2 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper> = $r2;

        $r4 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>($r3, 1);

        $r6 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r5 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES>;

        virtualinvoke $r6.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)>($r5, 0);

        $r7 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r8 = virtualinvoke $r7.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writer()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter writer> = $r8;

        $r9 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r10 = virtualinvoke $r9.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter prettyWriter> = $r10;

        $r11 = new com.amazonaws.util.json.Jackson$1;

        specialinvoke $r11.<com.amazonaws.util.json.Jackson$1: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.core.type.TypeReference STRING_MAP_TYPEREFERENCE> = $r11;

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>
Abstract method
Method: <com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
Abstract method
Method: <com.amazonaws.util.json.Jackson$1: void <init>()>
    void <init>()
    {
        com.amazonaws.util.json.Jackson$1 r0;

        r0 := @this: com.amazonaws.util.json.Jackson$1;

        specialinvoke r0.<com.fasterxml.jackson.core.type.TypeReference: void <init>()>();

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>
    public static com.amazonaws.log.InternalLogApi getLog(java.lang.Class)
    {
        com.amazonaws.log.InternalLogFactory $r2;
        java.lang.Class r0;
        java.lang.String $r1;
        com.amazonaws.log.InternalLog $r4;
        boolean $z0;
        com.amazonaws.log.InternalLogApi $r3;

        r0 := @parameter0: java.lang.Class;

        $z0 = <com.amazonaws.log.InternalLogFactory: boolean factoryConfigured>;

        if $z0 == 0 goto label1;

        $r2 = <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory>;

        $r3 = virtualinvoke $r2.<com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi doGetLog(java.lang.Class)>(r0);

        goto label2;

     label1:
        $r4 = new com.amazonaws.log.InternalLog;

        $r3 = $r4;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<com.amazonaws.log.InternalLog: void <init>(java.lang.String)>($r1);

     label2:
        return $r3;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>
Abstract method
Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>
Related methods: 21
caller is : <com.amazon.redshift.plugin.BrowserAzureCredentialsProvider: java.lang.String extractSamlAssertion(java.lang.String)>
callee is : <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>

Method: <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>
    public static com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)
    {
        java.lang.Object $r1;
        com.fasterxml.jackson.databind.JsonNode $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.amazonaws.util.json.Jackson: java.lang.Object fromJsonString(java.lang.String,java.lang.Class)>(r0, class "Lcom/fasterxml/jackson/databind/JsonNode;");

        $r2 = (com.fasterxml.jackson.databind.JsonNode) $r1;

        return $r2;
    }

Method: <com.amazonaws.util.json.Jackson: void <clinit>()>
    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ObjectWriter $r8, $r10;
        com.fasterxml.jackson.databind.ObjectMapper $r2, $r4, $r6, $r7, $r9;
        com.fasterxml.jackson.databind.DeserializationFeature $r5;
        com.amazonaws.util.json.Jackson$1 $r11;
        com.fasterxml.jackson.core.JsonParser$Feature $r3;
        com.amazonaws.util.json.Jackson[] $r0;
        com.amazonaws.log.InternalLogApi $r1;

        $r0 = newarray (com.amazonaws.util.json.Jackson)[0];

        <com.amazonaws.util.json.Jackson: com.amazonaws.util.json.Jackson[] $VALUES> = $r0;

        $r1 = staticinvoke <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>(class "Lcom/amazonaws/util/json/Jackson;");

        <com.amazonaws.util.json.Jackson: com.amazonaws.log.InternalLogApi log> = $r1;

        $r2 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper> = $r2;

        $r4 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>($r3, 1);

        $r6 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r5 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES>;

        virtualinvoke $r6.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)>($r5, 0);

        $r7 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r8 = virtualinvoke $r7.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writer()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter writer> = $r8;

        $r9 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r10 = virtualinvoke $r9.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter prettyWriter> = $r10;

        $r11 = new com.amazonaws.util.json.Jackson$1;

        specialinvoke $r11.<com.amazonaws.util.json.Jackson$1: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.core.type.TypeReference STRING_MAP_TYPEREFERENCE> = $r11;

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.amazonaws.log.JulLogFactory: void <init>()>
    public void <init>()
    {
        com.amazonaws.log.JulLogFactory r0;

        r0 := @this: com.amazonaws.log.JulLogFactory;

        specialinvoke r0.<com.amazonaws.log.InternalLogFactory: void <init>()>();

        return;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>
Abstract method
Method: <com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
Abstract method
Method: <com.amazonaws.util.json.Jackson$1: void <init>()>
    void <init>()
    {
        com.amazonaws.util.json.Jackson$1 r0;

        r0 := @this: com.amazonaws.util.json.Jackson$1;

        specialinvoke r0.<com.fasterxml.jackson.core.type.TypeReference: void <init>()>();

        return;
    }

Method: <com.fasterxml.jackson.core.type.TypeReference: void <init>()>
Abstract method
Method: <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>
    public static com.amazonaws.log.InternalLogApi getLog(java.lang.Class)
    {
        com.amazonaws.log.InternalLogFactory $r2;
        java.lang.Class r0;
        java.lang.String $r1;
        com.amazonaws.log.InternalLog $r4;
        boolean $z0;
        com.amazonaws.log.InternalLogApi $r3;

        r0 := @parameter0: java.lang.Class;

        $z0 = <com.amazonaws.log.InternalLogFactory: boolean factoryConfigured>;

        if $z0 == 0 goto label1;

        $r2 = <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory>;

        $r3 = virtualinvoke $r2.<com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi doGetLog(java.lang.Class)>(r0);

        goto label2;

     label1:
        $r4 = new com.amazonaws.log.InternalLog;

        $r3 = $r4;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<com.amazonaws.log.InternalLog: void <init>(java.lang.String)>($r1);

     label2:
        return $r3;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.amazonaws.log.InternalLog: void <init>(java.lang.String)>
    void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.log.InternalLog r0;

        r0 := @this: com.amazonaws.log.InternalLog;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.log.InternalLog: java.lang.String name> = r1;

        return;
    }

Method: <com.amazonaws.util.json.Jackson: java.lang.Object fromJsonString(java.lang.String,java.lang.Class)>
    public static java.lang.Object fromJsonString(java.lang.String, java.lang.Class)
    {
        com.amazonaws.SdkClientException $r5;
        com.fasterxml.jackson.databind.ObjectMapper $r2;
        java.lang.Class r1;
        java.lang.Object $r3;
        java.lang.String r0;
        java.lang.Exception $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>(r0, r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.amazonaws.SdkClientException;

        specialinvoke $r5.<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to parse Json String.", $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.json.Jackson: void <clinit>()>
    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ObjectWriter $r8, $r10;
        com.fasterxml.jackson.databind.ObjectMapper $r2, $r4, $r6, $r7, $r9;
        com.fasterxml.jackson.databind.DeserializationFeature $r5;
        com.amazonaws.util.json.Jackson$1 $r11;
        com.fasterxml.jackson.core.JsonParser$Feature $r3;
        com.amazonaws.util.json.Jackson[] $r0;
        com.amazonaws.log.InternalLogApi $r1;

        $r0 = newarray (com.amazonaws.util.json.Jackson)[0];

        <com.amazonaws.util.json.Jackson: com.amazonaws.util.json.Jackson[] $VALUES> = $r0;

        $r1 = staticinvoke <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>(class "Lcom/amazonaws/util/json/Jackson;");

        <com.amazonaws.util.json.Jackson: com.amazonaws.log.InternalLogApi log> = $r1;

        $r2 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper> = $r2;

        $r4 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>($r3, 1);

        $r6 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r5 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES>;

        virtualinvoke $r6.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)>($r5, 0);

        $r7 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r8 = virtualinvoke $r7.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writer()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter writer> = $r8;

        $r9 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r10 = virtualinvoke $r9.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter prettyWriter> = $r10;

        $r11 = new com.amazonaws.util.json.Jackson$1;

        specialinvoke $r11.<com.amazonaws.util.json.Jackson$1: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.core.type.TypeReference STRING_MAP_TYPEREFERENCE> = $r11;

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>
Abstract method
Method: <com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
Abstract method
Method: <com.amazonaws.util.json.Jackson$1: void <init>()>
    void <init>()
    {
        com.amazonaws.util.json.Jackson$1 r0;

        r0 := @this: com.amazonaws.util.json.Jackson$1;

        specialinvoke r0.<com.fasterxml.jackson.core.type.TypeReference: void <init>()>();

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>
    public static com.amazonaws.log.InternalLogApi getLog(java.lang.Class)
    {
        com.amazonaws.log.InternalLogFactory $r2;
        java.lang.Class r0;
        java.lang.String $r1;
        com.amazonaws.log.InternalLog $r4;
        boolean $z0;
        com.amazonaws.log.InternalLogApi $r3;

        r0 := @parameter0: java.lang.Class;

        $z0 = <com.amazonaws.log.InternalLogFactory: boolean factoryConfigured>;

        if $z0 == 0 goto label1;

        $r2 = <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory>;

        $r3 = virtualinvoke $r2.<com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi doGetLog(java.lang.Class)>(r0);

        goto label2;

     label1:
        $r4 = new com.amazonaws.log.InternalLog;

        $r3 = $r4;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<com.amazonaws.log.InternalLog: void <init>(java.lang.String)>($r1);

     label2:
        return $r3;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>
Abstract method
Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>
Related methods: 21
caller is : <com.amazon.redshift.plugin.AzureCredentialsProvider: java.lang.String azureOauthBasedAuthentication()>
callee is : <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>

Method: <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>
    public static com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)
    {
        java.lang.Object $r1;
        com.fasterxml.jackson.databind.JsonNode $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.amazonaws.util.json.Jackson: java.lang.Object fromJsonString(java.lang.String,java.lang.Class)>(r0, class "Lcom/fasterxml/jackson/databind/JsonNode;");

        $r2 = (com.fasterxml.jackson.databind.JsonNode) $r1;

        return $r2;
    }

Method: <com.amazonaws.util.json.Jackson: void <clinit>()>
    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ObjectWriter $r8, $r10;
        com.fasterxml.jackson.databind.ObjectMapper $r2, $r4, $r6, $r7, $r9;
        com.fasterxml.jackson.databind.DeserializationFeature $r5;
        com.amazonaws.util.json.Jackson$1 $r11;
        com.fasterxml.jackson.core.JsonParser$Feature $r3;
        com.amazonaws.util.json.Jackson[] $r0;
        com.amazonaws.log.InternalLogApi $r1;

        $r0 = newarray (com.amazonaws.util.json.Jackson)[0];

        <com.amazonaws.util.json.Jackson: com.amazonaws.util.json.Jackson[] $VALUES> = $r0;

        $r1 = staticinvoke <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>(class "Lcom/amazonaws/util/json/Jackson;");

        <com.amazonaws.util.json.Jackson: com.amazonaws.log.InternalLogApi log> = $r1;

        $r2 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper> = $r2;

        $r4 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>($r3, 1);

        $r6 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r5 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES>;

        virtualinvoke $r6.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)>($r5, 0);

        $r7 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r8 = virtualinvoke $r7.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writer()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter writer> = $r8;

        $r9 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r10 = virtualinvoke $r9.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter prettyWriter> = $r10;

        $r11 = new com.amazonaws.util.json.Jackson$1;

        specialinvoke $r11.<com.amazonaws.util.json.Jackson$1: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.core.type.TypeReference STRING_MAP_TYPEREFERENCE> = $r11;

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.amazonaws.log.JulLogFactory: void <init>()>
    public void <init>()
    {
        com.amazonaws.log.JulLogFactory r0;

        r0 := @this: com.amazonaws.log.JulLogFactory;

        specialinvoke r0.<com.amazonaws.log.InternalLogFactory: void <init>()>();

        return;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>
Abstract method
Method: <com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
Abstract method
Method: <com.amazonaws.util.json.Jackson$1: void <init>()>
    void <init>()
    {
        com.amazonaws.util.json.Jackson$1 r0;

        r0 := @this: com.amazonaws.util.json.Jackson$1;

        specialinvoke r0.<com.fasterxml.jackson.core.type.TypeReference: void <init>()>();

        return;
    }

Method: <com.fasterxml.jackson.core.type.TypeReference: void <init>()>
Abstract method
Method: <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>
    public static com.amazonaws.log.InternalLogApi getLog(java.lang.Class)
    {
        com.amazonaws.log.InternalLogFactory $r2;
        java.lang.Class r0;
        java.lang.String $r1;
        com.amazonaws.log.InternalLog $r4;
        boolean $z0;
        com.amazonaws.log.InternalLogApi $r3;

        r0 := @parameter0: java.lang.Class;

        $z0 = <com.amazonaws.log.InternalLogFactory: boolean factoryConfigured>;

        if $z0 == 0 goto label1;

        $r2 = <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory>;

        $r3 = virtualinvoke $r2.<com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi doGetLog(java.lang.Class)>(r0);

        goto label2;

     label1:
        $r4 = new com.amazonaws.log.InternalLog;

        $r3 = $r4;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<com.amazonaws.log.InternalLog: void <init>(java.lang.String)>($r1);

     label2:
        return $r3;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.amazonaws.log.InternalLog: void <init>(java.lang.String)>
    void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.log.InternalLog r0;

        r0 := @this: com.amazonaws.log.InternalLog;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.log.InternalLog: java.lang.String name> = r1;

        return;
    }

Method: <com.amazonaws.util.json.Jackson: java.lang.Object fromJsonString(java.lang.String,java.lang.Class)>
    public static java.lang.Object fromJsonString(java.lang.String, java.lang.Class)
    {
        com.amazonaws.SdkClientException $r5;
        com.fasterxml.jackson.databind.ObjectMapper $r2;
        java.lang.Class r1;
        java.lang.Object $r3;
        java.lang.String r0;
        java.lang.Exception $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>(r0, r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.amazonaws.SdkClientException;

        specialinvoke $r5.<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to parse Json String.", $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.json.Jackson: void <clinit>()>
    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ObjectWriter $r8, $r10;
        com.fasterxml.jackson.databind.ObjectMapper $r2, $r4, $r6, $r7, $r9;
        com.fasterxml.jackson.databind.DeserializationFeature $r5;
        com.amazonaws.util.json.Jackson$1 $r11;
        com.fasterxml.jackson.core.JsonParser$Feature $r3;
        com.amazonaws.util.json.Jackson[] $r0;
        com.amazonaws.log.InternalLogApi $r1;

        $r0 = newarray (com.amazonaws.util.json.Jackson)[0];

        <com.amazonaws.util.json.Jackson: com.amazonaws.util.json.Jackson[] $VALUES> = $r0;

        $r1 = staticinvoke <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>(class "Lcom/amazonaws/util/json/Jackson;");

        <com.amazonaws.util.json.Jackson: com.amazonaws.log.InternalLogApi log> = $r1;

        $r2 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper> = $r2;

        $r4 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>($r3, 1);

        $r6 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r5 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES>;

        virtualinvoke $r6.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)>($r5, 0);

        $r7 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r8 = virtualinvoke $r7.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writer()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter writer> = $r8;

        $r9 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r10 = virtualinvoke $r9.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter prettyWriter> = $r10;

        $r11 = new com.amazonaws.util.json.Jackson$1;

        specialinvoke $r11.<com.amazonaws.util.json.Jackson$1: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.core.type.TypeReference STRING_MAP_TYPEREFERENCE> = $r11;

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>
Abstract method
Method: <com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
Abstract method
Method: <com.amazonaws.util.json.Jackson$1: void <init>()>
    void <init>()
    {
        com.amazonaws.util.json.Jackson$1 r0;

        r0 := @this: com.amazonaws.util.json.Jackson$1;

        specialinvoke r0.<com.fasterxml.jackson.core.type.TypeReference: void <init>()>();

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>
    public static com.amazonaws.log.InternalLogApi getLog(java.lang.Class)
    {
        com.amazonaws.log.InternalLogFactory $r2;
        java.lang.Class r0;
        java.lang.String $r1;
        com.amazonaws.log.InternalLog $r4;
        boolean $z0;
        com.amazonaws.log.InternalLogApi $r3;

        r0 := @parameter0: java.lang.Class;

        $z0 = <com.amazonaws.log.InternalLogFactory: boolean factoryConfigured>;

        if $z0 == 0 goto label1;

        $r2 = <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory>;

        $r3 = virtualinvoke $r2.<com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi doGetLog(java.lang.Class)>(r0);

        goto label2;

     label1:
        $r4 = new com.amazonaws.log.InternalLog;

        $r3 = $r4;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<com.amazonaws.log.InternalLog: void <init>(java.lang.String)>($r1);

     label2:
        return $r3;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>
Abstract method
Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>
Related methods: 21
caller is : <com.amazon.redshift.plugin.BrowserAzureOAuth2CredentialsProvider: java.lang.String extractJwtAssertion(java.lang.String)>
callee is : <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>

Method: <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)>
    public static com.fasterxml.jackson.databind.JsonNode jsonNodeOf(java.lang.String)
    {
        java.lang.Object $r1;
        com.fasterxml.jackson.databind.JsonNode $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.amazonaws.util.json.Jackson: java.lang.Object fromJsonString(java.lang.String,java.lang.Class)>(r0, class "Lcom/fasterxml/jackson/databind/JsonNode;");

        $r2 = (com.fasterxml.jackson.databind.JsonNode) $r1;

        return $r2;
    }

Method: <com.amazonaws.util.json.Jackson: void <clinit>()>
    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ObjectWriter $r8, $r10;
        com.fasterxml.jackson.databind.ObjectMapper $r2, $r4, $r6, $r7, $r9;
        com.fasterxml.jackson.databind.DeserializationFeature $r5;
        com.amazonaws.util.json.Jackson$1 $r11;
        com.fasterxml.jackson.core.JsonParser$Feature $r3;
        com.amazonaws.util.json.Jackson[] $r0;
        com.amazonaws.log.InternalLogApi $r1;

        $r0 = newarray (com.amazonaws.util.json.Jackson)[0];

        <com.amazonaws.util.json.Jackson: com.amazonaws.util.json.Jackson[] $VALUES> = $r0;

        $r1 = staticinvoke <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>(class "Lcom/amazonaws/util/json/Jackson;");

        <com.amazonaws.util.json.Jackson: com.amazonaws.log.InternalLogApi log> = $r1;

        $r2 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper> = $r2;

        $r4 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>($r3, 1);

        $r6 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r5 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES>;

        virtualinvoke $r6.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)>($r5, 0);

        $r7 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r8 = virtualinvoke $r7.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writer()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter writer> = $r8;

        $r9 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r10 = virtualinvoke $r9.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter prettyWriter> = $r10;

        $r11 = new com.amazonaws.util.json.Jackson$1;

        specialinvoke $r11.<com.amazonaws.util.json.Jackson$1: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.core.type.TypeReference STRING_MAP_TYPEREFERENCE> = $r11;

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.amazonaws.log.JulLogFactory: void <init>()>
    public void <init>()
    {
        com.amazonaws.log.JulLogFactory r0;

        r0 := @this: com.amazonaws.log.JulLogFactory;

        specialinvoke r0.<com.amazonaws.log.InternalLogFactory: void <init>()>();

        return;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>
Abstract method
Method: <com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
Abstract method
Method: <com.amazonaws.util.json.Jackson$1: void <init>()>
    void <init>()
    {
        com.amazonaws.util.json.Jackson$1 r0;

        r0 := @this: com.amazonaws.util.json.Jackson$1;

        specialinvoke r0.<com.fasterxml.jackson.core.type.TypeReference: void <init>()>();

        return;
    }

Method: <com.fasterxml.jackson.core.type.TypeReference: void <init>()>
Abstract method
Method: <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>
    public static com.amazonaws.log.InternalLogApi getLog(java.lang.Class)
    {
        com.amazonaws.log.InternalLogFactory $r2;
        java.lang.Class r0;
        java.lang.String $r1;
        com.amazonaws.log.InternalLog $r4;
        boolean $z0;
        com.amazonaws.log.InternalLogApi $r3;

        r0 := @parameter0: java.lang.Class;

        $z0 = <com.amazonaws.log.InternalLogFactory: boolean factoryConfigured>;

        if $z0 == 0 goto label1;

        $r2 = <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory>;

        $r3 = virtualinvoke $r2.<com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi doGetLog(java.lang.Class)>(r0);

        goto label2;

     label1:
        $r4 = new com.amazonaws.log.InternalLog;

        $r3 = $r4;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<com.amazonaws.log.InternalLog: void <init>(java.lang.String)>($r1);

     label2:
        return $r3;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.amazonaws.log.InternalLog: void <init>(java.lang.String)>
    void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.log.InternalLog r0;

        r0 := @this: com.amazonaws.log.InternalLog;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.log.InternalLog: java.lang.String name> = r1;

        return;
    }

Method: <com.amazonaws.util.json.Jackson: java.lang.Object fromJsonString(java.lang.String,java.lang.Class)>
    public static java.lang.Object fromJsonString(java.lang.String, java.lang.Class)
    {
        com.amazonaws.SdkClientException $r5;
        com.fasterxml.jackson.databind.ObjectMapper $r2;
        java.lang.Class r1;
        java.lang.Object $r3;
        java.lang.String r0;
        java.lang.Exception $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>(r0, r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.amazonaws.SdkClientException;

        specialinvoke $r5.<com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to parse Json String.", $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

Method: <com.amazonaws.util.json.Jackson: void <clinit>()>
    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ObjectWriter $r8, $r10;
        com.fasterxml.jackson.databind.ObjectMapper $r2, $r4, $r6, $r7, $r9;
        com.fasterxml.jackson.databind.DeserializationFeature $r5;
        com.amazonaws.util.json.Jackson$1 $r11;
        com.fasterxml.jackson.core.JsonParser$Feature $r3;
        com.amazonaws.util.json.Jackson[] $r0;
        com.amazonaws.log.InternalLogApi $r1;

        $r0 = newarray (com.amazonaws.util.json.Jackson)[0];

        <com.amazonaws.util.json.Jackson: com.amazonaws.util.json.Jackson[] $VALUES> = $r0;

        $r1 = staticinvoke <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>(class "Lcom/amazonaws/util/json/Jackson;");

        <com.amazonaws.util.json.Jackson: com.amazonaws.log.InternalLogApi log> = $r1;

        $r2 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper> = $r2;

        $r4 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>($r3, 1);

        $r6 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r5 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES>;

        virtualinvoke $r6.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)>($r5, 0);

        $r7 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r8 = virtualinvoke $r7.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writer()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter writer> = $r8;

        $r9 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r10 = virtualinvoke $r9.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter prettyWriter> = $r10;

        $r11 = new com.amazonaws.util.json.Jackson$1;

        specialinvoke $r11.<com.amazonaws.util.json.Jackson$1: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.core.type.TypeReference STRING_MAP_TYPEREFERENCE> = $r11;

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.log.JulLogFactory $r0;

        $r0 = new com.amazonaws.log.JulLogFactory;

        specialinvoke $r0.<com.amazonaws.log.JulLogFactory: void <init>()>();

        <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory> = $r0;

        return;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>
Abstract method
Method: <com.fasterxml.jackson.databind.ObjectMapper: void <init>()>
Abstract method
Method: <com.amazonaws.util.json.Jackson$1: void <init>()>
    void <init>()
    {
        com.amazonaws.util.json.Jackson$1 r0;

        r0 := @this: com.amazonaws.util.json.Jackson$1;

        specialinvoke r0.<com.fasterxml.jackson.core.type.TypeReference: void <init>()>();

        return;
    }

Method: <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>
    public static com.amazonaws.log.InternalLogApi getLog(java.lang.Class)
    {
        com.amazonaws.log.InternalLogFactory $r2;
        java.lang.Class r0;
        java.lang.String $r1;
        com.amazonaws.log.InternalLog $r4;
        boolean $z0;
        com.amazonaws.log.InternalLogApi $r3;

        r0 := @parameter0: java.lang.Class;

        $z0 = <com.amazonaws.log.InternalLogFactory: boolean factoryConfigured>;

        if $z0 == 0 goto label1;

        $r2 = <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogFactory factory>;

        $r3 = virtualinvoke $r2.<com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi doGetLog(java.lang.Class)>(r0);

        goto label2;

     label1:
        $r4 = new com.amazonaws.log.InternalLog;

        $r3 = $r4;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<com.amazonaws.log.InternalLog: void <init>(java.lang.String)>($r1);

     label2:
        return $r3;
    }

Method: <com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>
Abstract method
Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)>
Related methods: 2
caller is : <org.modeshape.jcr.value.binary.S3BinaryStore: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
callee is : <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)>

Method: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        com.amazonaws.auth.BasicAWSCredentials r0;
        java.lang.String r1, r2;

        r0 := @this: com.amazonaws.auth.BasicAWSCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null, null);

        return;
    }

Method: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.amazonaws.auth.BasicAWSCredentials r0;
        java.lang.String r1, r2, r3, r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: com.amazonaws.auth.BasicAWSCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Access key cannot be null.");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Secret key cannot be null.");

        throw $r5;

     label2:
        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String accessKey> = r1;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String secretKey> = r2;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String accountId> = r3;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String providerName> = r4;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)>
Related methods: 2
caller is : <com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
callee is : <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)>

Method: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        com.amazonaws.auth.BasicAWSCredentials r0;
        java.lang.String r1, r2;

        r0 := @this: com.amazonaws.auth.BasicAWSCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null, null);

        return;
    }

Method: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.amazonaws.auth.BasicAWSCredentials r0;
        java.lang.String r1, r2, r3, r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: com.amazonaws.auth.BasicAWSCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Access key cannot be null.");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Secret key cannot be null.");

        throw $r5;

     label2:
        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String accessKey> = r1;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String secretKey> = r2;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String accountId> = r3;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String providerName> = r4;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)>
Related methods: 2
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)>

Method: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        com.amazonaws.auth.BasicAWSCredentials r0;
        java.lang.String r1, r2;

        r0 := @this: com.amazonaws.auth.BasicAWSCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null, null);

        return;
    }

Method: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.amazonaws.auth.BasicAWSCredentials r0;
        java.lang.String r1, r2, r3, r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: com.amazonaws.auth.BasicAWSCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Access key cannot be null.");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Secret key cannot be null.");

        throw $r5;

     label2:
        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String accessKey> = r1;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String secretKey> = r2;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String accountId> = r3;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String providerName> = r4;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
callee is : <com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)>

Method: <com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration r0;

        r0 := @this: com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: java.lang.String serviceEndpoint> = r1;

        r0.<com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: java.lang.String signingRegion> = r2;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: com.amazonaws.client.builder.AwsClientBuilder setBuilderConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazonaws.client.builder.AwsClientBuilder)>
callee is : <com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)>

Method: <com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration r0;

        r0 := @this: com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: java.lang.String serviceEndpoint> = r1;

        r0.<com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: java.lang.String signingRegion> = r2;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.services.securitytoken.AWSSecurityTokenService buildSts(java.lang.String,java.lang.String,com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder,com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)>

Method: <com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: void <init>(java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration r0;

        r0 := @this: com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: java.lang.String serviceEndpoint> = r1;

        r0.<com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration: java.lang.String signingRegion> = r2;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.services.s3.model.ObjectMetadata: void setContentType(java.lang.String)>
Related methods: 1
caller is : <org.modeshape.jcr.value.binary.S3BinaryStore: org.modeshape.jcr.value.BinaryValue storeValue(java.io.InputStream,boolean)>
callee is : <com.amazonaws.services.s3.model.ObjectMetadata: void setContentType(java.lang.String)>

Method: <com.amazonaws.services.s3.model.ObjectMetadata: void setContentType(java.lang.String)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.s3.model.CopyObjectRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
Related methods: 1
caller is : <org.modeshape.jcr.value.binary.S3BinaryStore: void storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String)>
callee is : <com.amazonaws.services.s3.model.CopyObjectRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>

Method: <com.amazonaws.services.s3.model.CopyObjectRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.s3.model.CopyObjectRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
Related methods: 1
caller is : <org.modeshape.jcr.value.binary.S3BinaryStore: void setS3ObjectUserProperty(org.modeshape.jcr.value.BinaryKey,java.lang.String,java.lang.String)>
callee is : <com.amazonaws.services.s3.model.CopyObjectRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>

Method: <com.amazonaws.services.s3.model.CopyObjectRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.s3.model.CopyObjectRequest: void setNewObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata)>
Related methods: 1
caller is : <org.modeshape.jcr.value.binary.S3BinaryStore: void storeMimeType(org.modeshape.jcr.value.BinaryValue,java.lang.String)>
callee is : <com.amazonaws.services.s3.model.CopyObjectRequest: void setNewObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata)>

Method: <com.amazonaws.services.s3.model.CopyObjectRequest: void setNewObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.s3.model.CopyObjectRequest: void setNewObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata)>
Related methods: 1
caller is : <org.modeshape.jcr.value.binary.S3BinaryStore: void setS3ObjectUserProperty(org.modeshape.jcr.value.BinaryKey,java.lang.String,java.lang.String)>
callee is : <com.amazonaws.services.s3.model.CopyObjectRequest: void setNewObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata)>

Method: <com.amazonaws.services.s3.model.CopyObjectRequest: void setNewObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.s3.model.ObjectMetadata: void setUserMetadata(java.util.Map)>
Related methods: 1
caller is : <org.modeshape.jcr.value.binary.S3BinaryStore: org.modeshape.jcr.value.BinaryValue storeValue(java.io.InputStream,boolean)>
callee is : <com.amazonaws.services.s3.model.ObjectMetadata: void setUserMetadata(java.util.Map)>

Method: <com.amazonaws.services.s3.model.ObjectMetadata: void setUserMetadata(java.util.Map)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder standard()>
Related methods: 1
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
callee is : <com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder standard()>

Method: <com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder standard()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder standard()>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder standard()>

Method: <com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder: com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder standard()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: com.amazonaws.services.redshift.AmazonRedshiftClientBuilder standard()>
Related methods: 1
caller is : <com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
callee is : <com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: com.amazonaws.services.redshift.AmazonRedshiftClientBuilder standard()>

Method: <com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: com.amazonaws.services.redshift.AmazonRedshiftClientBuilder standard()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: com.amazonaws.services.redshift.AmazonRedshiftClientBuilder standard()>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void setClusterCredentials(com.amazonaws.auth.AWSCredentialsProvider,com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean,int)>
callee is : <com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: com.amazonaws.services.redshift.AmazonRedshiftClientBuilder standard()>

Method: <com.amazonaws.services.redshift.AmazonRedshiftClientBuilder: com.amazonaws.services.redshift.AmazonRedshiftClientBuilder standard()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshift.model.DescribeClustersRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.services.redshift.model.DescribeClustersRequest: void <init>()>

Method: <com.amazonaws.services.redshift.model.DescribeClustersRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshift.model.DescribeClustersRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void callDescribeClustersAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.services.redshift.model.DescribeClustersRequest: void <init>()>

Method: <com.amazonaws.services.redshift.model.DescribeClustersRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: void <init>()>

Method: <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: void <init>()>

Method: <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: java.lang.String getCustomDomainName()>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV2(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshiftClient,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: java.lang.String getCustomDomainName()>

Method: <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: java.lang.String getCustomDomainName()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: java.lang.String getCustomDomainName()>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: void callDescribeCustomDomainNameAssociationsAPIForV1(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazonaws.services.redshift.AmazonRedshift,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: java.lang.String getCustomDomainName()>

Method: <com.amazonaws.services.redshift.model.DescribeCustomDomainAssociationsRequest: java.lang.String getCustomDomainName()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.s3.AmazonS3Client: void <init>(com.amazonaws.auth.AWSCredentials)>
Related methods: 1
caller is : <org.modeshape.jcr.value.binary.S3BinaryStore: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
callee is : <com.amazonaws.services.s3.AmazonS3Client: void <init>(com.amazonaws.auth.AWSCredentials)>

Method: <com.amazonaws.services.s3.AmazonS3Client: void <init>(com.amazonaws.auth.AWSCredentials)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.s3.model.ObjectMetadata: void <init>()>
Related methods: 1
caller is : <org.modeshape.jcr.value.binary.S3BinaryStore: org.modeshape.jcr.value.BinaryValue storeValue(java.io.InputStream,boolean)>
callee is : <com.amazonaws.services.s3.model.ObjectMetadata: void <init>()>

Method: <com.amazonaws.services.s3.model.ObjectMetadata: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.s3.iterable.S3Objects: com.amazonaws.services.s3.iterable.S3Objects inBucket(com.amazonaws.services.s3.AmazonS3,java.lang.String)>
Related methods: 1
caller is : <org.modeshape.jcr.value.binary.S3BinaryStore: java.lang.Iterable getAllBinaryKeys()>
callee is : <com.amazonaws.services.s3.iterable.S3Objects: com.amazonaws.services.s3.iterable.S3Objects inBucket(com.amazonaws.services.s3.AmazonS3,java.lang.String)>

Method: <com.amazonaws.services.s3.iterable.S3Objects: com.amazonaws.services.s3.iterable.S3Objects inBucket(com.amazonaws.services.s3.AmazonS3,java.lang.String)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClientBuilder: com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClientBuilder standard()>
Related methods: 1
caller is : <com.amazon.redshift.core.ServerlessIamHelper: void <init>(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,com.amazonaws.auth.AWSCredentialsProvider)>
callee is : <com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClientBuilder: com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClientBuilder standard()>

Method: <com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClientBuilder: com.amazonaws.services.redshiftserverless.AWSRedshiftServerlessClientBuilder standard()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshiftserverless.model.GetWorkgroupRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.core.ServerlessIamHelper: void describeConfiguration(com.amazon.redshift.core.RedshiftJDBCSettings)>
callee is : <com.amazonaws.services.redshiftserverless.model.GetWorkgroupRequest: void <init>()>

Method: <com.amazonaws.services.redshiftserverless.model.GetWorkgroupRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshiftserverless.model.GetCredentialsRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.core.ServerlessIamHelper: void getCredentialsResult(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.core.IamHelper$CredentialProviderType,boolean)>
callee is : <com.amazonaws.services.redshiftserverless.model.GetCredentialsRequest: void <init>()>

Method: <com.amazonaws.services.redshiftserverless.model.GetCredentialsRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.ProcessCredentialsProvider$Builder builder()>
Related methods: 3
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.ProcessCredentialsProvider$Builder builder()>

Method: <com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.ProcessCredentialsProvider$Builder builder()>
    public static com.amazonaws.auth.ProcessCredentialsProvider$Builder builder()
    {
        com.amazonaws.auth.ProcessCredentialsProvider$Builder $r0;

        $r0 = new com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        specialinvoke $r0.<com.amazonaws.auth.ProcessCredentialsProvider$Builder: void <init>(com.amazonaws.auth.ProcessCredentialsProvider$1)>(null);

        return $r0;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider$Builder: void <init>(com.amazonaws.auth.ProcessCredentialsProvider$1)>
    void <init>(com.amazonaws.auth.ProcessCredentialsProvider$1)
    {
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r0;
        com.amazonaws.auth.ProcessCredentialsProvider$1 r1;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        r1 := @parameter0: com.amazonaws.auth.ProcessCredentialsProvider$1;

        specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider$Builder: void <init>()>();

        return;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider$Builder: void <init>()>
    private void <init>()
    {
        java.util.concurrent.TimeUnit $r1;
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r0;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.auth.ProcessCredentialsProvider$Builder: int expirationBufferValue> = 15;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        r0.<com.amazonaws.auth.ProcessCredentialsProvider$Builder: java.util.concurrent.TimeUnit expirationBufferUnit> = $r1;

        r0.<com.amazonaws.auth.ProcessCredentialsProvider$Builder: long processOutputLimit> = 64000L;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.ProcessCredentialsProvider$Builder: com.amazonaws.auth.ProcessCredentialsProvider$Builder withCommand(java.lang.String)>
Related methods: 2
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.auth.ProcessCredentialsProvider$Builder: com.amazonaws.auth.ProcessCredentialsProvider$Builder withCommand(java.lang.String)>

Method: <com.amazonaws.auth.ProcessCredentialsProvider$Builder: com.amazonaws.auth.ProcessCredentialsProvider$Builder withCommand(java.lang.String)>
    public com.amazonaws.auth.ProcessCredentialsProvider$Builder withCommand(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r0;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider$Builder: void setCommand(java.lang.String)>(r1);

        return r0;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider$Builder: void setCommand(java.lang.String)>
    private void setCommand(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r0;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<com.amazonaws.auth.ProcessCredentialsProvider$Builder: java.lang.String command> = r1;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.ProcessCredentialsProvider$Builder: com.amazonaws.auth.ProcessCredentialsProvider build()>
Related methods: 12
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.auth.ProcessCredentialsProvider$Builder: com.amazonaws.auth.ProcessCredentialsProvider build()>

Method: <com.amazonaws.auth.ProcessCredentialsProvider$Builder: com.amazonaws.auth.ProcessCredentialsProvider build()>
    public com.amazonaws.auth.ProcessCredentialsProvider build()
    {
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r1;
        com.amazonaws.auth.ProcessCredentialsProvider $r0;

        r1 := @this: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        $r0 = new com.amazonaws.auth.ProcessCredentialsProvider;

        specialinvoke $r0.<com.amazonaws.auth.ProcessCredentialsProvider: void <init>(com.amazonaws.auth.ProcessCredentialsProvider$Builder,com.amazonaws.auth.ProcessCredentialsProvider$1)>(r1, null);

        return $r0;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: void <init>(com.amazonaws.auth.ProcessCredentialsProvider$Builder,com.amazonaws.auth.ProcessCredentialsProvider$1)>
    void <init>(com.amazonaws.auth.ProcessCredentialsProvider$Builder, com.amazonaws.auth.ProcessCredentialsProvider$1)
    {
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r1;
        com.amazonaws.auth.ProcessCredentialsProvider r0;
        com.amazonaws.auth.ProcessCredentialsProvider$1 r2;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        r1 := @parameter0: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        r2 := @parameter1: com.amazonaws.auth.ProcessCredentialsProvider$1;

        specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: void <init>(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>(r1);

        return;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: void <init>(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>
    private void <init>(com.amazonaws.auth.ProcessCredentialsProvider$Builder)
    {
        long $l0, $l1;
        java.lang.Integer $r8, $r10;
        java.lang.Long $r5, $r7;
        int $i2, $i3;
        java.lang.String $r14;
        org.joda.time.DateTime $r2;
        java.util.concurrent.TimeUnit $r11, $r13;
        java.util.List $r4;
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r3;
        com.amazonaws.auth.ProcessCredentialsProvider r0;
        java.lang.Object $r1, $r6, $r9, $r12;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        r3 := @parameter0: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.lang.Object credentialLock> = $r1;

        r0.<com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials> = null;

        $r2 = staticinvoke <org.joda.time.DateTime: org.joda.time.DateTime now()>();

        r0.<com.amazonaws.auth.ProcessCredentialsProvider: org.joda.time.DateTime credentialExpirationTime> = $r2;

        $r4 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.util.List executableCommand(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>(r3);

        r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.util.List command> = $r4;

        $l0 = staticinvoke <com.amazonaws.auth.ProcessCredentialsProvider$Builder: long access$000(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>(r3);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>($r5, "processOutputLimit");

        $r7 = (java.lang.Long) $r6;

        $l1 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        r0.<com.amazonaws.auth.ProcessCredentialsProvider: long processOutputLimit> = $l1;

        $i2 = staticinvoke <com.amazonaws.auth.ProcessCredentialsProvider$Builder: int access$100(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>(r3);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r9 = staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>($r8, "expirationBufferValue");

        $r10 = (java.lang.Integer) $r9;

        $i3 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        r0.<com.amazonaws.auth.ProcessCredentialsProvider: int expirationBufferValue> = $i3;

        $r11 = staticinvoke <com.amazonaws.auth.ProcessCredentialsProvider$Builder: java.util.concurrent.TimeUnit access$200(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>(r3);

        $r12 = staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>($r11, "expirationBufferUnit");

        $r13 = (java.util.concurrent.TimeUnit) $r12;

        r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.util.concurrent.TimeUnit expirationBufferUnit> = $r13;

        $r14 = staticinvoke <com.amazonaws.auth.ProcessCredentialsProvider$Builder: java.lang.String access$300(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>(r3);

        r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String staticAccountId> = $r14;

        return;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: java.util.List executableCommand(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>
    private java.util.List executableCommand(com.amazonaws.auth.ProcessCredentialsProvider$Builder)
    {
        java.util.ArrayList $r2;
        java.util.List $r1, $r5, $r7, $r8;
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r0;
        com.amazonaws.auth.ProcessCredentialsProvider r9;
        java.lang.Object $r4;
        java.lang.String $r3, $r6;
        boolean $z0;

        r9 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        r0 := @parameter0: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        $r1 = staticinvoke <com.amazonaws.auth.ProcessCredentialsProvider$Builder: java.util.List access$400(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>(r0);

        if $r1 == null goto label1;

        $r7 = staticinvoke <com.amazonaws.auth.ProcessCredentialsProvider$Builder: java.util.List access$400(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>(r0);

        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r7);

        return $r8;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $z0 = staticinvoke <com.amazonaws.util.Platform: boolean isWindows()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("cmd.exe");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("/C");

        goto label3;

     label2:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("sh");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("-c");

     label3:
        $r3 = staticinvoke <com.amazonaws.auth.ProcessCredentialsProvider$Builder: java.lang.String access$500(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>(r0);

        $r4 = staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>($r3, "command");

        $r6 = (java.lang.String) $r4;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r5;
    }

Method: <org.joda.time.DateTime: org.joda.time.DateTime now()>
Abstract method
Method: <com.amazonaws.auth.ProcessCredentialsProvider$Builder: long access$000(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>
    static long access$000(com.amazonaws.auth.ProcessCredentialsProvider$Builder)
    {
        long $l0;
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r0;

        r0 := @parameter0: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        $l0 = r0.<com.amazonaws.auth.ProcessCredentialsProvider$Builder: long processOutputLimit>;

        return $l0;
    }

Method: <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>
    public static java.lang.Object assertNotNull(java.lang.Object, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r2;
        java.lang.Object r0;
        java.lang.String r3, $r4;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s cannot be null", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        return r0;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider$Builder: int access$100(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>
    static int access$100(com.amazonaws.auth.ProcessCredentialsProvider$Builder)
    {
        int $i0;
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r0;

        r0 := @parameter0: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        $i0 = r0.<com.amazonaws.auth.ProcessCredentialsProvider$Builder: int expirationBufferValue>;

        return $i0;
    }

Method: <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>
    public static java.lang.Object assertNotNull(java.lang.Object, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r2;
        java.lang.Object r0;
        java.lang.String r3, $r4;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s cannot be null", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        return r0;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider$Builder: java.util.concurrent.TimeUnit access$200(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>
    static java.util.concurrent.TimeUnit access$200(com.amazonaws.auth.ProcessCredentialsProvider$Builder)
    {
        java.util.concurrent.TimeUnit $r1;
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r0;

        r0 := @parameter0: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        $r1 = r0.<com.amazonaws.auth.ProcessCredentialsProvider$Builder: java.util.concurrent.TimeUnit expirationBufferUnit>;

        return $r1;
    }

Method: <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>
    public static java.lang.Object assertNotNull(java.lang.Object, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r2;
        java.lang.Object r0;
        java.lang.String r3, $r4;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s cannot be null", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        return r0;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider$Builder: java.lang.String access$300(com.amazonaws.auth.ProcessCredentialsProvider$Builder)>
    static java.lang.String access$300(com.amazonaws.auth.ProcessCredentialsProvider$Builder)
    {
        java.lang.String $r1;
        com.amazonaws.auth.ProcessCredentialsProvider$Builder r0;

        r0 := @parameter0: com.amazonaws.auth.ProcessCredentialsProvider$Builder;

        $r1 = r0.<com.amazonaws.auth.ProcessCredentialsProvider$Builder: java.lang.String staticAccountId>;

        return $r1;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()>
Related methods: 26
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()>

Method: <com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()>
    public com.amazonaws.auth.AWSCredentials getCredentials()
    {
        java.lang.Throwable $r3;
        com.amazonaws.auth.ProcessCredentialsProvider r0;
        java.lang.Object $r2;
        com.amazonaws.auth.AWSCredentials $r1;
        boolean $z0, $z1;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        $z0 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: boolean credentialsNeedUpdating()>();

        if $z0 == 0 goto label6;

        $r2 = r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.lang.Object credentialLock>;

        entermonitor $r2;

     label1:
        $z1 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: boolean credentialsNeedUpdating()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: void refresh()>();

     label2:
        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        $r1 = r0.<com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials>;

        return $r1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: boolean credentialsNeedUpdating()>
    private boolean credentialsNeedUpdating()
    {
        com.amazonaws.auth.ProcessCredentialsProvider r0;
        org.joda.time.DateTime $r2;
        com.amazonaws.auth.AWSCredentials $r1;
        boolean $z0, $z1;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        $r1 = r0.<com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials>;

        if $r1 == null goto label1;

        $r2 = r0.<com.amazonaws.auth.ProcessCredentialsProvider: org.joda.time.DateTime credentialExpirationTime>;

        $z0 = virtualinvoke $r2.<org.joda.time.DateTime: boolean isBeforeNow()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: void refresh()>
    public void refresh()
    {
        java.lang.Throwable $r7;
        java.lang.IllegalStateException $r6, $r9;
        org.joda.time.DateTime $r4;
        java.lang.Exception $r5;
        com.amazonaws.auth.ProcessCredentialsProvider r0;
        java.lang.Thread $r8;
        com.fasterxml.jackson.databind.JsonNode $r2;
        java.lang.String $r1;
        com.amazonaws.auth.AWSCredentials $r3;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

     label1:
        $r1 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String executeCommand()>();

        $r2 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: com.fasterxml.jackson.databind.JsonNode parseProcessOutput(java.lang.String)>($r1);

        $r3 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials(com.fasterxml.jackson.databind.JsonNode)>($r2);

        $r4 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: org.joda.time.DateTime credentialExpirationTime(com.fasterxml.jackson.databind.JsonNode)>($r2);

        r0.<com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials> = $r3;

        r0.<com.amazonaws.auth.ProcessCredentialsProvider: org.joda.time.DateTime credentialExpirationTime> = $r4;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void interrupt()>();

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Process-based credential refreshing has been interrupted.", $r7);

        throw $r9;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to refresh process-based credentials.", $r5);

        throw $r6;

     label5:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: org.joda.time.DateTime credentialExpirationTime(com.fasterxml.jackson.databind.JsonNode)>
    private org.joda.time.DateTime credentialExpirationTime(com.fasterxml.jackson.databind.JsonNode)
    {
        java.util.Date $r6;
        org.joda.time.DateTime $r3, $r4, $r5, $r8;
        long $l1, $l2;
        java.util.concurrent.TimeUnit $r7;
        com.amazonaws.auth.ProcessCredentialsProvider r0;
        int $i0;
        com.fasterxml.jackson.databind.JsonNode r1;
        java.lang.String $r2;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        r1 := @parameter0: com.fasterxml.jackson.databind.JsonNode;

        $r2 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String getText(com.fasterxml.jackson.databind.JsonNode,java.lang.String)>(r1, "Expiration");

        if $r2 == null goto label1;

        $r5 = new org.joda.time.DateTime;

        $r6 = staticinvoke <com.amazonaws.util.DateUtils: java.util.Date parseISO8601Date(java.lang.String)>($r2);

        specialinvoke $r5.<org.joda.time.DateTime: void <init>(java.lang.Object)>($r6);

        $r7 = r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.util.concurrent.TimeUnit expirationBufferUnit>;

        $i0 = r0.<com.amazonaws.auth.ProcessCredentialsProvider: int expirationBufferValue>;

        $l1 = (long) $i0;

        $l2 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toMillis(long)>($l1);

        $r8 = virtualinvoke $r5.<org.joda.time.DateTime: org.joda.time.DateTime minus(long)>($l2);

        return $r8;

     label1:
        $r3 = staticinvoke <org.joda.time.DateTime: org.joda.time.DateTime now()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DateTime: org.joda.time.DateTime plusYears(int)>(9999);

        return $r4;
    }

Method: <com.amazonaws.util.DateUtils: void <clinit>()>
    static void <clinit>()
    {
        org.joda.time.DateTimeZone $r2, $r5, $r15, $r18, $r21;
        java.util.Locale $r13;
        org.joda.time.format.DateTimeFormatter $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r14, $r16, $r17, $r19;
        org.joda.time.tz.FixedDateTimeZone $r20;
        java.util.List $r11;
        org.joda.time.format.DateTimeFormatter[] $r8;

        $r20 = new org.joda.time.tz.FixedDateTimeZone;

        specialinvoke $r20.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>("GMT", "GMT", 0, 0);

        $r21 = (org.joda.time.DateTimeZone) $r20;

        <com.amazonaws.util.DateUtils: org.joda.time.DateTimeZone GMT> = $r21;

        $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>();

        $r2 = <com.amazonaws.util.DateUtils: org.joda.time.DateTimeZone GMT>;

        $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>($r2);

        <com.amazonaws.util.DateUtils: org.joda.time.format.DateTimeFormatter iso8601DateFormat> = $r3;

        $r4 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss\'Z\'");

        $r5 = <com.amazonaws.util.DateUtils: org.joda.time.DateTimeZone GMT>;

        $r6 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>($r5);

        <com.amazonaws.util.DateUtils: org.joda.time.format.DateTimeFormatter alternateIso8601DateFormat> = $r6;

        $r7 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ssZZ");

        <com.amazonaws.util.DateUtils: org.joda.time.format.DateTimeFormatter ISO8601_DATE_FORMAT_WITH_OFFSET> = $r7;

        $r8 = newarray (org.joda.time.format.DateTimeFormatter)[2];

        $r9 = <com.amazonaws.util.DateUtils: org.joda.time.format.DateTimeFormatter alternateIso8601DateFormat>;

        $r8[0] = $r9;

        $r10 = <com.amazonaws.util.DateUtils: org.joda.time.format.DateTimeFormatter ISO8601_DATE_FORMAT_WITH_OFFSET>;

        $r8[1] = $r10;

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        <com.amazonaws.util.DateUtils: java.util.List ALTERNATE_ISO8601_FORMATTERS> = $r11;

        $r12 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("EEE, dd MMM yyyy HH:mm:ss \'GMT\'");

        $r13 = <java.util.Locale: java.util.Locale US>;

        $r14 = virtualinvoke $r12.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>($r13);

        $r15 = <com.amazonaws.util.DateUtils: org.joda.time.DateTimeZone GMT>;

        $r16 = virtualinvoke $r14.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>($r15);

        <com.amazonaws.util.DateUtils: org.joda.time.format.DateTimeFormatter rfc822DateFormat> = $r16;

        $r17 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyyMMdd\'T\'HHmmss\'Z\'");

        $r18 = <com.amazonaws.util.DateUtils: org.joda.time.DateTimeZone GMT>;

        $r19 = virtualinvoke $r17.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>($r18);

        <com.amazonaws.util.DateUtils: org.joda.time.format.DateTimeFormatter compressedIso8601DateFormat> = $r19;

        return;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String getText(com.fasterxml.jackson.databind.JsonNode,java.lang.String)>
    private java.lang.String getText(com.fasterxml.jackson.databind.JsonNode, java.lang.String)
    {
        java.lang.IllegalStateException $r4;
        com.amazonaws.auth.ProcessCredentialsProvider r11;
        com.fasterxml.jackson.databind.JsonNode r0, $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;
        java.lang.String r1, $r3, $r10;
        boolean $z0;
        com.fasterxml.jackson.databind.node.JsonNodeType $r8;

        r11 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        r0 := @parameter0: com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: boolean isTextual()>();

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from credential process should be textual, but was ");

        $r8 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>();

        return $r3;
    }

Method: <org.joda.time.DateTime: void <init>(java.lang.Object)>
Abstract method
Method: <com.amazonaws.util.DateUtils: java.util.Date parseISO8601Date(java.lang.String)>
    public static java.util.Date parseISO8601Date(java.lang.String)
    {
        java.util.Date $r1;
        java.lang.String r0;
        java.lang.RuntimeException $r2, $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <com.amazonaws.util.DateUtils: java.util.Date doParseISO8601Date(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = staticinvoke <com.amazonaws.util.DateUtils: java.lang.RuntimeException handleException(java.lang.RuntimeException)>($r2);

        throw $r3;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

Method: <org.joda.time.DateTime: org.joda.time.DateTime now()>
Abstract method
Method: <com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials(com.fasterxml.jackson.databind.JsonNode)>
    private com.amazonaws.auth.AWSCredentials credentials(com.fasterxml.jackson.databind.JsonNode)
    {
        com.amazonaws.auth.BasicAWSCredentials $r6;
        com.amazonaws.auth.BasicSessionCredentials $r7;
        com.amazonaws.auth.ProcessCredentialsProvider r0;
        com.fasterxml.jackson.databind.JsonNode r1;
        java.lang.String $r2, $r3, $r4, $r5, $r8;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        r1 := @parameter0: com.fasterxml.jackson.databind.JsonNode;

        $r2 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String getText(com.fasterxml.jackson.databind.JsonNode,java.lang.String)>(r1, "AccessKeyId");

        $r3 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String getText(com.fasterxml.jackson.databind.JsonNode,java.lang.String)>(r1, "SecretAccessKey");

        $r4 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String getText(com.fasterxml.jackson.databind.JsonNode,java.lang.String)>(r1, "SessionToken");

        $r5 = specialinvoke r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String getText(com.fasterxml.jackson.databind.JsonNode,java.lang.String)>(r1, "AccountId");

        if $r5 != null goto label1;

        $r8 = r0.<com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String staticAccountId>;

        goto label2;

     label1:
        $r8 = $r5;

     label2:
        staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.String assertStringNotEmpty(java.lang.String,java.lang.String)>($r2, "AccessKeyId");

        staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.String assertStringNotEmpty(java.lang.String,java.lang.String)>($r3, "SecretAccessKey");

        if $r4 == null goto label3;

        $r7 = new com.amazonaws.auth.BasicSessionCredentials;

        specialinvoke $r7.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4, $r8, "ProcessCredentialsProvider");

        return $r7;

     label3:
        $r6 = new com.amazonaws.auth.BasicAWSCredentials;

        specialinvoke $r6.<com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r8, "ProcessCredentialsProvider");

        return $r6;
    }

Method: <com.amazonaws.util.ValidationUtils: java.lang.String assertStringNotEmpty(java.lang.String,java.lang.String)>
    public static java.lang.String assertStringNotEmpty(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r3;
        java.lang.String r0, r1, $r4;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>(r0, r1);

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s cannot be empty", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        return r0;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String getText(com.fasterxml.jackson.databind.JsonNode,java.lang.String)>
    private java.lang.String getText(com.fasterxml.jackson.databind.JsonNode, java.lang.String)
    {
        java.lang.IllegalStateException $r4;
        com.amazonaws.auth.ProcessCredentialsProvider r11;
        com.fasterxml.jackson.databind.JsonNode r0, $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;
        java.lang.String r1, $r3, $r10;
        boolean $z0;
        com.fasterxml.jackson.databind.node.JsonNodeType $r8;

        r11 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        r0 := @parameter0: com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: boolean isTextual()>();

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from credential process should be textual, but was ");

        $r8 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>();

        return $r3;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String getText(com.fasterxml.jackson.databind.JsonNode,java.lang.String)>
    private java.lang.String getText(com.fasterxml.jackson.databind.JsonNode, java.lang.String)
    {
        java.lang.IllegalStateException $r4;
        com.amazonaws.auth.ProcessCredentialsProvider r11;
        com.fasterxml.jackson.databind.JsonNode r0, $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;
        java.lang.String r1, $r3, $r10;
        boolean $z0;
        com.fasterxml.jackson.databind.node.JsonNodeType $r8;

        r11 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        r0 := @parameter0: com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: boolean isTextual()>();

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from credential process should be textual, but was ");

        $r8 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>();

        return $r3;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String getText(com.fasterxml.jackson.databind.JsonNode,java.lang.String)>
    private java.lang.String getText(com.fasterxml.jackson.databind.JsonNode, java.lang.String)
    {
        java.lang.IllegalStateException $r4;
        com.amazonaws.auth.ProcessCredentialsProvider r11;
        com.fasterxml.jackson.databind.JsonNode r0, $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;
        java.lang.String r1, $r3, $r10;
        boolean $z0;
        com.fasterxml.jackson.databind.node.JsonNodeType $r8;

        r11 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        r0 := @parameter0: com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: boolean isTextual()>();

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from credential process should be textual, but was ");

        $r8 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>();

        return $r3;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String getText(com.fasterxml.jackson.databind.JsonNode,java.lang.String)>
    private java.lang.String getText(com.fasterxml.jackson.databind.JsonNode, java.lang.String)
    {
        java.lang.IllegalStateException $r4;
        com.amazonaws.auth.ProcessCredentialsProvider r11;
        com.fasterxml.jackson.databind.JsonNode r0, $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;
        java.lang.String r1, $r3, $r10;
        boolean $z0;
        com.fasterxml.jackson.databind.node.JsonNodeType $r8;

        r11 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        r0 := @parameter0: com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: boolean isTextual()>();

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from credential process should be textual, but was ");

        $r8 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>();

        return $r3;
    }

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3, r4, r5;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsAccessKey> = r1;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsSecretKey> = r2;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String sessionToken> = r3;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String accountId> = r4;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String providerName> = r5;

        return;
    }

Method: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.amazonaws.auth.BasicAWSCredentials r0;
        java.lang.String r1, r2, r3, r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: com.amazonaws.auth.BasicAWSCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Access key cannot be null.");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Secret key cannot be null.");

        throw $r5;

     label2:
        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String accessKey> = r1;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String secretKey> = r2;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String accountId> = r3;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String providerName> = r4;

        return;
    }

Method: <com.amazonaws.util.ValidationUtils: java.lang.String assertStringNotEmpty(java.lang.String,java.lang.String)>
    public static java.lang.String assertStringNotEmpty(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r3;
        java.lang.String r0, r1, $r4;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.amazonaws.util.ValidationUtils: java.lang.Object assertNotNull(java.lang.Object,java.lang.String)>(r0, r1);

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s cannot be empty", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        return r0;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: com.fasterxml.jackson.databind.JsonNode parseProcessOutput(java.lang.String)>
    private com.fasterxml.jackson.databind.JsonNode parseProcessOutput(java.lang.String)
    {
        java.lang.IllegalStateException $r4, $r6;
        com.amazonaws.auth.ProcessCredentialsProvider r5;
        int $i0;
        java.lang.Object $r1;
        com.fasterxml.jackson.databind.JsonNode r2, $r3;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String r0, $r10;
        boolean $z0, $z1;

        r5 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.amazonaws.util.json.Jackson: java.lang.Object fromSensitiveJsonString(java.lang.String,java.lang.Class)>(r0, class "Lcom/fasterxml/jackson/databind/JsonNode;");

        r2 = (com.fasterxml.jackson.databind.JsonNode) $r1;

        $z0 = virtualinvoke r2.<com.fasterxml.jackson.databind.JsonNode: boolean isObject()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Process did not return a JSON object.");

        throw $r4;

     label1:
        $r3 = virtualinvoke r2.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>("Version");

        if $r3 == null goto label2;

        $z1 = virtualinvoke $r3.<com.fasterxml.jackson.databind.JsonNode: boolean isInt()>();

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke $r3.<com.fasterxml.jackson.databind.JsonNode: int asInt()>();

        if $i0 == 1 goto label3;

     label2:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported credential version: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        return r2;
    }

Method: <com.amazonaws.util.json.Jackson: void <clinit>()>
    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ObjectWriter $r8, $r10;
        com.fasterxml.jackson.databind.ObjectMapper $r2, $r4, $r6, $r7, $r9;
        com.fasterxml.jackson.databind.DeserializationFeature $r5;
        com.amazonaws.util.json.Jackson$1 $r11;
        com.fasterxml.jackson.core.JsonParser$Feature $r3;
        com.amazonaws.util.json.Jackson[] $r0;
        com.amazonaws.log.InternalLogApi $r1;

        $r0 = newarray (com.amazonaws.util.json.Jackson)[0];

        <com.amazonaws.util.json.Jackson: com.amazonaws.util.json.Jackson[] $VALUES> = $r0;

        $r1 = staticinvoke <com.amazonaws.log.InternalLogFactory: com.amazonaws.log.InternalLogApi getLog(java.lang.Class)>(class "Lcom/amazonaws/util/json/Jackson;");

        <com.amazonaws.util.json.Jackson: com.amazonaws.log.InternalLogApi log> = $r1;

        $r2 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper> = $r2;

        $r4 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>($r3, 1);

        $r6 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r5 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES>;

        virtualinvoke $r6.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)>($r5, 0);

        $r7 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r8 = virtualinvoke $r7.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writer()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter writer> = $r8;

        $r9 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r10 = virtualinvoke $r9.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectWriter writerWithDefaultPrettyPrinter()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectWriter prettyWriter> = $r10;

        $r11 = new com.amazonaws.util.json.Jackson$1;

        specialinvoke $r11.<com.amazonaws.util.json.Jackson$1: void <init>()>();

        <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.core.type.TypeReference STRING_MAP_TYPEREFERENCE> = $r11;

        return;
    }

Method: <com.amazonaws.util.json.Jackson: java.lang.Object fromSensitiveJsonString(java.lang.String,java.lang.Class)>
    public static java.lang.Object fromSensitiveJsonString(java.lang.String, java.lang.Class)
    {
        java.lang.Throwable $r4;
        com.amazonaws.SdkClientException $r6;
        com.fasterxml.jackson.databind.ObjectMapper $r2;
        java.lang.Class r1;
        java.lang.Object $r3;
        java.lang.String r0;
        com.amazonaws.log.InternalLogApi $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = <com.amazonaws.util.json.Jackson: com.fasterxml.jackson.databind.ObjectMapper objectMapper>;

        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>(r0, r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.amazonaws.util.json.Jackson: com.amazonaws.log.InternalLogApi log>;

        interfaceinvoke $r5.<com.amazonaws.log.InternalLogApi: void debug(java.lang.Object,java.lang.Throwable)>("Failed to parse JSON string.", $r4);

        $r6 = new com.amazonaws.SdkClientException;

        specialinvoke $r6.<com.amazonaws.SdkClientException: void <init>(java.lang.String)>("Unable to parse Json string. See debug-level logs for the exact error details, which may include sensitive information.");

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: java.lang.String executeCommand()>
    private java.lang.String executeCommand() throws java.io.IOException, java.lang.InterruptedException
    {
        java.lang.Throwable $r14;
        byte[] $r7;
        java.lang.IllegalStateException $r9;
        java.io.ByteArrayOutputStream $r3;
        long $l0;
        java.nio.charset.Charset $r8;
        int $i1, $i2;
        java.lang.ProcessBuilder $r0;
        java.lang.String $r6, $r13;
        java.lang.Process $r4;
        java.util.List $r2;
        com.amazonaws.auth.ProcessCredentialsProvider r1;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.io.InputStream $r5;

        r1 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        $r0 = new java.lang.ProcessBuilder;

        $r2 = r1.<com.amazonaws.auth.ProcessCredentialsProvider: java.util.List command>;

        specialinvoke $r0.<java.lang.ProcessBuilder: void <init>(java.util.List)>($r2);

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = virtualinvoke $r0.<java.lang.ProcessBuilder: java.lang.Process start()>();

     label1:
        $r5 = virtualinvoke $r4.<java.lang.Process: java.io.InputStream getInputStream()>();

        $l0 = r1.<com.amazonaws.auth.ProcessCredentialsProvider: long processOutputLimit>;

        staticinvoke <com.amazonaws.util.IOUtils: long copy(java.io.InputStream,java.io.OutputStream,long)>($r5, $r3, $l0);

        virtualinvoke $r4.<java.lang.Process: int waitFor()>();

        $i1 = virtualinvoke $r4.<java.lang.Process: int exitValue()>();

        if $i1 == 0 goto label2;

        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command returned non-zero exit value: ");

        $i2 = virtualinvoke $r4.<java.lang.Process: int exitValue()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label2:
        $r6 = new java.lang.String;

        $r7 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r8 = <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8>;

        specialinvoke $r6.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r7, $r8);

     label3:
        virtualinvoke $r4.<java.lang.Process: void destroy()>();

        return $r6;

     label4:
        $r14 := @caughtexception;

     label5:
        virtualinvoke $r4.<java.lang.Process: void destroy()>();

        throw $r14;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <com.amazonaws.util.StringUtils: void <clinit>()>
    static void <clinit>()
    {
        java.nio.charset.Charset $r0;
        java.util.Locale $r1;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8> = $r0;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        <com.amazonaws.util.StringUtils: java.util.Locale LOCALE_ENGLISH> = $r1;

        return;
    }

Method: <com.amazonaws.util.IOUtils: long copy(java.io.InputStream,java.io.OutputStream,long)>
    public static long copy(java.io.InputStream, java.io.OutputStream, long) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        long $l1, l2, l4;
        java.io.IOException $r9;
        byte $b3;
        int $i0, $i6, $i7;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        l2 := @parameter2: long;

        r0 = newarray (byte)[4096];

        l4 = 0L;

     label1:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        $i6 = (int) -1;

        if $i0 <= $i6 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        $l1 = (long) $i0;

        l4 = l4 + $l1;

        $b3 = l4 cmp l2;

        $i7 = (int) $b3;

        if $i7 < 0 goto label1;

        $r9 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read limit exceeded: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label2:
        return l4;
    }

Method: <com.amazonaws.auth.ProcessCredentialsProvider: boolean credentialsNeedUpdating()>
    private boolean credentialsNeedUpdating()
    {
        com.amazonaws.auth.ProcessCredentialsProvider r0;
        org.joda.time.DateTime $r2;
        com.amazonaws.auth.AWSCredentials $r1;
        boolean $z0, $z1;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        $r1 = r0.<com.amazonaws.auth.ProcessCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials>;

        if $r1 == null goto label1;

        $r2 = r0.<com.amazonaws.auth.ProcessCredentialsProvider: org.joda.time.DateTime credentialExpirationTime>;

        $z0 = virtualinvoke $r2.<org.joda.time.DateTime: boolean isBeforeNow()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.ProcessCredentialsProvider: org.joda.time.DateTime getCredentialExpirationTime()>
Related methods: 1
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.auth.ProcessCredentialsProvider: org.joda.time.DateTime getCredentialExpirationTime()>

Method: <com.amazonaws.auth.ProcessCredentialsProvider: org.joda.time.DateTime getCredentialExpirationTime()>
    public org.joda.time.DateTime getCredentialExpirationTime()
    {
        org.joda.time.DateTime $r1;
        com.amazonaws.auth.ProcessCredentialsProvider r0;

        r0 := @this: com.amazonaws.auth.ProcessCredentialsProvider;

        $r1 = r0.<com.amazonaws.auth.ProcessCredentialsProvider: org.joda.time.DateTime credentialExpirationTime>;

        return $r1;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: void <init>(com.amazonaws.auth.profile.internal.BasicProfile)>
Related methods: 16
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: void <init>(com.amazonaws.auth.profile.internal.BasicProfile)>

Method: <com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: void <init>(com.amazonaws.auth.profile.internal.BasicProfile)>
    public void <init>(com.amazonaws.auth.profile.internal.BasicProfile)
    {
        com.amazonaws.auth.profile.internal.BasicProfile r1;
        com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider r0;
        com.amazonaws.auth.AWSCredentials $r3;
        com.amazonaws.internal.StaticCredentialsProvider $r2;

        r0 := @this: com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider;

        r1 := @parameter0: com.amazonaws.auth.profile.internal.BasicProfile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile> = r1;

        $r2 = new com.amazonaws.internal.StaticCredentialsProvider;

        $r3 = specialinvoke r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.AWSCredentials fromStaticCredentials()>();

        specialinvoke $r2.<com.amazonaws.internal.StaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>($r3);

        r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.AWSCredentialsProvider credentialsProvider> = $r2;

        return;
    }

Method: <com.amazonaws.internal.StaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>
    public void <init>(com.amazonaws.auth.AWSCredentials)
    {
        com.amazonaws.auth.AWSCredentials r1;
        com.amazonaws.internal.StaticCredentialsProvider r0;

        r0 := @this: com.amazonaws.internal.StaticCredentialsProvider;

        r1 := @parameter0: com.amazonaws.auth.AWSCredentials;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.internal.StaticCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials> = r1;

        return;
    }

Method: <com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.AWSCredentials fromStaticCredentials()>
    private com.amazonaws.auth.AWSCredentials fromStaticCredentials()
    {
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r19, $r31, $r36;
        com.amazonaws.auth.BasicSessionCredentials $r9;
        com.amazonaws.auth.profile.internal.BasicProfile $r1, $r3, $r5, $r7, $r10, $r12, $r14, $r16, $r20, $r24, $r26, $r28, $r32, $r37;
        java.lang.String $r2, $r4, $r6, $r8, $r11, $r13, $r15, $r17, $r21, $r22, $r25, $r27, $r29, $r33, $r34, $r38, $r39;
        com.amazonaws.auth.BasicAWSCredentials $r23;
        com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider r0;
        com.amazonaws.SdkClientException $r18, $r30, $r35;

        r0 := @this: com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider;

        $r1 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r2 = virtualinvoke $r1.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsAccessIdKey()>();

        $z0 = staticinvoke <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r35 = new com.amazonaws.SdkClientException;

        $r36 = newarray (java.lang.Object)[1];

        $r37 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r38 = virtualinvoke $r37.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getProfileName()>();

        $r36[0] = $r38;

        $r39 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to load credentials into profile [%s]: AWS Access Key ID is not specified.", $r36);

        specialinvoke $r35.<com.amazonaws.SdkClientException: void <init>(java.lang.String)>($r39);

        throw $r35;

     label1:
        $r3 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r4 = virtualinvoke $r3.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsSecretAccessKey()>();

        $z1 = staticinvoke <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>($r4);

        if $z1 == 0 goto label2;

        $r30 = new com.amazonaws.SdkClientException;

        $r31 = newarray (java.lang.Object)[1];

        $r32 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r33 = virtualinvoke $r32.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsSecretAccessKey()>();

        $r31[0] = $r33;

        $r34 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to load credentials into profile [%s]: AWS Secret Access Key is not specified.", $r31);

        specialinvoke $r30.<com.amazonaws.SdkClientException: void <init>(java.lang.String)>($r34);

        throw $r30;

     label2:
        $r5 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r6 = virtualinvoke $r5.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsSessionToken()>();

        if $r6 != null goto label3;

        $r23 = new com.amazonaws.auth.BasicAWSCredentials;

        $r24 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r25 = virtualinvoke $r24.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsAccessIdKey()>();

        $r26 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r27 = virtualinvoke $r26.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsSecretAccessKey()>();

        $r28 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r29 = virtualinvoke $r28.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsAccountId()>();

        specialinvoke $r23.<com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r25, $r27, $r29);

        return $r23;

     label3:
        $r7 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r8 = virtualinvoke $r7.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsSessionToken()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label4;

        $r18 = new com.amazonaws.SdkClientException;

        $r19 = newarray (java.lang.Object)[1];

        $r20 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r21 = virtualinvoke $r20.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getProfileName()>();

        $r19[0] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to load credentials into profile [%s]: AWS Session Token is empty.", $r19);

        specialinvoke $r18.<com.amazonaws.SdkClientException: void <init>(java.lang.String)>($r22);

        throw $r18;

     label4:
        $r9 = new com.amazonaws.auth.BasicSessionCredentials;

        $r10 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r11 = virtualinvoke $r10.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsAccessIdKey()>();

        $r12 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r13 = virtualinvoke $r12.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsSecretAccessKey()>();

        $r14 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r15 = virtualinvoke $r14.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsSessionToken()>();

        $r16 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.profile.internal.BasicProfile profile>;

        $r17 = virtualinvoke $r16.<com.amazonaws.auth.profile.internal.BasicProfile: java.lang.String getAwsAccountId()>();

        specialinvoke $r9.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r11, $r13, $r15, $r17);

        return $r9;
    }

Method: <com.amazonaws.util.StringUtils: void <clinit>()>
    static void <clinit>()
    {
        java.nio.charset.Charset $r0;
        java.util.Locale $r1;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8> = $r0;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        <com.amazonaws.util.StringUtils: java.util.Locale LOCALE_ENGLISH> = $r1;

        return;
    }

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        com.amazonaws.auth.BasicAWSCredentials r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.amazonaws.auth.BasicAWSCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, null);

        return;
    }

Method: <com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.amazonaws.auth.BasicAWSCredentials r0;
        java.lang.String r1, r2, r3, r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: com.amazonaws.auth.BasicAWSCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Access key cannot be null.");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Secret key cannot be null.");

        throw $r5;

     label2:
        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String accessKey> = r1;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String secretKey> = r2;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String accountId> = r3;

        r0.<com.amazonaws.auth.BasicAWSCredentials: java.lang.String providerName> = r4;

        return;
    }

Method: <com.amazonaws.SdkClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        com.amazonaws.SdkClientException r0;
        java.lang.String r1;

        r0 := @this: com.amazonaws.SdkClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.AmazonClientException: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.AmazonClientException r0;

        r0 := @this: com.amazonaws.AmazonClientException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.SdkBaseException: void <init>(java.lang.String)>(r1);

        return;
    }

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3, r4;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, null);

        return;
    }

Method: <com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3, r4, r5;
        com.amazonaws.auth.BasicSessionCredentials r0;

        r0 := @this: com.amazonaws.auth.BasicSessionCredentials;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsAccessKey> = r1;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String awsSecretKey> = r2;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String sessionToken> = r3;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String accountId> = r4;

        r0.<com.amazonaws.auth.BasicSessionCredentials: java.lang.String providerName> = r5;

        return;
    }

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()>
Related methods: 2
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder getCredentials(java.lang.String)>
callee is : <com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()>

Method: <com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()>
    public com.amazonaws.auth.AWSCredentials getCredentials()
    {
        com.amazonaws.auth.AWSCredentialsProvider $r1;
        com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider r0;
        com.amazonaws.auth.AWSCredentials $r2;

        r0 := @this: com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider;

        $r1 = r0.<com.amazonaws.auth.profile.internal.ProfileStaticCredentialsProvider: com.amazonaws.auth.AWSCredentialsProvider credentialsProvider>;

        $r2 = interfaceinvoke $r1.<com.amazonaws.auth.AWSCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()>();

        return $r2;
    }

Method: <com.amazonaws.internal.StaticCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()>
    public com.amazonaws.auth.AWSCredentials getCredentials()
    {
        com.amazonaws.auth.AWSCredentials $r1;
        com.amazonaws.internal.StaticCredentialsProvider r0;

        r0 := @this: com.amazonaws.internal.StaticCredentialsProvider;

        $r1 = r0.<com.amazonaws.internal.StaticCredentialsProvider: com.amazonaws.auth.AWSCredentials credentials>;

        return $r1;
    }

-----------
Method to be analyzed: <com.amazonaws.services.securitytoken.model.AssumeRoleRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.core.PluginProfilesConfigFile: com.amazon.redshift.CredentialsHolder assumeRole(com.amazonaws.auth.profile.internal.BasicProfile,com.amazonaws.auth.AWSCredentialsProvider)>
callee is : <com.amazonaws.services.securitytoken.model.AssumeRoleRequest: void <init>()>

Method: <com.amazonaws.services.securitytoken.model.AssumeRoleRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshift.model.DescribeAuthenticationProfilesRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.core.IdpAuthHelper: com.amazon.redshift.util.RedshiftProperties readAuthProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.amazon.redshift.logger.RedshiftLogger,com.amazon.redshift.util.RedshiftProperties)>
callee is : <com.amazonaws.services.redshift.model.DescribeAuthenticationProfilesRequest: void <init>()>

Method: <com.amazonaws.services.redshift.model.DescribeAuthenticationProfilesRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>(com.amazonaws.auth.profile.ProfilesConfigFile,java.lang.String)>
Related methods: 13
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>(com.amazonaws.auth.profile.ProfilesConfigFile,java.lang.String)>

Method: <com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>(com.amazonaws.auth.profile.ProfilesConfigFile,java.lang.String)>
    public void <init>(com.amazonaws.auth.profile.ProfilesConfigFile, java.lang.String)
    {
        java.util.concurrent.Semaphore $r1;
        long $l0;
        java.lang.String r4, $r6;
        com.amazonaws.auth.profile.ProfilesConfigFile r2, $r3;
        com.amazonaws.auth.profile.internal.AwsProfileNameLoader $r5;
        com.amazonaws.auth.profile.ProfileCredentialsProvider r0;

        r0 := @this: com.amazonaws.auth.profile.ProfileCredentialsProvider;

        r2 := @parameter0: com.amazonaws.auth.profile.ProfilesConfigFile;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.Semaphore;

        specialinvoke $r1.<java.util.concurrent.Semaphore: void <init>(int)>(1);

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: java.util.concurrent.Semaphore refreshSemaphore> = $r1;

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: long refreshIntervalNanos> = 300000000000L;

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: long refreshForceIntervalNanos> = 600000000000L;

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: com.amazonaws.auth.profile.ProfilesConfigFile profilesConfigFile> = r2;

        $r3 = r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: com.amazonaws.auth.profile.ProfilesConfigFile profilesConfigFile>;

        if $r3 == null goto label1;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: long lastRefreshed> = $l0;

     label1:
        if r4 != null goto label2;

        $r5 = <com.amazonaws.auth.profile.internal.AwsProfileNameLoader: com.amazonaws.auth.profile.internal.AwsProfileNameLoader INSTANCE>;

        $r6 = virtualinvoke $r5.<com.amazonaws.auth.profile.internal.AwsProfileNameLoader: java.lang.String loadProfileName()>();

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: java.lang.String profileName> = $r6;

        goto label3;

     label2:
        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: java.lang.String profileName> = r4;

     label3:
        return;
    }

Method: <com.amazonaws.auth.profile.internal.AwsProfileNameLoader: java.lang.String loadProfileName()>
    public final java.lang.String loadProfileName()
    {
        java.lang.String $r1, $r2;
        com.amazonaws.auth.profile.internal.AwsProfileNameLoader r0;
        boolean $z0, $z1;

        r0 := @this: com.amazonaws.auth.profile.internal.AwsProfileNameLoader;

        $r1 = specialinvoke r0.<com.amazonaws.auth.profile.internal.AwsProfileNameLoader: java.lang.String getEnvProfileName()>();

        $z0 = staticinvoke <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        return $r1;

     label1:
        $r2 = specialinvoke r0.<com.amazonaws.auth.profile.internal.AwsProfileNameLoader: java.lang.String getSysPropertyProfileName()>();

        $z1 = staticinvoke <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>($r2);

        if $z1 != 0 goto label2;

        return $r2;

     label2:
        return "default";
    }

Method: <com.amazonaws.util.StringUtils: void <clinit>()>
    static void <clinit>()
    {
        java.nio.charset.Charset $r0;
        java.util.Locale $r1;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8> = $r0;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        <com.amazonaws.util.StringUtils: java.util.Locale LOCALE_ENGLISH> = $r1;

        return;
    }

Method: <com.amazonaws.auth.profile.internal.AwsProfileNameLoader: java.lang.String getSysPropertyProfileName()>
    private java.lang.String getSysPropertyProfileName()
    {
        java.lang.String $r0, $r1;
        com.amazonaws.auth.profile.internal.AwsProfileNameLoader r2;

        r2 := @this: com.amazonaws.auth.profile.internal.AwsProfileNameLoader;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("aws.profile");

        $r1 = staticinvoke <com.amazonaws.util.StringUtils: java.lang.String trim(java.lang.String)>($r0);

        return $r1;
    }

Method: <com.amazonaws.util.StringUtils: void <clinit>()>
    static void <clinit>()
    {
        java.nio.charset.Charset $r0;
        java.util.Locale $r1;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8> = $r0;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        <com.amazonaws.util.StringUtils: java.util.Locale LOCALE_ENGLISH> = $r1;

        return;
    }

Method: <com.amazonaws.util.StringUtils: java.lang.String trim(java.lang.String)>
    public static java.lang.String trim(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        return $r1;
    }

Method: <com.amazonaws.auth.profile.internal.AwsProfileNameLoader: java.lang.String getEnvProfileName()>
    private java.lang.String getEnvProfileName()
    {
        java.lang.String $r0, $r1;
        com.amazonaws.auth.profile.internal.AwsProfileNameLoader r2;

        r2 := @this: com.amazonaws.auth.profile.internal.AwsProfileNameLoader;

        $r0 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("AWS_PROFILE");

        $r1 = staticinvoke <com.amazonaws.util.StringUtils: java.lang.String trim(java.lang.String)>($r0);

        return $r1;
    }

Method: <com.amazonaws.util.StringUtils: void <clinit>()>
    static void <clinit>()
    {
        java.nio.charset.Charset $r0;
        java.util.Locale $r1;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8> = $r0;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        <com.amazonaws.util.StringUtils: java.util.Locale LOCALE_ENGLISH> = $r1;

        return;
    }

Method: <com.amazonaws.util.StringUtils: java.lang.String trim(java.lang.String)>
    public static java.lang.String trim(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        return $r1;
    }

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.amazonaws.util.StringUtils: boolean isNullOrEmpty(java.lang.String)>
    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.amazonaws.auth.profile.internal.AwsProfileNameLoader: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.auth.profile.internal.AwsProfileNameLoader $r0;

        $r0 = new com.amazonaws.auth.profile.internal.AwsProfileNameLoader;

        specialinvoke $r0.<com.amazonaws.auth.profile.internal.AwsProfileNameLoader: void <init>()>();

        <com.amazonaws.auth.profile.internal.AwsProfileNameLoader: com.amazonaws.auth.profile.internal.AwsProfileNameLoader INSTANCE> = $r0;

        return;
    }

Method: <com.amazonaws.auth.profile.internal.AwsProfileNameLoader: void <init>()>
    private void <init>()
    {
        com.amazonaws.auth.profile.internal.AwsProfileNameLoader r0;

        r0 := @this: com.amazonaws.auth.profile.internal.AwsProfileNameLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.DefaultAWSCredentialsProviderChain: void <init>()>
Related methods: 27
caller is : <com.amazon.redshift.core.IamHelper: void setIAMCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,com.amazon.redshift.logger.RedshiftLogger,java.lang.String)>
callee is : <com.amazonaws.auth.DefaultAWSCredentialsProviderChain: void <init>()>

Method: <com.amazonaws.auth.DefaultAWSCredentialsProviderChain: void <init>()>
    public void <init>()
    {
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider $r4;
        com.amazonaws.auth.DefaultAWSCredentialsProviderChain r0;
        com.amazonaws.auth.EnvironmentVariableCredentialsProvider $r2;
        com.amazonaws.auth.SystemPropertiesCredentialsProvider $r3;
        com.amazonaws.auth.AWSCredentialsProvider[] $r1;
        com.amazonaws.auth.profile.ProfileCredentialsProvider $r5;
        com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper $r6;

        r0 := @this: com.amazonaws.auth.DefaultAWSCredentialsProviderChain;

        $r1 = newarray (com.amazonaws.auth.AWSCredentialsProvider)[5];

        $r2 = new com.amazonaws.auth.EnvironmentVariableCredentialsProvider;

        specialinvoke $r2.<com.amazonaws.auth.EnvironmentVariableCredentialsProvider: void <init>()>();

        $r1[0] = $r2;

        $r3 = new com.amazonaws.auth.SystemPropertiesCredentialsProvider;

        specialinvoke $r3.<com.amazonaws.auth.SystemPropertiesCredentialsProvider: void <init>()>();

        $r1[1] = $r3;

        $r4 = staticinvoke <com.amazonaws.auth.WebIdentityTokenCredentialsProvider: com.amazonaws.auth.WebIdentityTokenCredentialsProvider create()>();

        $r1[2] = $r4;

        $r5 = new com.amazonaws.auth.profile.ProfileCredentialsProvider;

        specialinvoke $r5.<com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>()>();

        $r1[3] = $r5;

        $r6 = new com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper;

        specialinvoke $r6.<com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: void <init>()>();

        $r1[4] = $r6;

        specialinvoke r0.<com.amazonaws.auth.AWSCredentialsProviderChain: void <init>(com.amazonaws.auth.AWSCredentialsProvider[])>($r1);

        return;
    }

Method: <com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/auth/EC2ContainerCredentialsProviderWrapper;");

        <com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
Method: <com.amazonaws.auth.AWSCredentialsProviderChain: void <init>(com.amazonaws.auth.AWSCredentialsProvider[])>
    public transient void <init>(com.amazonaws.auth.AWSCredentialsProvider[])
    {
        com.amazonaws.auth.AWSCredentialsProviderChain r0;
        java.lang.IllegalArgumentException $r3;
        com.amazonaws.auth.AWSCredentialsProvider[] r2;
        java.util.List $r5;
        int $i0, i1, i2;
        com.amazonaws.auth.AWSCredentialsProvider r4;
        java.util.LinkedList $r1;

        r0 := @this: com.amazonaws.auth.AWSCredentialsProviderChain;

        r2 := @parameter0: com.amazonaws.auth.AWSCredentialsProvider[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.amazonaws.auth.AWSCredentialsProviderChain: java.util.List credentialsProviders> = $r1;

        r0.<com.amazonaws.auth.AWSCredentialsProviderChain: boolean reuseLastProvider> = 1;

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No credential providers specified");

        throw $r3;

     label2:
        i1 = lengthof r2;

        i2 = 0;

     label3:
        if i2 >= i1 goto label4;

        r4 = r2[i2];

        $r5 = r0.<com.amazonaws.auth.AWSCredentialsProviderChain: java.util.List credentialsProviders>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

Method: <com.amazonaws.auth.EnvironmentVariableCredentialsProvider: void <init>()>
    public void <init>()
    {
        com.amazonaws.auth.EnvironmentVariableCredentialsProvider r0;

        r0 := @this: com.amazonaws.auth.EnvironmentVariableCredentialsProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.amazonaws.auth.SystemPropertiesCredentialsProvider: void <init>()>
    public void <init>()
    {
        com.amazonaws.auth.SystemPropertiesCredentialsProvider r0;

        r0 := @this: com.amazonaws.auth.SystemPropertiesCredentialsProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>()>
    public void <init>()
    {
        com.amazonaws.auth.profile.ProfileCredentialsProvider r0;

        r0 := @this: com.amazonaws.auth.profile.ProfileCredentialsProvider;

        specialinvoke r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>(java.lang.String)>(null);

        return;
    }

Method: <com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.auth.profile.ProfileCredentialsProvider r0;

        r0 := @this: com.amazonaws.auth.profile.ProfileCredentialsProvider;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>(com.amazonaws.auth.profile.ProfilesConfigFile,java.lang.String)>(null, r1);

        return;
    }

Method: <com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>(com.amazonaws.auth.profile.ProfilesConfigFile,java.lang.String)>
    public void <init>(com.amazonaws.auth.profile.ProfilesConfigFile, java.lang.String)
    {
        java.util.concurrent.Semaphore $r1;
        long $l0;
        java.lang.String r4, $r6;
        com.amazonaws.auth.profile.ProfilesConfigFile r2, $r3;
        com.amazonaws.auth.profile.internal.AwsProfileNameLoader $r5;
        com.amazonaws.auth.profile.ProfileCredentialsProvider r0;

        r0 := @this: com.amazonaws.auth.profile.ProfileCredentialsProvider;

        r2 := @parameter0: com.amazonaws.auth.profile.ProfilesConfigFile;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.Semaphore;

        specialinvoke $r1.<java.util.concurrent.Semaphore: void <init>(int)>(1);

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: java.util.concurrent.Semaphore refreshSemaphore> = $r1;

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: long refreshIntervalNanos> = 300000000000L;

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: long refreshForceIntervalNanos> = 600000000000L;

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: com.amazonaws.auth.profile.ProfilesConfigFile profilesConfigFile> = r2;

        $r3 = r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: com.amazonaws.auth.profile.ProfilesConfigFile profilesConfigFile>;

        if $r3 == null goto label1;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: long lastRefreshed> = $l0;

     label1:
        if r4 != null goto label2;

        $r5 = <com.amazonaws.auth.profile.internal.AwsProfileNameLoader: com.amazonaws.auth.profile.internal.AwsProfileNameLoader INSTANCE>;

        $r6 = virtualinvoke $r5.<com.amazonaws.auth.profile.internal.AwsProfileNameLoader: java.lang.String loadProfileName()>();

        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: java.lang.String profileName> = $r6;

        goto label3;

     label2:
        r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: java.lang.String profileName> = r4;

     label3:
        return;
    }

Method: <com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: void <init>()>
    public void <init>()
    {
        com.amazonaws.auth.AWSCredentialsProvider $r1;
        com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper r0;

        r0 := @this: com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = specialinvoke r0.<com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: com.amazonaws.auth.AWSCredentialsProvider initializeProvider()>();

        r0.<com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: com.amazonaws.auth.AWSCredentialsProvider provider> = $r1;

        return;
    }

Method: <com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: com.amazonaws.auth.AWSCredentialsProvider initializeProvider()>
    private com.amazonaws.auth.AWSCredentialsProvider initializeProvider()
    {
        com.amazonaws.auth.ContainerCredentialsProvider$FullUriCredentialsEndpointProvider $r4;
        java.lang.Throwable $r7;
        com.amazonaws.auth.InstanceProfileCredentialsProvider $r2, $r9;
        com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper r10;
        org.apache.commons.logging.Log $r8;
        java.lang.String $r0, $r1;
        com.amazonaws.auth.ContainerCredentialsProvider $r3, $r5;
        com.amazonaws.auth.ContainerCredentialsProvider$ECSCredentialsEndpointProvider $r6;

        r10 := @this: com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper;

     label1:
        $r0 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("AWS_CONTAINER_CREDENTIALS_RELATIVE_URI");

        if $r0 == null goto label3;

        $r5 = new com.amazonaws.auth.ContainerCredentialsProvider;

        $r6 = new com.amazonaws.auth.ContainerCredentialsProvider$ECSCredentialsEndpointProvider;

        specialinvoke $r6.<com.amazonaws.auth.ContainerCredentialsProvider$ECSCredentialsEndpointProvider: void <init>()>();

        specialinvoke $r5.<com.amazonaws.auth.ContainerCredentialsProvider: void <init>(com.amazonaws.internal.CredentialsEndpointProvider)>($r6);

     label2:
        return $r5;

     label3:
        $r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("AWS_CONTAINER_CREDENTIALS_FULL_URI");

        if $r1 == null goto label5;

        $r3 = new com.amazonaws.auth.ContainerCredentialsProvider;

        $r4 = new com.amazonaws.auth.ContainerCredentialsProvider$FullUriCredentialsEndpointProvider;

        specialinvoke $r4.<com.amazonaws.auth.ContainerCredentialsProvider$FullUriCredentialsEndpointProvider: void <init>()>();

        specialinvoke $r3.<com.amazonaws.auth.ContainerCredentialsProvider: void <init>(com.amazonaws.internal.CredentialsEndpointProvider)>($r4);

     label4:
        return $r3;

     label5:
        $r2 = staticinvoke <com.amazonaws.auth.InstanceProfileCredentialsProvider: com.amazonaws.auth.InstanceProfileCredentialsProvider getInstance()>();

     label6:
        return $r2;

     label7:
        $r7 := @caughtexception;

        $r8 = <com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Security manager did not allow access to the ECS credentials environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URIor the container full URI environment variable AWS_CONTAINER_CREDENTIALS_FULL_URI. Please provide access to this environment variable if you want to load credentials from ECS Container.");

        $r9 = staticinvoke <com.amazonaws.auth.InstanceProfileCredentialsProvider: com.amazonaws.auth.InstanceProfileCredentialsProvider getInstance()>();

        return $r9;

        catch java.lang.SecurityException from label1 to label2 with label7;
        catch java.lang.SecurityException from label3 to label4 with label7;
        catch java.lang.SecurityException from label5 to label6 with label7;
    }

Method: <com.amazonaws.auth.ContainerCredentialsProvider: void <init>(com.amazonaws.internal.CredentialsEndpointProvider)>
    public void <init>(com.amazonaws.internal.CredentialsEndpointProvider)
    {
        com.amazonaws.auth.ContainerCredentialsProvider r0;
        com.amazonaws.auth.ContainerCredentialsFetcher $r1;
        com.amazonaws.internal.CredentialsEndpointProvider r2;

        r0 := @this: com.amazonaws.auth.ContainerCredentialsProvider;

        r2 := @parameter0: com.amazonaws.internal.CredentialsEndpointProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.amazonaws.auth.ContainerCredentialsFetcher;

        specialinvoke $r1.<com.amazonaws.auth.ContainerCredentialsFetcher: void <init>(com.amazonaws.internal.CredentialsEndpointProvider)>(r2);

        r0.<com.amazonaws.auth.ContainerCredentialsProvider: com.amazonaws.auth.ContainerCredentialsFetcher credentialsFetcher> = $r1;

        return;
    }

Method: <com.amazonaws.auth.ContainerCredentialsProvider$ECSCredentialsEndpointProvider: void <init>()>
    void <init>()
    {
        com.amazonaws.auth.ContainerCredentialsProvider$ECSCredentialsEndpointProvider r0;

        r0 := @this: com.amazonaws.auth.ContainerCredentialsProvider$ECSCredentialsEndpointProvider;

        specialinvoke r0.<com.amazonaws.internal.CredentialsEndpointProvider: void <init>()>();

        return;
    }

Method: <com.amazonaws.auth.ContainerCredentialsProvider: void <init>(com.amazonaws.internal.CredentialsEndpointProvider)>
    public void <init>(com.amazonaws.internal.CredentialsEndpointProvider)
    {
        com.amazonaws.auth.ContainerCredentialsProvider r0;
        com.amazonaws.auth.ContainerCredentialsFetcher $r1;
        com.amazonaws.internal.CredentialsEndpointProvider r2;

        r0 := @this: com.amazonaws.auth.ContainerCredentialsProvider;

        r2 := @parameter0: com.amazonaws.internal.CredentialsEndpointProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.amazonaws.auth.ContainerCredentialsFetcher;

        specialinvoke $r1.<com.amazonaws.auth.ContainerCredentialsFetcher: void <init>(com.amazonaws.internal.CredentialsEndpointProvider)>(r2);

        r0.<com.amazonaws.auth.ContainerCredentialsProvider: com.amazonaws.auth.ContainerCredentialsFetcher credentialsFetcher> = $r1;

        return;
    }

Method: <com.amazonaws.auth.ContainerCredentialsProvider$FullUriCredentialsEndpointProvider: void <init>()>
    void <init>()
    {
        com.amazonaws.auth.ContainerCredentialsProvider$FullUriCredentialsEndpointProvider r0;

        r0 := @this: com.amazonaws.auth.ContainerCredentialsProvider$FullUriCredentialsEndpointProvider;

        specialinvoke r0.<com.amazonaws.internal.CredentialsEndpointProvider: void <init>()>();

        return;
    }

Method: <com.amazonaws.auth.ContainerCredentialsProvider: void <clinit>()>
    static void <clinit>()
    {
        java.util.List $r1, $r3;
        java.lang.String[] $r0, $r2;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "169.254.170.2";

        $r0[1] = "169.254.170.23";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <com.amazonaws.auth.ContainerCredentialsProvider: java.util.List VALID_LOOP_BACK_IPV4> = $r1;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "[fd00:ec2::23]";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        <com.amazonaws.auth.ContainerCredentialsProvider: java.util.List VALID_LOOP_BACK_IPV6> = $r3;

        return;
    }

Method: <com.amazonaws.auth.ContainerCredentialsProvider: void <clinit>()>
    static void <clinit>()
    {
        java.util.List $r1, $r3;
        java.lang.String[] $r0, $r2;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "169.254.170.2";

        $r0[1] = "169.254.170.23";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <com.amazonaws.auth.ContainerCredentialsProvider: java.util.List VALID_LOOP_BACK_IPV4> = $r1;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "[fd00:ec2::23]";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        <com.amazonaws.auth.ContainerCredentialsProvider: java.util.List VALID_LOOP_BACK_IPV6> = $r3;

        return;
    }

Method: <com.amazonaws.auth.InstanceProfileCredentialsProvider: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.auth.InstanceProfileCredentialsProvider $r1;
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/auth/InstanceProfileCredentialsProvider;");

        <com.amazonaws.auth.InstanceProfileCredentialsProvider: org.apache.commons.logging.Log LOG> = $r0;

        $r1 = new com.amazonaws.auth.InstanceProfileCredentialsProvider;

        specialinvoke $r1.<com.amazonaws.auth.InstanceProfileCredentialsProvider: void <init>()>();

        <com.amazonaws.auth.InstanceProfileCredentialsProvider: com.amazonaws.auth.InstanceProfileCredentialsProvider INSTANCE> = $r1;

        return;
    }

Method: <com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/auth/EC2ContainerCredentialsProviderWrapper;");

        <com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }

Method: <com.amazonaws.auth.InstanceProfileCredentialsProvider: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.auth.InstanceProfileCredentialsProvider $r1;
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/auth/InstanceProfileCredentialsProvider;");

        <com.amazonaws.auth.InstanceProfileCredentialsProvider: org.apache.commons.logging.Log LOG> = $r0;

        $r1 = new com.amazonaws.auth.InstanceProfileCredentialsProvider;

        specialinvoke $r1.<com.amazonaws.auth.InstanceProfileCredentialsProvider: void <init>()>();

        <com.amazonaws.auth.InstanceProfileCredentialsProvider: com.amazonaws.auth.InstanceProfileCredentialsProvider INSTANCE> = $r1;

        return;
    }

Method: <com.amazonaws.auth.InstanceProfileCredentialsProvider: com.amazonaws.auth.InstanceProfileCredentialsProvider getInstance()>
    public static com.amazonaws.auth.InstanceProfileCredentialsProvider getInstance()
    {
        com.amazonaws.auth.InstanceProfileCredentialsProvider $r0;

        $r0 = <com.amazonaws.auth.InstanceProfileCredentialsProvider: com.amazonaws.auth.InstanceProfileCredentialsProvider INSTANCE>;

        return $r0;
    }

Method: <com.amazonaws.auth.InstanceProfileCredentialsProvider: com.amazonaws.auth.InstanceProfileCredentialsProvider getInstance()>
    public static com.amazonaws.auth.InstanceProfileCredentialsProvider getInstance()
    {
        com.amazonaws.auth.InstanceProfileCredentialsProvider $r0;

        $r0 = <com.amazonaws.auth.InstanceProfileCredentialsProvider: com.amazonaws.auth.InstanceProfileCredentialsProvider INSTANCE>;

        return $r0;
    }

Method: <com.amazonaws.auth.WebIdentityTokenCredentialsProvider: com.amazonaws.auth.WebIdentityTokenCredentialsProvider create()>
    public static com.amazonaws.auth.WebIdentityTokenCredentialsProvider create()
    {
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider$Builder $r0;
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider $r1;

        $r0 = staticinvoke <com.amazonaws.auth.WebIdentityTokenCredentialsProvider: com.amazonaws.auth.WebIdentityTokenCredentialsProvider$Builder builder()>();

        $r1 = interfaceinvoke $r0.<com.amazonaws.auth.WebIdentityTokenCredentialsProvider$Builder: com.amazonaws.auth.WebIdentityTokenCredentialsProvider build()>();

        return $r1;
    }

Method: <com.amazonaws.auth.WebIdentityTokenCredentialsProvider: com.amazonaws.auth.WebIdentityTokenCredentialsProvider$Builder builder()>
    public static com.amazonaws.auth.WebIdentityTokenCredentialsProvider$Builder builder()
    {
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl $r0;

        $r0 = new com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl;

        specialinvoke $r0.<com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl: void <init>()>();

        return $r0;
    }

Method: <com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl: void <init>()>
    void <init>()
    {
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl r0;

        r0 := @this: com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl: com.amazonaws.auth.WebIdentityTokenCredentialsProvider build()>
    public com.amazonaws.auth.WebIdentityTokenCredentialsProvider build()
    {
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl r1;
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider $r0;

        r1 := @this: com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl;

        $r0 = new com.amazonaws.auth.WebIdentityTokenCredentialsProvider;

        specialinvoke $r0.<com.amazonaws.auth.WebIdentityTokenCredentialsProvider: void <init>(com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl,com.amazonaws.auth.WebIdentityTokenCredentialsProvider$1)>(r1, null);

        return $r0;
    }

Method: <com.amazonaws.auth.WebIdentityTokenCredentialsProvider: void <init>(com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl,com.amazonaws.auth.WebIdentityTokenCredentialsProvider$1)>
    void <init>(com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl, com.amazonaws.auth.WebIdentityTokenCredentialsProvider$1)
    {
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl r1;
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider r0;
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider$1 r2;

        r0 := @this: com.amazonaws.auth.WebIdentityTokenCredentialsProvider;

        r1 := @parameter0: com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl;

        r2 := @parameter1: com.amazonaws.auth.WebIdentityTokenCredentialsProvider$1;

        specialinvoke r0.<com.amazonaws.auth.WebIdentityTokenCredentialsProvider: void <init>(com.amazonaws.auth.WebIdentityTokenCredentialsProvider$BuilderImpl)>(r1);

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsRequest constructRequestForGetClusterCredentials(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void <init>()>

Method: <com.amazonaws.services.redshift.model.GetClusterCredentialsRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.core.IamHelper: com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest constructRequestForGetClusterCredentialsWithIAM(com.amazon.redshift.core.RedshiftJDBCSettings,boolean,com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest: void <init>()>

Method: <com.amazonaws.services.redshift.model.GetClusterCredentialsWithIAMRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.ClientConfiguration: void <init>()>
Related methods: 26
caller is : <com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.ClientConfiguration getProxyClientConfig(com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.ClientConfiguration: void <init>()>

Method: <com.amazonaws.ClientConfiguration: void <init>()>
    public void <init>()
    {
        java.util.HashMap $r11;
        java.util.concurrent.atomic.AtomicReference $r12, $r13;
        com.amazonaws.ClientConfiguration r0;
        com.amazonaws.ApacheHttpClientConfig $r14;
        int $i1, $i3, $i5;
        com.amazonaws.SystemDefaultDnsResolver $r10;
        java.lang.String $r1;
        com.amazonaws.Protocol $r3, $r4;
        com.amazonaws.retry.RetryPolicy $r2;

        r0 := @this: com.amazonaws.ClientConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <com.amazonaws.ClientConfiguration: java.lang.String DEFAULT_USER_AGENT>;

        r0.<com.amazonaws.ClientConfiguration: java.lang.String userAgentPrefix> = $r1;

        $i1 = (int) -1;

        r0.<com.amazonaws.ClientConfiguration: int maxErrorRetry> = $i1;

        $r2 = <com.amazonaws.ClientConfiguration: com.amazonaws.retry.RetryPolicy DEFAULT_RETRY_POLICY>;

        r0.<com.amazonaws.ClientConfiguration: com.amazonaws.retry.RetryPolicy retryPolicy> = $r2;

        $r3 = <com.amazonaws.Protocol: com.amazonaws.Protocol HTTPS>;

        r0.<com.amazonaws.ClientConfiguration: com.amazonaws.Protocol protocol> = $r3;

        $r4 = <com.amazonaws.Protocol: com.amazonaws.Protocol HTTP>;

        r0.<com.amazonaws.ClientConfiguration: com.amazonaws.Protocol proxyProtocol> = $r4;

        r0.<com.amazonaws.ClientConfiguration: java.lang.String proxyHost> = null;

        $i3 = (int) -1;

        r0.<com.amazonaws.ClientConfiguration: int proxyPort> = $i3;

        r0.<com.amazonaws.ClientConfiguration: java.lang.String proxyUsername> = null;

        r0.<com.amazonaws.ClientConfiguration: java.lang.String proxyPassword> = null;

        r0.<com.amazonaws.ClientConfiguration: java.lang.String proxyDomain> = null;

        r0.<com.amazonaws.ClientConfiguration: java.lang.String proxyWorkstation> = null;

        r0.<com.amazonaws.ClientConfiguration: java.lang.String nonProxyHosts> = null;

        r0.<com.amazonaws.ClientConfiguration: java.util.List proxyAuthenticationMethods> = null;

        r0.<com.amazonaws.ClientConfiguration: boolean disableSocketProxy> = 0;

        r0.<com.amazonaws.ClientConfiguration: int maxConnections> = 50;

        $i5 = (int) 50000;

        r0.<com.amazonaws.ClientConfiguration: int socketTimeout> = $i5;

        r0.<com.amazonaws.ClientConfiguration: int connectionTimeout> = 10000;

        r0.<com.amazonaws.ClientConfiguration: int requestTimeout> = 0;

        r0.<com.amazonaws.ClientConfiguration: int clientExecutionTimeout> = 0;

        r0.<com.amazonaws.ClientConfiguration: boolean throttleRetries> = 1;

        r0.<com.amazonaws.ClientConfiguration: int socketSendBufferSizeHint> = 0;

        r0.<com.amazonaws.ClientConfiguration: int socketReceiveBufferSizeHint> = 0;

        r0.<com.amazonaws.ClientConfiguration: boolean useReaper> = 1;

        r0.<com.amazonaws.ClientConfiguration: boolean useGzip> = 0;

        r0.<com.amazonaws.ClientConfiguration: long connectionTTL> = -1L;

        r0.<com.amazonaws.ClientConfiguration: long connectionMaxIdleMillis> = 60000L;

        r0.<com.amazonaws.ClientConfiguration: int validateAfterInactivityMillis> = 5000;

        r0.<com.amazonaws.ClientConfiguration: boolean tcpKeepAlive> = 0;

        r0.<com.amazonaws.ClientConfiguration: boolean cacheResponseMetadata> = 1;

        r0.<com.amazonaws.ClientConfiguration: int responseMetadataCacheSize> = 50;

        $r10 = new com.amazonaws.SystemDefaultDnsResolver;

        specialinvoke $r10.<com.amazonaws.SystemDefaultDnsResolver: void <init>()>();

        r0.<com.amazonaws.ClientConfiguration: com.amazonaws.DnsResolver dnsResolver> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<com.amazonaws.ClientConfiguration: java.util.Map headers> = $r11;

        r0.<com.amazonaws.ClientConfiguration: boolean useExpectContinue> = 1;

        r0.<com.amazonaws.ClientConfiguration: int maxConsecutiveRetriesBeforeThrottling> = 100;

        $r12 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r12.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.amazonaws.ClientConfiguration: java.util.concurrent.atomic.AtomicReference httpProxyHolder> = $r12;

        $r13 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r13.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.amazonaws.ClientConfiguration: java.util.concurrent.atomic.AtomicReference httpsProxyHolder> = $r13;

        $r14 = new com.amazonaws.ApacheHttpClientConfig;

        specialinvoke $r14.<com.amazonaws.ApacheHttpClientConfig: void <init>()>();

        r0.<com.amazonaws.ClientConfiguration: com.amazonaws.ApacheHttpClientConfig apacheHttpClientConfig> = $r14;

        return;
    }

Method: <com.amazonaws.ClientConfiguration: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;
        java.lang.String $r1;
        com.amazonaws.retry.RetryPolicy $r2;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/ClientConfiguration;");

        <com.amazonaws.ClientConfiguration: org.apache.commons.logging.Log log> = $r0;

        $r1 = staticinvoke <com.amazonaws.util.VersionInfoUtils: java.lang.String getUserAgent()>();

        <com.amazonaws.ClientConfiguration: java.lang.String DEFAULT_USER_AGENT> = $r1;

        $r2 = <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy DEFAULT>;

        <com.amazonaws.ClientConfiguration: com.amazonaws.retry.RetryPolicy DEFAULT_RETRY_POLICY> = $r2;

        return;
    }

Method: <com.amazonaws.util.VersionInfoUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/VersionInfoUtils;");

        <com.amazonaws.util.VersionInfoUtils: org.apache.commons.logging.Log log> = $r0;

        staticinvoke <com.amazonaws.util.VersionInfoUtils: void printDeprecationAnnouncement()>();

        staticinvoke <com.amazonaws.util.VersionInfoUtils: void printSdkLocation()>();

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
Method: <com.amazonaws.util.VersionInfoUtils: void printDeprecationAnnouncement()>
    private static void printDeprecationAnnouncement()
    {
        java.lang.StackTraceElement[] $r4;
        java.lang.Thread $r3;
        int i0, i1;
        java.lang.StringBuilder $r2, $r7, $r8;
        org.apache.commons.logging.Log $r5;
        java.lang.StackTraceElement r6;
        java.lang.String $r0, $r1;
        boolean $z0, $z1, $z2;

        $r0 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("AWS_JAVA_V1_DISABLE_DEPRECATION_ANNOUNCEMENT");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("aws.java.v1.disableDeprecationAnnouncement");

        $z0 = staticinvoke <com.amazonaws.util.VersionInfoUtils: boolean isTrue(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.amazonaws.util.VersionInfoUtils: boolean isTrue(java.lang.String)>($r1);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 == 0 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("The AWS SDK for Java 1.x entered maintenance mode starting July 31, 2024 and will reach end of support on December 31, 2025. For more information, see https://aws.amazon.com/blogs/developer/the-aws-sdk-for-java-1-x-is-in-maintenance-mode-effective-july-31-2024/\nYou can print where on the file system the AWS SDK for Java 1.x core runtime is located by setting the AWS_JAVA_V1_PRINT_LOCATION environment variable or aws.java.v1.printLocation system property to \'true\'.\nThis message can be disabled by setting the AWS_JAVA_V1_DISABLE_DEPRECATION_ANNOUNCEMENT environment variable or aws.java.v1.disableDeprecationAnnouncement system property to \'true\'.\nThe AWS SDK for Java 1.x is being used here:");

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = lengthof $r4;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r6 = $r4[i1];

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        i1 = i1 + 1;

        goto label3;

     label4:
        $r5 = <com.amazonaws.util.VersionInfoUtils: org.apache.commons.logging.Log log>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r2);

     label5:
        return;
    }

Method: <com.amazonaws.util.VersionInfoUtils: void printSdkLocation()>
    private static void printSdkLocation()
    {
        java.lang.Throwable $r16;
        java.net.URL $r5;
        java.lang.String $r0, $r1, $r14;
        boolean $z0, $z1, $z2;
        java.security.ProtectionDomain $r3;
        java.lang.Class $r2;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.commons.logging.Log $r15, $r17;
        java.security.CodeSource $r4;

        $r0 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("AWS_JAVA_V1_PRINT_LOCATION");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("aws.java.v1.printLocation");

        $z0 = staticinvoke <com.amazonaws.util.VersionInfoUtils: boolean isTrue(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.amazonaws.util.VersionInfoUtils: boolean isTrue(java.lang.String)>($r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 == 0 goto label7;

     label4:
        $r2 = class "Lcom/amazonaws/util/VersionInfoUtils;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $r4 = virtualinvoke $r3.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();

        $r5 = virtualinvoke $r4.<java.security.CodeSource: java.net.URL getLocation()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The AWS SDK for Java 1.x core runtime is located at ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nThis message was generated because the ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AWS_JAVA_V1_PRINT_LOCATION");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" environment variable or ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aws.java.v1.printLocation");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" system property were set to \'true\'.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = <com.amazonaws.util.VersionInfoUtils: org.apache.commons.logging.Log log>;

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r14);

     label5:
        goto label7;

     label6:
        $r16 := @caughtexception;

        $r17 = <com.amazonaws.util.VersionInfoUtils: org.apache.commons.logging.Log log>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("The AWS SDK for Java 1.x core runtime location could not be printed, because a security manager did not allow it.", $r16);

     label7:
        return;

        catch java.lang.SecurityException from label4 to label5 with label6;
    }

Method: <com.amazonaws.retry.PredefinedRetryPolicies: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy $r4, $r5, $r6;
        com.amazonaws.retry.RetryPolicy$RetryCondition $r2;
        com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultRetryCondition $r3;
        com.amazonaws.retry.RetryPolicy $r0, $r7, $r8;
        com.amazonaws.retry.RetryPolicy$BackoffStrategy $r1;

        $r0 = new com.amazonaws.retry.RetryPolicy;

        $r2 = <com.amazonaws.retry.RetryPolicy$RetryCondition: com.amazonaws.retry.RetryPolicy$RetryCondition NO_RETRY_CONDITION>;

        $r1 = <com.amazonaws.retry.RetryPolicy$BackoffStrategy: com.amazonaws.retry.RetryPolicy$BackoffStrategy NO_DELAY>;

        specialinvoke $r0.<com.amazonaws.retry.RetryPolicy: void <init>(com.amazonaws.retry.RetryPolicy$RetryCondition,com.amazonaws.retry.RetryPolicy$BackoffStrategy,int,boolean)>($r2, $r1, 0, 0);

        <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy NO_RETRY_POLICY> = $r0;

        $r3 = new com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultRetryCondition;

        specialinvoke $r3.<com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultRetryCondition: void <init>()>();

        <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy$RetryCondition DEFAULT_RETRY_CONDITION> = $r3;

        $r4 = new com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy;

        specialinvoke $r4.<com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: void <init>()>();

        <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy$BackoffStrategy DEFAULT_BACKOFF_STRATEGY> = $r4;

        $r5 = new com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy;

        specialinvoke $r5.<com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: void <init>()>();

        <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.V2CompatibleBackoffStrategy DEFAULT_BACKOFF_STRATEGY_V2> = $r5;

        $r6 = new com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy;

        specialinvoke $r6.<com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: void <init>(int,int,int)>(25, 500, 20000);

        <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy$BackoffStrategy DYNAMODB_DEFAULT_BACKOFF_STRATEGY> = $r6;

        $r7 = staticinvoke <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy getDefaultRetryPolicy()>();

        <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy DEFAULT> = $r7;

        $r8 = staticinvoke <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy getDynamoDBDefaultRetryPolicy()>();

        <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy DYNAMODB_DEFAULT> = $r8;

        return;
    }

Method: <com.amazonaws.retry.RetryPolicy: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.retry.internal.RetryModeResolver $r0;

        $r0 = new com.amazonaws.retry.internal.RetryModeResolver;

        specialinvoke $r0.<com.amazonaws.retry.internal.RetryModeResolver: void <init>()>();

        <com.amazonaws.retry.RetryPolicy: com.amazonaws.retry.internal.RetryModeResolver RETRY_MODE_RESOLVER> = $r0;

        return;
    }

Method: <com.amazonaws.retry.RetryPolicy: void <init>(com.amazonaws.retry.RetryPolicy$RetryCondition,com.amazonaws.retry.RetryPolicy$BackoffStrategy,int,boolean)>
    public void <init>(com.amazonaws.retry.RetryPolicy$RetryCondition, com.amazonaws.retry.RetryPolicy$BackoffStrategy, int, boolean)
    {
        com.amazonaws.retry.RetryPolicy$RetryCondition r1;
        int i0;
        com.amazonaws.retry.RetryPolicy r0;
        com.amazonaws.retry.RetryPolicy$BackoffStrategy r2;
        boolean z0;

        r0 := @this: com.amazonaws.retry.RetryPolicy;

        r1 := @parameter0: com.amazonaws.retry.RetryPolicy$RetryCondition;

        r2 := @parameter1: com.amazonaws.retry.RetryPolicy$BackoffStrategy;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.amazonaws.retry.RetryPolicy: void <init>(com.amazonaws.retry.RetryPolicy$RetryCondition,com.amazonaws.retry.RetryPolicy$BackoffStrategy,int,boolean,boolean,boolean)>(r1, r2, i0, z0, 0, 0);

        return;
    }

Method: <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultRetryCondition: void <init>()>
    public void <init>()
    {
        com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultRetryCondition r0;

        r0 := @this: com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultRetryCondition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: void <init>()>
    public void <init>()
    {
        com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy r0;
        com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy $r1;
        com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy $r2;

        r0 := @this: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy;

        specialinvoke r0.<com.amazonaws.retry.V2CompatibleBackoffStrategyAdapter: void <init>()>();

        $r1 = new com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy;

        specialinvoke $r1.<com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy: void <init>(int,int)>(100, 20000);

        r0.<com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: com.amazonaws.retry.v2.BackoffStrategy fullJitterBackoffStrategy> = $r1;

        $r2 = new com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy;

        specialinvoke $r2.<com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy: void <init>(int,int)>(500, 20000);

        r0.<com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: com.amazonaws.retry.v2.BackoffStrategy equalJitterBackoffStrategy> = $r2;

        return;
    }

Method: <com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: void <init>()>
    public void <init>()
    {
        com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy r0;
        com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy $r1;
        com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy $r2;

        r0 := @this: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy;

        specialinvoke r0.<com.amazonaws.retry.V2CompatibleBackoffStrategyAdapter: void <init>()>();

        $r1 = new com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy;

        specialinvoke $r1.<com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy: void <init>(int,int)>(100, 20000);

        r0.<com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: com.amazonaws.retry.v2.BackoffStrategy fullJitterBackoffStrategy> = $r1;

        $r2 = new com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy;

        specialinvoke $r2.<com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy: void <init>(int,int)>(500, 20000);

        r0.<com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: com.amazonaws.retry.v2.BackoffStrategy equalJitterBackoffStrategy> = $r2;

        return;
    }

Method: <com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: void <init>(int,int,int)>
    public void <init>(int, int, int)
    {
        com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy r0;
        com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy $r2;
        int i0, i1, i2;
        com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy $r1;

        r0 := @this: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.amazonaws.retry.V2CompatibleBackoffStrategyAdapter: void <init>()>();

        $r1 = new com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy;

        specialinvoke $r1.<com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy: void <init>(int,int)>(i0, i1);

        r0.<com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: com.amazonaws.retry.v2.BackoffStrategy fullJitterBackoffStrategy> = $r1;

        $r2 = new com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy;

        specialinvoke $r2.<com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy: void <init>(int,int)>(i2, i1);

        r0.<com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy: com.amazonaws.retry.v2.BackoffStrategy equalJitterBackoffStrategy> = $r2;

        return;
    }

Method: <com.amazonaws.retry.RetryPolicy$RetryCondition: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.retry.RetryPolicy$RetryCondition$1 $r0;

        $r0 = new com.amazonaws.retry.RetryPolicy$RetryCondition$1;

        specialinvoke $r0.<com.amazonaws.retry.RetryPolicy$RetryCondition$1: void <init>()>();

        <com.amazonaws.retry.RetryPolicy$RetryCondition: com.amazonaws.retry.RetryPolicy$RetryCondition NO_RETRY_CONDITION> = $r0;

        return;
    }

Method: <com.amazonaws.retry.RetryPolicy$BackoffStrategy: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.retry.RetryPolicy$BackoffStrategy$1 $r0;

        $r0 = new com.amazonaws.retry.RetryPolicy$BackoffStrategy$1;

        specialinvoke $r0.<com.amazonaws.retry.RetryPolicy$BackoffStrategy$1: void <init>()>();

        <com.amazonaws.retry.RetryPolicy$BackoffStrategy: com.amazonaws.retry.RetryPolicy$BackoffStrategy NO_DELAY> = $r0;

        return;
    }

Method: <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy getDefaultRetryPolicy()>
    public static com.amazonaws.retry.RetryPolicy getDefaultRetryPolicy()
    {
        com.amazonaws.retry.RetryPolicy$RetryCondition $r2;
        com.amazonaws.retry.RetryPolicy $r0;
        com.amazonaws.retry.RetryPolicy$BackoffStrategy $r1;

        $r0 = new com.amazonaws.retry.RetryPolicy;

        $r2 = <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy$RetryCondition DEFAULT_RETRY_CONDITION>;

        $r1 = <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy$BackoffStrategy DEFAULT_BACKOFF_STRATEGY>;

        specialinvoke $r0.<com.amazonaws.retry.RetryPolicy: void <init>(com.amazonaws.retry.RetryPolicy$RetryCondition,com.amazonaws.retry.RetryPolicy$BackoffStrategy,int,boolean,boolean,boolean)>($r2, $r1, 3, 1, 1, 1);

        return $r0;
    }

Method: <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy getDynamoDBDefaultRetryPolicy()>
    public static com.amazonaws.retry.RetryPolicy getDynamoDBDefaultRetryPolicy()
    {
        com.amazonaws.retry.RetryPolicy$RetryCondition $r2;
        com.amazonaws.retry.RetryPolicy $r0;
        com.amazonaws.retry.RetryPolicy$BackoffStrategy $r1;

        $r0 = new com.amazonaws.retry.RetryPolicy;

        $r2 = <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy$RetryCondition DEFAULT_RETRY_CONDITION>;

        $r1 = <com.amazonaws.retry.PredefinedRetryPolicies: com.amazonaws.retry.RetryPolicy$BackoffStrategy DYNAMODB_DEFAULT_BACKOFF_STRATEGY>;

        specialinvoke $r0.<com.amazonaws.retry.RetryPolicy: void <init>(com.amazonaws.retry.RetryPolicy$RetryCondition,com.amazonaws.retry.RetryPolicy$BackoffStrategy,int,boolean,boolean,boolean)>($r2, $r1, 10, 1, 0, 0);

        return $r0;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
Method: <com.amazonaws.util.VersionInfoUtils: java.lang.String getUserAgent()>
    public static java.lang.String getUserAgent()
    {
        java.lang.Throwable $r3;
        java.lang.String $r0, $r1, $r2;

        $r0 = <com.amazonaws.util.VersionInfoUtils: java.lang.String userAgent>;

        if $r0 != null goto label6;

        entermonitor class "Lcom/amazonaws/util/VersionInfoUtils;";

     label1:
        $r2 = <com.amazonaws.util.VersionInfoUtils: java.lang.String userAgent>;

        if $r2 != null goto label2;

        staticinvoke <com.amazonaws.util.VersionInfoUtils: void initializeUserAgent()>();

     label2:
        exitmonitor class "Lcom/amazonaws/util/VersionInfoUtils;";

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor class "Lcom/amazonaws/util/VersionInfoUtils;";

     label5:
        throw $r3;

     label6:
        $r1 = <com.amazonaws.util.VersionInfoUtils: java.lang.String userAgent>;

        return $r1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

Method: <com.amazonaws.util.VersionInfoUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/VersionInfoUtils;");

        <com.amazonaws.util.VersionInfoUtils: org.apache.commons.logging.Log log> = $r0;

        staticinvoke <com.amazonaws.util.VersionInfoUtils: void printDeprecationAnnouncement()>();

        staticinvoke <com.amazonaws.util.VersionInfoUtils: void printSdkLocation()>();

        return;
    }

Method: <com.amazonaws.util.VersionInfoUtils: void initializeUserAgent()>
    private static void initializeUserAgent()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.amazonaws.util.VersionInfoUtils: java.lang.String userAgent()>();

        <com.amazonaws.util.VersionInfoUtils: java.lang.String userAgent> = $r0;

        return;
    }

Method: <com.amazonaws.SystemDefaultDnsResolver: void <init>()>
    public void <init>()
    {
        com.amazonaws.SystemDefaultDnsResolver r0;

        r0 := @this: com.amazonaws.SystemDefaultDnsResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.amazonaws.ApacheHttpClientConfig: void <init>()>
    void <init>()
    {
        com.amazonaws.ApacheHttpClientConfig r0;

        r0 := @this: com.amazonaws.ApacheHttpClientConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.amazonaws.Protocol: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.Protocol[] $r2;
        com.amazonaws.Protocol $r0, $r1, $r3, $r4;

        $r0 = new com.amazonaws.Protocol;

        specialinvoke $r0.<com.amazonaws.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP", 0, "http");

        <com.amazonaws.Protocol: com.amazonaws.Protocol HTTP> = $r0;

        $r1 = new com.amazonaws.Protocol;

        specialinvoke $r1.<com.amazonaws.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTPS", 1, "https");

        <com.amazonaws.Protocol: com.amazonaws.Protocol HTTPS> = $r1;

        $r2 = newarray (com.amazonaws.Protocol)[2];

        $r3 = <com.amazonaws.Protocol: com.amazonaws.Protocol HTTP>;

        $r2[0] = $r3;

        $r4 = <com.amazonaws.Protocol: com.amazonaws.Protocol HTTPS>;

        $r2[1] = $r4;

        <com.amazonaws.Protocol: com.amazonaws.Protocol[] $VALUES> = $r2;

        return;
    }

Method: <com.amazonaws.Protocol: void <init>(java.lang.String,int,java.lang.String)>
    private void <init>(java.lang.String, int, java.lang.String)
    {
        int i0;
        java.lang.String r1, r2;
        com.amazonaws.Protocol r0;

        r0 := @this: com.amazonaws.Protocol;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<com.amazonaws.Protocol: java.lang.String protocol> = r2;

        return;
    }

Method: <com.amazonaws.Protocol: void <init>(java.lang.String,int,java.lang.String)>
    private void <init>(java.lang.String, int, java.lang.String)
    {
        int i0;
        java.lang.String r1, r2;
        com.amazonaws.Protocol r0;

        r0 := @this: com.amazonaws.Protocol;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<com.amazonaws.Protocol: java.lang.String protocol> = r2;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.ClientConfiguration: void setProxyHost(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.ClientConfiguration getProxyClientConfig(com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.ClientConfiguration: void setProxyHost(java.lang.String)>

Method: <com.amazonaws.ClientConfiguration: void setProxyHost(java.lang.String)>
    public void setProxyHost(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.ClientConfiguration r0;

        r0 := @this: com.amazonaws.ClientConfiguration;

        r1 := @parameter0: java.lang.String;

        r0.<com.amazonaws.ClientConfiguration: java.lang.String proxyHost> = r1;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.ClientConfiguration: void setNonProxyHosts(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.ClientConfiguration getProxyClientConfig(com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.ClientConfiguration: void setNonProxyHosts(java.lang.String)>

Method: <com.amazonaws.ClientConfiguration: void setNonProxyHosts(java.lang.String)>
    public void setNonProxyHosts(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.ClientConfiguration r0;

        r0 := @this: com.amazonaws.ClientConfiguration;

        r1 := @parameter0: java.lang.String;

        r0.<com.amazonaws.ClientConfiguration: java.lang.String nonProxyHosts> = r1;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.ClientConfiguration: void setProxyPort(int)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.utils.RequestUtils: com.amazonaws.ClientConfiguration getProxyClientConfig(com.amazon.redshift.logger.RedshiftLogger)>
callee is : <com.amazonaws.ClientConfiguration: void setProxyPort(int)>

Method: <com.amazonaws.ClientConfiguration: void setProxyPort(int)>
    public void setProxyPort(int)
    {
        int i0;
        com.amazonaws.ClientConfiguration r0;

        r0 := @this: com.amazonaws.ClientConfiguration;

        i0 := @parameter0: int;

        r0.<com.amazonaws.ClientConfiguration: int proxyPort> = i0;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: java.lang.String toString(java.io.InputStream)>
Related methods: 5
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.lang.String windowsIntegratedAuthentication()>
callee is : <com.amazonaws.util.IOUtils: java.lang.String toString(java.io.InputStream)>

Method: <com.amazonaws.util.IOUtils: java.lang.String toString(java.io.InputStream)>
    public static java.lang.String toString(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r2;
        java.nio.charset.Charset $r3;
        java.lang.String $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.lang.String;

        $r2 = staticinvoke <com.amazonaws.util.IOUtils: byte[] toByteArray(java.io.InputStream)>(r1);

        $r3 = <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8>;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r2, $r3);

        return $r0;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
Method: <com.amazonaws.util.StringUtils: void <clinit>()>
    static void <clinit>()
    {
        java.nio.charset.Charset $r0;
        java.util.Locale $r1;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8> = $r0;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        <com.amazonaws.util.StringUtils: java.util.Locale LOCALE_ENGLISH> = $r1;

        return;
    }

Method: <com.amazonaws.util.IOUtils: byte[] toByteArray(java.io.InputStream)>
    public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        byte[] r1, $r3;
        java.io.ByteArrayOutputStream $r5;
        int $i0, $i2;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        r1 = newarray (byte)[4096];

     label2:
        $i0 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        goto label2;

     label3:
        $r3 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label4:
        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void close()>();

        return $r3;

     label5:
        $r4 := @caughtexception;

     label6:
        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

-----------
Method to be analyzed: <com.amazonaws.util.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>
Related methods: 4
caller is : <com.amazon.redshift.plugin.AdfsCredentialsProvider: java.io.File extractExecutable()>
callee is : <com.amazonaws.util.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>

Method: <com.amazonaws.util.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>
    public static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        long $l0;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        $l0 = staticinvoke <com.amazonaws.util.IOUtils: long copy(java.io.InputStream,java.io.OutputStream,long)>(r0, r1, 9223372036854775807L);

        return $l0;
    }

Method: <com.amazonaws.util.IOUtils: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        com.amazonaws.util.IOUtils[] $r0;

        $r0 = newarray (com.amazonaws.util.IOUtils)[0];

        <com.amazonaws.util.IOUtils: com.amazonaws.util.IOUtils[] $VALUES> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/util/IOUtils;");

        <com.amazonaws.util.IOUtils: org.apache.commons.logging.Log defaultLog> = $r1;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
Method: <com.amazonaws.util.IOUtils: long copy(java.io.InputStream,java.io.OutputStream,long)>
    public static long copy(java.io.InputStream, java.io.OutputStream, long) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        long $l1, l2, l4;
        java.io.IOException $r9;
        byte $b3;
        int $i0, $i6, $i7;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        l2 := @parameter2: long;

        r0 = newarray (byte)[4096];

        l4 = 0L;

     label1:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        $i6 = (int) -1;

        if $i0 <= $i6 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        $l1 = (long) $i0;

        l4 = l4 + $l1;

        $b3 = l4 cmp l2;

        $i7 = (int) $b3;

        if $i7 < 0 goto label1;

        $r9 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read limit exceeded: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label2:
        return l4;
    }

-----------
Method to be analyzed: <com.amazonaws.services.ssooidc.AWSSSOOIDCClientBuilder: com.amazonaws.services.ssooidc.AWSSSOOIDCClientBuilder standard()>
Related methods: 1
caller is : <com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazon.redshift.NativeTokenHolder getIdcToken()>
callee is : <com.amazonaws.services.ssooidc.AWSSSOOIDCClientBuilder: com.amazonaws.services.ssooidc.AWSSSOOIDCClientBuilder standard()>

Method: <com.amazonaws.services.ssooidc.AWSSSOOIDCClientBuilder: com.amazonaws.services.ssooidc.AWSSSOOIDCClientBuilder standard()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.ssooidc.model.RegisterClientRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.plugin.BrowserIdcAuthPlugin: com.amazonaws.services.ssooidc.model.RegisterClientResult getRegisterClientResult()>
callee is : <com.amazonaws.services.ssooidc.model.RegisterClientRequest: void <init>()>

Method: <com.amazonaws.services.ssooidc.model.RegisterClientRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void <init>()>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void <init>()>

Method: <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void <init>()>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setSAMLAssertion(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setSAMLAssertion(java.lang.String)>

Method: <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setSAMLAssertion(java.lang.String)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setRoleArn(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setRoleArn(java.lang.String)>

Method: <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setRoleArn(java.lang.String)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setPrincipalArn(java.lang.String)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setPrincipalArn(java.lang.String)>

Method: <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setPrincipalArn(java.lang.String)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setDurationSeconds(java.lang.Integer)>
Related methods: 1
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setDurationSeconds(java.lang.Integer)>

Method: <com.amazonaws.services.securitytoken.model.AssumeRoleWithSAMLRequest: void setDurationSeconds(java.lang.Integer)>
Abstract method
-----------
Method to be analyzed: <com.amazonaws.auth.AnonymousAWSCredentials: void <init>()>
Related methods: 2
caller is : <com.amazon.redshift.plugin.SamlCredentialsProvider: void refresh()>
callee is : <com.amazonaws.auth.AnonymousAWSCredentials: void <init>()>

Method: <com.amazonaws.auth.AnonymousAWSCredentials: void <init>()>
    public void <init>()
    {
        com.amazonaws.auth.AnonymousAWSCredentials r0;

        r0 := @this: com.amazonaws.auth.AnonymousAWSCredentials;

        specialinvoke r0.<com.amazonaws.auth.AnonymousAWSCredentials: void <init>(java.lang.String)>(null);

        return;
    }

Method: <com.amazonaws.auth.AnonymousAWSCredentials: void <init>(java.lang.String)>
    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.amazonaws.auth.AnonymousAWSCredentials r0;

        r0 := @this: com.amazonaws.auth.AnonymousAWSCredentials;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.amazonaws.auth.AnonymousAWSCredentials: java.lang.String providerName> = r1;

        return;
    }

-----------
Method to be analyzed: <com.amazonaws.auth.DefaultAWSCredentialsProviderChain: com.amazonaws.auth.DefaultAWSCredentialsProviderChain getInstance()>
Related methods: 14
caller is : <com.mongodb.internal.authentication.AwsSdkV1CredentialSupplier: void <init>()>
callee is : <com.amazonaws.auth.DefaultAWSCredentialsProviderChain: com.amazonaws.auth.DefaultAWSCredentialsProviderChain getInstance()>

Method: <com.amazonaws.auth.DefaultAWSCredentialsProviderChain: com.amazonaws.auth.DefaultAWSCredentialsProviderChain getInstance()>
    public static com.amazonaws.auth.DefaultAWSCredentialsProviderChain getInstance()
    {
        com.amazonaws.auth.DefaultAWSCredentialsProviderChain $r0;

        $r0 = <com.amazonaws.auth.DefaultAWSCredentialsProviderChain: com.amazonaws.auth.DefaultAWSCredentialsProviderChain INSTANCE>;

        return $r0;
    }

Method: <com.amazonaws.auth.DefaultAWSCredentialsProviderChain: void <clinit>()>
    static void <clinit>()
    {
        com.amazonaws.auth.DefaultAWSCredentialsProviderChain $r0;

        $r0 = new com.amazonaws.auth.DefaultAWSCredentialsProviderChain;

        specialinvoke $r0.<com.amazonaws.auth.DefaultAWSCredentialsProviderChain: void <init>()>();

        <com.amazonaws.auth.DefaultAWSCredentialsProviderChain: com.amazonaws.auth.DefaultAWSCredentialsProviderChain INSTANCE> = $r0;

        return;
    }

Method: <com.amazonaws.auth.AWSCredentialsProviderChain: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/auth/AWSCredentialsProviderChain;");

        <com.amazonaws.auth.AWSCredentialsProviderChain: org.apache.commons.logging.Log log> = $r0;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
Method: <com.amazonaws.auth.DefaultAWSCredentialsProviderChain: void <init>()>
    public void <init>()
    {
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider $r4;
        com.amazonaws.auth.DefaultAWSCredentialsProviderChain r0;
        com.amazonaws.auth.EnvironmentVariableCredentialsProvider $r2;
        com.amazonaws.auth.SystemPropertiesCredentialsProvider $r3;
        com.amazonaws.auth.AWSCredentialsProvider[] $r1;
        com.amazonaws.auth.profile.ProfileCredentialsProvider $r5;
        com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper $r6;

        r0 := @this: com.amazonaws.auth.DefaultAWSCredentialsProviderChain;

        $r1 = newarray (com.amazonaws.auth.AWSCredentialsProvider)[5];

        $r2 = new com.amazonaws.auth.EnvironmentVariableCredentialsProvider;

        specialinvoke $r2.<com.amazonaws.auth.EnvironmentVariableCredentialsProvider: void <init>()>();

        $r1[0] = $r2;

        $r3 = new com.amazonaws.auth.SystemPropertiesCredentialsProvider;

        specialinvoke $r3.<com.amazonaws.auth.SystemPropertiesCredentialsProvider: void <init>()>();

        $r1[1] = $r3;

        $r4 = staticinvoke <com.amazonaws.auth.WebIdentityTokenCredentialsProvider: com.amazonaws.auth.WebIdentityTokenCredentialsProvider create()>();

        $r1[2] = $r4;

        $r5 = new com.amazonaws.auth.profile.ProfileCredentialsProvider;

        specialinvoke $r5.<com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>()>();

        $r1[3] = $r5;

        $r6 = new com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper;

        specialinvoke $r6.<com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: void <init>()>();

        $r1[4] = $r6;

        specialinvoke r0.<com.amazonaws.auth.AWSCredentialsProviderChain: void <init>(com.amazonaws.auth.AWSCredentialsProvider[])>($r1);

        return;
    }

Method: <com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/auth/EC2ContainerCredentialsProviderWrapper;");

        <com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }

Method: <com.amazonaws.auth.AWSCredentialsProviderChain: void <init>(com.amazonaws.auth.AWSCredentialsProvider[])>
    public transient void <init>(com.amazonaws.auth.AWSCredentialsProvider[])
    {
        com.amazonaws.auth.AWSCredentialsProviderChain r0;
        java.lang.IllegalArgumentException $r3;
        com.amazonaws.auth.AWSCredentialsProvider[] r2;
        java.util.List $r5;
        int $i0, i1, i2;
        com.amazonaws.auth.AWSCredentialsProvider r4;
        java.util.LinkedList $r1;

        r0 := @this: com.amazonaws.auth.AWSCredentialsProviderChain;

        r2 := @parameter0: com.amazonaws.auth.AWSCredentialsProvider[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.amazonaws.auth.AWSCredentialsProviderChain: java.util.List credentialsProviders> = $r1;

        r0.<com.amazonaws.auth.AWSCredentialsProviderChain: boolean reuseLastProvider> = 1;

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No credential providers specified");

        throw $r3;

     label2:
        i1 = lengthof r2;

        i2 = 0;

     label3:
        if i2 >= i1 goto label4;

        r4 = r2[i2];

        $r5 = r0.<com.amazonaws.auth.AWSCredentialsProviderChain: java.util.List credentialsProviders>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

Method: <com.amazonaws.auth.EnvironmentVariableCredentialsProvider: void <init>()>
    public void <init>()
    {
        com.amazonaws.auth.EnvironmentVariableCredentialsProvider r0;

        r0 := @this: com.amazonaws.auth.EnvironmentVariableCredentialsProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.amazonaws.auth.SystemPropertiesCredentialsProvider: void <init>()>
    public void <init>()
    {
        com.amazonaws.auth.SystemPropertiesCredentialsProvider r0;

        r0 := @this: com.amazonaws.auth.SystemPropertiesCredentialsProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>()>
    public void <init>()
    {
        com.amazonaws.auth.profile.ProfileCredentialsProvider r0;

        r0 := @this: com.amazonaws.auth.profile.ProfileCredentialsProvider;

        specialinvoke r0.<com.amazonaws.auth.profile.ProfileCredentialsProvider: void <init>(java.lang.String)>(null);

        return;
    }

Method: <com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: void <init>()>
    public void <init>()
    {
        com.amazonaws.auth.AWSCredentialsProvider $r1;
        com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper r0;

        r0 := @this: com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = specialinvoke r0.<com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: com.amazonaws.auth.AWSCredentialsProvider initializeProvider()>();

        r0.<com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper: com.amazonaws.auth.AWSCredentialsProvider provider> = $r1;

        return;
    }

Method: <com.amazonaws.auth.WebIdentityTokenCredentialsProvider: com.amazonaws.auth.WebIdentityTokenCredentialsProvider create()>
    public static com.amazonaws.auth.WebIdentityTokenCredentialsProvider create()
    {
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider$Builder $r0;
        com.amazonaws.auth.WebIdentityTokenCredentialsProvider $r1;

        $r0 = staticinvoke <com.amazonaws.auth.WebIdentityTokenCredentialsProvider: com.amazonaws.auth.WebIdentityTokenCredentialsProvider$Builder builder()>();

        $r1 = interfaceinvoke $r0.<com.amazonaws.auth.WebIdentityTokenCredentialsProvider$Builder: com.amazonaws.auth.WebIdentityTokenCredentialsProvider build()>();

        return $r1;
    }

Method: <com.amazonaws.auth.AWSCredentialsProviderChain: void <clinit>()>
    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/auth/AWSCredentialsProviderChain;");

        <com.amazonaws.auth.AWSCredentialsProviderChain: org.apache.commons.logging.Log log> = $r0;

        return;
    }

Method: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
Abstract method
-----------
