=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>
Related methods: 88
caller is : <cn.com.antcloud.api.common.BaseGwClient: cn.com.antcloud.api.common.BaseClientResponse handleHmacSHAResponse(org.apache.http.HttpResponse,java.lang.String)>
callee is : <com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>

Method: <com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>
    public java.lang.String getString(java.lang.String)
    {
        com.alibaba.fastjson.JSONObject r0;
        java.lang.Object $r2;
        java.lang.String r1, $r3;

        r0 := @this: com.alibaba.fastjson.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

Method: <com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
    public java.lang.Object get(java.lang.Object)
    {
        com.alibaba.fastjson2.JSONArray $r5;
        com.alibaba.fastjson.JSONArray $r12;
        java.util.Map $r2, $r9, $r13;
        com.alibaba.fastjson2.JSONObject $r7;
        java.lang.String $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r14;
        com.alibaba.fastjson.JSONObject r0, $r11;
        java.lang.Object r1, $r3, r8;

        r0 := @this: com.alibaba.fastjson.JSONObject;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = $r3;

        if $r3 != null goto label2;

        $z1 = r1 instanceof java.lang.Number;

        if $z1 != 0 goto label1;

        $z2 = r1 instanceof java.lang.Boolean;

        if $z2 != 0 goto label1;

        $z3 = r1 instanceof java.lang.Character;

        if $z3 == 0 goto label2;

     label1:
        $r9 = r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>;

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        r8 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

     label2:
        $z4 = r8 instanceof com.alibaba.fastjson2.JSONObject;

        if $z4 == 0 goto label3;

        $r11 = new com.alibaba.fastjson.JSONObject;

        $r7 = (com.alibaba.fastjson2.JSONObject) r8;

        $r13 = (java.util.Map) $r7;

        specialinvoke $r11.<com.alibaba.fastjson.JSONObject: void <init>(java.util.Map)>($r13);

        r8 = $r11;

     label3:
        $z0 = r8 instanceof com.alibaba.fastjson2.JSONArray;

        if $z0 == 0 goto label4;

        $r12 = new com.alibaba.fastjson.JSONArray;

        $r5 = (com.alibaba.fastjson2.JSONArray) r8;

        $r14 = (java.util.List) $r5;

        specialinvoke $r12.<com.alibaba.fastjson.JSONArray: void <init>(java.util.List)>($r14);

        r8 = $r12;

     label4:
        return r8;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r36;
        com.alibaba.fastjson.serializer.SerializerFeature[] $r30, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        $r0 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r0.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("QuoteFieldNames", 0);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames> = $r0;

        $r1 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r1.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("UseSingleQuotes", 1);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature UseSingleQuotes> = $r1;

        $r2 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r2.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteMapNullValue", 2);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteMapNullValue> = $r2;

        $r3 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r3.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteEnumUsingToString", 3);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingToString> = $r3;

        $r4 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r4.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteEnumUsingName", 4);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName> = $r4;

        $r5 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r5.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("UseISO8601DateFormat", 5);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature UseISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r6.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullListAsEmpty", 6);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullListAsEmpty> = $r6;

        $r7 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r7.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullStringAsEmpty", 7);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullStringAsEmpty> = $r7;

        $r8 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r8.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullNumberAsZero", 8);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullNumberAsZero> = $r8;

        $r9 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r9.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullBooleanAsFalse", 9);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullBooleanAsFalse> = $r9;

        $r10 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r10.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("SkipTransientField", 10);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField> = $r10;

        $r11 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r11.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("SortField", 11);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField> = $r11;

        $r12 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r12.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteTabAsSpecial", 12);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteTabAsSpecial> = $r12;

        $r13 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("PrettyFormat", 13);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature PrettyFormat> = $r13;

        $r14 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteClassName", 14);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteClassName> = $r14;

        $r15 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 15);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature DisableCircularReferenceDetect> = $r15;

        $r16 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteSlashAsSpecial", 16);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteSlashAsSpecial> = $r16;

        $r17 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r17.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("BrowserCompatible", 17);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BrowserCompatible> = $r17;

        $r18 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r18.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteDateUseDateFormat", 18);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteDateUseDateFormat> = $r18;

        $r19 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r19.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("NotWriteRootClassName", 19);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature NotWriteRootClassName> = $r19;

        $r20 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r20.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("DisableCheckSpecialChar", 20);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature DisableCheckSpecialChar> = $r20;

        $r21 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r21.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("BeanToArray", 21);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BeanToArray> = $r21;

        $r22 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r22.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNonStringKeyAsString", 22);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNonStringKeyAsString> = $r22;

        $r23 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r23.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("NotWriteDefaultValue", 23);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature NotWriteDefaultValue> = $r23;

        $r24 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r24.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("BrowserSecure", 24);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BrowserSecure> = $r24;

        $r25 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r25.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("IgnoreNonFieldGetter", 25);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature IgnoreNonFieldGetter> = $r25;

        $r26 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r26.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNonStringValueAsString", 26);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNonStringValueAsString> = $r26;

        $r27 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r27.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("IgnoreErrorGetter", 27);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature IgnoreErrorGetter> = $r27;

        $r28 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r28.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteBigDecimalAsPlain", 28);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteBigDecimalAsPlain> = $r28;

        $r29 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r29.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("MapSortField", 29);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature MapSortField> = $r29;

        $r30 = staticinvoke <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature[] $values()>();

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature[] $VALUES> = $r30;

        $r31 = newarray (com.alibaba.fastjson.serializer.SerializerFeature)[0];

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature[] EMPTY> = $r31;

        $r32 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteMapNullValue>;

        $i0 = virtualinvoke $r32.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $r33 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullBooleanAsFalse>;

        $i1 = virtualinvoke $r33.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i2 = $i0 | $i1;

        $r34 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullListAsEmpty>;

        $i3 = virtualinvoke $r34.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i4 = $i2 | $i3;

        $r35 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullNumberAsZero>;

        $i5 = virtualinvoke $r35.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i6 = $i4 | $i5;

        $r36 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullStringAsEmpty>;

        $i7 = virtualinvoke $r36.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i8 = $i6 | $i7;

        <com.alibaba.fastjson.serializer.SerializerFeature: int WRITE_MAP_NULL_FEATURES> = $i8;

        return;
    }

Method: <com.alibaba.fastjson.JSONObject$Creator: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.JSONObject$Creator $r0;

        $r0 = new com.alibaba.fastjson.JSONObject$Creator;

        specialinvoke $r0.<com.alibaba.fastjson.JSONObject$Creator: void <init>()>();

        <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE> = $r0;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson2.PropertyNamingStrategy $r3;
        com.alibaba.fastjson.serializer.SerializeConfig $r0, $r1;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r2;
        boolean $z0;

        $r0 = new com.alibaba.fastjson.serializer.SerializeConfig;

        specialinvoke $r0.<com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>(null);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global> = $r0;

        $r1 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global>;

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig globalInstance> = $r1;

        $r2 = new com.alibaba.fastjson2.writer.ObjectWriterProvider;

        $z0 = <com.alibaba.fastjson.util.TypeUtils: boolean compatibleWithFieldName>;

        if $z0 == 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = <com.alibaba.fastjson2.PropertyNamingStrategy: com.alibaba.fastjson2.PropertyNamingStrategy CamelCase1x>;

     label2:
        specialinvoke $r2.<com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>(com.alibaba.fastjson2.PropertyNamingStrategy)>($r3);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER> = $r2;

        return;
    }

Method: <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>
    public static java.util.function.Supplier bootstrap$()
    {
        com.alibaba.fastjson.JSON$init__529 $r0;

        $r0 = new com.alibaba.fastjson.JSON$init__529;

        specialinvoke $r0.<com.alibaba.fastjson.JSON$init__529: void <init>()>();

        return $r0;
    }

Method: <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>
    public static java.util.function.Supplier bootstrap$()
    {
        com.alibaba.fastjson.JSON$lambda_static_0__530 $r0;

        $r0 = new com.alibaba.fastjson.JSON$lambda_static_0__530;

        specialinvoke $r0.<com.alibaba.fastjson.JSON$lambda_static_0__530: void <init>()>();

        return $r0;
    }

Method: <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>
Abstract method
Method: <com.alibaba.fastjson.JSONObject: void <init>(java.util.Map)>
    public void <init>(java.util.Map)
    {
        com.alibaba.fastjson.JSONObject r0;
        java.lang.IllegalArgumentException $r2;
        java.util.Map r1;

        r0 := @this: com.alibaba.fastjson.JSONObject;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<com.alibaba.fastjson.JSON: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("map is null.");

        throw $r2;

     label1:
        r0.<com.alibaba.fastjson.JSONObject: java.util.Map map> = r1;

        return;
    }

Method: <com.alibaba.fastjson.JSON: void <init>()>
    public void <init>()
    {
        com.alibaba.fastjson.JSON r0;

        r0 := @this: com.alibaba.fastjson.JSON;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.JSONArray: void <init>(java.util.List)>
    public void <init>(java.util.List)
    {
        com.alibaba.fastjson.JSONArray r0;
        java.util.List r2, $r4;
        com.alibaba.fastjson2.JSONArray $r3;

        r0 := @this: com.alibaba.fastjson.JSONArray;

        r2 := @parameter0: java.util.List;

        specialinvoke r0.<com.alibaba.fastjson.JSON: void <init>()>();

        $r3 = new com.alibaba.fastjson2.JSONArray;

        specialinvoke $r3.<com.alibaba.fastjson2.JSONArray: void <init>()>();

        $r4 = (java.util.List) $r3;

        r0.<com.alibaba.fastjson.JSONArray: java.util.List list> = $r4;

        r0.<com.alibaba.fastjson.JSONArray: java.util.List list> = r2;

        return;
    }

Method: <com.alibaba.fastjson2.JSONArray: void <init>()>
Abstract method
Method: <com.alibaba.fastjson.JSON: void <init>()>
    public void <init>()
    {
        com.alibaba.fastjson.JSON r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSONObject: java.lang.String getString(java.lang.String)>`, let's break down the code step by step:

1. **Parameter and Object Initialization:**
   - `r0` is initialized to `@this`, representing the current instance of `com.alibaba.fastjson.JSONObject`.
   - `r1` is initialized to `@parameter0`, representing the input parameter of type `java.lang.String`.

2. **Data Retrieval:**
   - The method calls `get(java.lang.Object)` on `r0` with `r1` as the argument. This retrieves an object from the JSON object using the key `r1`.

3. **Null Check:**
   - If the retrieved object (`$r2`) is `null`, the method returns `null`.

4. **Conversion to String:**
   - If `$r2` is not `null`, the method calls `toString()` on `$r2` to convert it to a `java.lang.String`.

5. **Return Statement:**
   - The method returns the string representation (`$r3`) of the object retrieved from the JSON object.

**Data Flow Analysis:**

- **Input to Output Flow:**
  - The input parameter `p1` (a `java.lang.String`) is used as a key to retrieve a value from the JSON object. If the value is not `null`, it is converted to a `java.lang.String` and returned. Thus, there is a data flow from `p1` to the return value.

- **Condition:**
  - The flow is conditional on the retrieved object not being `null`.

Based on this analysis, here is the XML summary of the method:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>getString</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>$r2 != null</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (the key) is used to retrieve a value from the JSON object, which is then converted to a string and returned.
    - The flow is conditional on the retrieved object not being `null`.
    </Comment>
</PropagationRule>
```

This XML captures the essence of the method's data flow, highlighting the conditional nature of the flow from the input parameter to the return value.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>
Related methods: 1
caller is : <cn.com.antcloud.api.common.BaseGwClient: cn.com.antcloud.api.common.BaseClientResponse handleRsaSm2Response(org.apache.http.HttpResponse,java.lang.String,java.lang.String)>
callee is : <com.alibaba.fastjson.JSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>

Method: <com.alibaba.fastjson.JSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>
    public java.lang.Object put(java.lang.String, java.lang.Object)
    {
        java.util.Map $r3;
        com.alibaba.fastjson.JSONObject r0;
        java.lang.Object r2, $r4;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSONObject: java.lang.Object put(java.lang.String,java.lang.Object)>`, let's break down the steps and the data flow involved:

1. **Parameter and Field Initialization:**
   - `r0` is initialized to `@this`, representing the current instance of `com.alibaba.fastjson.JSONObject`.
   - `r1` is initialized to `@parameter0`, representing the first parameter `java.lang.String`.
   - `r2` is initialized to `@parameter1`, representing the second parameter `java.lang.Object`.

2. **Field Access:**
   - `$r3` is assigned the value of `r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>`, which accesses the `map` field of the current `JSONObject` instance.

3. **Data Flow through Method Invocation:**
   - The method `put` is invoked on `$r3` (the `map` field), with `r1` and `r2` as arguments. This indicates a data flow from `p1` (`r1`) and `p2` (`r2`) into the `map` field of `this`.

4. **Return Value:**
   - The result of the `put` operation, `$r4`, is returned. This suggests that the return value is influenced by the `put` operation on the `map`.

Based on these observations, the data flow can be summarized as follows:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>put</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
        <ParamType>java.lang.Object</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0</InArguments>
    <OutArguments>this.map.key</OutArguments>
    <Comment>
    - The data flow shows that `p1` (`java.lang.String`) is transferred into the key of `this.map`.
    - The flow is no condition
    </Comment>
</PropagationRule>

<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>put</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
        <ParamType>java.lang.Object</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>1</InArguments>
    <OutArguments>this.map.value</OutArguments>
    <Comment>
    - The data flow shows that `p2` (`java.lang.Object`) is transferred into the value of `this.map`.
    - The flow is no condition
    </Comment>
</PropagationRule>

<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>put</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
        <ParamType>java.lang.Object</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>return</InArguments>
    <OutArguments>this.map</OutArguments>
    <Comment>
    - The data flow shows that the return value is influenced by the `put` operation on `this.map`.
    - The flow is no condition
    </Comment>
</PropagationRule>
```

This XML captures the data flow from the parameters into the `map` field of the `JSONObject` and the influence on the return value.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSONObject parseObject(java.lang.String)>
Related methods: 224
caller is : <com.jfinal.core.paragetter.KvGetter: com.jfinal.kit.Kv 'to'(java.lang.String)>
callee is : <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSONObject parseObject(java.lang.String)>

Method: <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSONObject parseObject(java.lang.String)>
    public static com.alibaba.fastjson.JSONObject parseObject(java.lang.String)
    {
        java.lang.Throwable $r9, $r10, r13;
        com.alibaba.fastjson.parser.Feature[] $r2;
        java.util.HashMap $r14;
        int $i0;
        java.lang.String r0, $r8, $r12;
        com.alibaba.fastjson2.JSONReader $r4;
        boolean $z0, $z1, $z2;
        com.alibaba.fastjson.JSONException $r16, $r17;
        com.alibaba.fastjson2.JSONException $r18, $r19;
        com.alibaba.fastjson.JSONObject $r15;
        com.alibaba.fastjson2.JSONReader$Context $r3;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        $i0 = <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE>;

        $r2 = newarray (com.alibaba.fastjson.parser.Feature)[0];

        $r3 = staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONReader$Context createReadContext(com.alibaba.fastjson2.reader.ObjectReaderProvider,int,com.alibaba.fastjson.parser.Feature[])>($r1, $i0, $r2);

        $r4 = staticinvoke <com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.JSONReader of(java.lang.String,com.alibaba.fastjson2.JSONReader$Context)>(r0, $r3);

     label3:
        $z1 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: boolean nextIfNullOrEmptyString()>();

        if $z1 == 0 goto label5;

     label4:
        return null;

     label5:
        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: void read(java.util.Map,long)>($r14, 0L);

        $r15 = new com.alibaba.fastjson.JSONObject;

        specialinvoke $r15.<com.alibaba.fastjson.JSONObject: void <init>(java.util.Map)>($r14);

        virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: void handleResolveTasks(java.lang.Object)>($r15);

        $z2 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: boolean isEnd()>();

        if $z2 != 0 goto label6;

        $r16 = new com.alibaba.fastjson.JSONException;

        $r8 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: java.lang.String info(java.lang.String)>("input not end");

        specialinvoke $r16.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String)>($r8);

        throw $r16;

     label6:
        return $r15;

     label7:
        $r9 := @caughtexception;

        $r18 = (com.alibaba.fastjson2.JSONException) $r9;

        $r10 = virtualinvoke $r18.<com.alibaba.fastjson2.JSONException: java.lang.Throwable getCause()>();

        r13 = $r10;

        if $r10 != null goto label8;

        r13 = $r9;

     label8:
        $r17 = new com.alibaba.fastjson.JSONException;

        $r19 = (com.alibaba.fastjson2.JSONException) $r9;

        $r12 = virtualinvoke $r19.<com.alibaba.fastjson2.JSONException: java.lang.String getMessage()>();

        specialinvoke $r17.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r13);

        throw $r17;

        catch com.alibaba.fastjson2.JSONException from label3 to label4 with label7;
        catch com.alibaba.fastjson2.JSONException from label5 to label6 with label7;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSONObject parseObject(java.lang.String)>`, let's break down the data flow and logic step by step:

### Step-by-Step Analysis

1. **Parameter Initialization:**
   - The method takes a single parameter `p1` which is a `java.lang.String` (`r0`).

2. **Null and Empty Check:**
   - If `p1` is `null` or empty, the method returns `null`. This is checked using `if r0 == null` and `if $z0 == 0` after invoking `isEmpty()`.

3. **JSONReader Context Creation:**
   - A `JSONReader$Context` is created using `staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONReader$Context createReadContext(...)>`.
   - A `JSONReader` is then created using `staticinvoke <com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.JSONReader of(...)>(r0, $r3)` with `p1` as input.

4. **Reading JSON:**
   - The method checks if the JSON string is null or empty using `nextIfNullOrEmptyString()`. If true, it returns `null`.
   - A `HashMap` is instantiated and populated by reading from the `JSONReader`.

5. **JSONObject Creation:**
   - A `JSONObject` is created using the populated `HashMap`.
   - The `JSONReader` handles resolve tasks on the `JSONObject`.

6. **End of JSON Check:**
   - The method checks if the end of the JSON input is reached using `isEnd()`. If not, it throws a `JSONException`.

7. **Return:**
   - If all checks pass, the method returns the `JSONObject`.

### Data Flow Summary

- **Input:** `p1` (String)
- **Output:** `return` (JSONObject)

### XML Summary

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>parseObject</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>p1 != null && !p1.isEmpty()</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (String) is parsed into a `JSONObject` which is returned.
    - The flow is conditional on `p1` not being `null` and not being empty.
    </Comment>
</PropagationRule>
```

This XML summary captures the essential data flow from the input parameter `p1` to the return value, conditioned on `p1` being non-null and non-empty.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
Related methods: 277
caller is : <com.alibaba.dubbo.common.utils.StringUtils: java.lang.String toArgumentString(java.lang.Object[])>
callee is : <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>

Method: <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
    public static java.lang.String toJSONString(java.lang.Object)
    {
        java.lang.Throwable $r10, $r11, $r14, $r15, $r16;
        com.alibaba.fastjson2.JSONWriter$Context $r2;
        com.alibaba.fastjson.serializer.SerializeConfig $r1;
        com.alibaba.fastjson.serializer.SerializerFeature[] $r0;
        int $i0;
        java.lang.String $r7, $r13;
        com.alibaba.fastjson2.JSONWriter $r3;
        com.alibaba.fastjson.JSONException $r17, $r18;
        com.alibaba.fastjson2.writer.ObjectWriter $r6;
        java.lang.RuntimeException $r8;
        com.alibaba.fastjson2.JSONException $r19, $r20, $r21;
        java.lang.Object r4;
        java.lang.Class $r5;

        r4 := @parameter0: java.lang.Object;

        $r1 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global>;

        $i0 = <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE>;

        $r0 = newarray (com.alibaba.fastjson.serializer.SerializerFeature)[0];

        $r2 = staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONWriter$Context createWriteContext(com.alibaba.fastjson.serializer.SerializeConfig,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r1, $i0, $r0);

     label01:
        $r3 = staticinvoke <com.alibaba.fastjson2.JSONWriter: com.alibaba.fastjson2.JSONWriter of(com.alibaba.fastjson2.JSONWriter$Context)>($r2);

     label02:
        if r4 != null goto label03;

        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void writeNull()>();

        goto label04;

     label03:
        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void setRootObject(java.lang.Object)>(r4);

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r2.<com.alibaba.fastjson2.JSONWriter$Context: com.alibaba.fastjson2.writer.ObjectWriter getObjectWriter(java.lang.reflect.Type,java.lang.Class)>($r5, $r5);

        interfaceinvoke $r6.<com.alibaba.fastjson2.writer.ObjectWriter: void write(com.alibaba.fastjson2.JSONWriter,java.lang.Object,java.lang.Object,java.lang.reflect.Type,long)>($r3, r4, null, null, 0L);

     label04:
        $r7 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

     label05:
        if $r3 == null goto label06;

        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void close()>();

     label06:
        return $r7;

     label07:
        $r15 := @caughtexception;

        if $r3 == null goto label11;

     label08:
        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void close()>();

     label09:
        goto label11;

     label10:
        $r14 := @caughtexception;

        virtualinvoke $r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

     label11:
        throw $r15;

     label12:
        $r10 := @caughtexception;

        $r19 = (com.alibaba.fastjson2.JSONException) $r10;

        $r11 = virtualinvoke $r19.<com.alibaba.fastjson2.JSONException: java.lang.Throwable getCause()>();

        if $r11 == null goto label13;

        $r20 = (com.alibaba.fastjson2.JSONException) $r10;

        $r16 = virtualinvoke $r20.<com.alibaba.fastjson2.JSONException: java.lang.Throwable getCause()>();

        goto label14;

     label13:
        $r16 = $r10;

     label14:
        $r17 = new com.alibaba.fastjson.JSONException;

        $r21 = (com.alibaba.fastjson2.JSONException) $r10;

        $r13 = virtualinvoke $r21.<com.alibaba.fastjson2.JSONException: java.lang.String getMessage()>();

        specialinvoke $r17.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r16);

        throw $r17;

     label15:
        $r8 := @caughtexception;

        $r18 = new com.alibaba.fastjson.JSONException;

        specialinvoke $r18.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>("toJSONString error", $r8);

        throw $r18;

        catch java.lang.Throwable from label02 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch com.alibaba.fastjson2.JSONException from label01 to label06 with label12;
        catch com.alibaba.fastjson2.JSONException from label07 to label12 with label12;
        catch java.lang.RuntimeException from label01 to label06 with label15;
        catch java.lang.RuntimeException from label07 to label12 with label15;
    }

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson2.PropertyNamingStrategy $r3;
        com.alibaba.fastjson.serializer.SerializeConfig $r0, $r1;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r2;
        boolean $z0;

        $r0 = new com.alibaba.fastjson.serializer.SerializeConfig;

        specialinvoke $r0.<com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>(null);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global> = $r0;

        $r1 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global>;

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig globalInstance> = $r1;

        $r2 = new com.alibaba.fastjson2.writer.ObjectWriterProvider;

        $z0 = <com.alibaba.fastjson.util.TypeUtils: boolean compatibleWithFieldName>;

        if $z0 == 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = <com.alibaba.fastjson2.PropertyNamingStrategy: com.alibaba.fastjson2.PropertyNamingStrategy CamelCase1x>;

     label2:
        specialinvoke $r2.<com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>(com.alibaba.fastjson2.PropertyNamingStrategy)>($r3);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER> = $r2;

        return;
    }

Method: <com.alibaba.fastjson.util.TypeUtils: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        <com.alibaba.fastjson.util.TypeUtils: boolean setAccessibleEnable> = 1;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(256, 0.75F, 1);

        <com.alibaba.fastjson.util.TypeUtils: java.util.concurrent.ConcurrentMap mappings> = $r0;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.serializer.SerializeConfig r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeConfig;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: boolean fieldBased> = 0;

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>(com.alibaba.fastjson2.PropertyNamingStrategy)>
Abstract method
Method: <com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.alibaba.fastjson.JSONException r0;

        r0 := @this: com.alibaba.fastjson.JSONException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.alibaba.fastjson.JSONException r0;

        r0 := @this: com.alibaba.fastjson.JSONException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.alibaba.fastjson2.JSONWriter$Context: com.alibaba.fastjson2.writer.ObjectWriter getObjectWriter(java.lang.reflect.Type,java.lang.Class)>
Abstract method
Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>`, we need to examine the data flow from the input parameter to the output. Here's a step-by-step breakdown:

1. **Parameter Initialization**:
   - `r4` is initialized as the first parameter (`p1`), which is of type `java.lang.Object`.

2. **Context and Writer Initialization**:
   - A `SerializeConfig` object (`$r1`) and an integer (`$i0`) are used to create a `JSONWriter$Context` (`$r2`).
   - A `JSONWriter` (`$r3`) is created using this context.

3. **Null Check and Writing**:
   - If `r4` (i.e., `p1`) is not null, it is set as the root object in `$r3`.
   - The class of `r4` is retrieved, and an `ObjectWriter` (`$r6`) is obtained from the context.
   - The `ObjectWriter` writes `r4` into the `JSONWriter`.

4. **String Conversion**:
   - The `JSONWriter` is converted to a `String` (`$r7`), which is the return value.

5. **Return Statement**:
   - The method returns `$r7`, which is the JSON string representation of `p1`.

6. **Exception Handling**:
   - Various exceptions are caught and handled, but they do not affect the primary data flow from `p1` to the return value.

Based on this analysis, the data flow from the parameter to the return value is straightforward: `p1` is serialized into a JSON string, which is then returned. There are no conditional data flows or intermediate transformations that affect the primary data flow path.

Here is the XML summary of the data flow:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>toJSONString</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (the input object) is serialized into a JSON string and returned.
    - The flow is no condition
    </Comment>
</PropagationRule>
```

This XML captures the essence of the method's data flow, indicating that the input object is directly serialized and returned as a JSON string without any conditional logic affecting this flow.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
Related methods: 194
caller is : <cn.com.antcloud.api.common.BaseGwClient: cn.com.antcloud.api.common.BaseClientResponse handleRsaSm2Response(org.apache.http.HttpResponse,java.lang.String,java.lang.String)>
callee is : <com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>

Method: <com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>
    public java.lang.Object get(java.lang.Object)
    {
        com.alibaba.fastjson2.JSONArray $r5;
        com.alibaba.fastjson.JSONArray $r12;
        java.util.Map $r2, $r9, $r13;
        com.alibaba.fastjson2.JSONObject $r7;
        java.lang.String $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r14;
        com.alibaba.fastjson.JSONObject r0, $r11;
        java.lang.Object r1, $r3, r8;

        r0 := @this: com.alibaba.fastjson.JSONObject;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = $r3;

        if $r3 != null goto label2;

        $z1 = r1 instanceof java.lang.Number;

        if $z1 != 0 goto label1;

        $z2 = r1 instanceof java.lang.Boolean;

        if $z2 != 0 goto label1;

        $z3 = r1 instanceof java.lang.Character;

        if $z3 == 0 goto label2;

     label1:
        $r9 = r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>;

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        r8 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

     label2:
        $z4 = r8 instanceof com.alibaba.fastjson2.JSONObject;

        if $z4 == 0 goto label3;

        $r11 = new com.alibaba.fastjson.JSONObject;

        $r7 = (com.alibaba.fastjson2.JSONObject) r8;

        $r13 = (java.util.Map) $r7;

        specialinvoke $r11.<com.alibaba.fastjson.JSONObject: void <init>(java.util.Map)>($r13);

        r8 = $r11;

     label3:
        $z0 = r8 instanceof com.alibaba.fastjson2.JSONArray;

        if $z0 == 0 goto label4;

        $r12 = new com.alibaba.fastjson.JSONArray;

        $r5 = (com.alibaba.fastjson2.JSONArray) r8;

        $r14 = (java.util.List) $r5;

        specialinvoke $r12.<com.alibaba.fastjson.JSONArray: void <init>(java.util.List)>($r14);

        r8 = $r12;

     label4:
        return r8;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSONObject: java.lang.Object get(java.lang.Object)>`, let's break down the data flow and operations step by step:

1. **Parameter and Field Initialization:**
   - `r0` is initialized to `this`, which is an instance of `com.alibaba.fastjson.JSONObject`.
   - `r1` is initialized to `p1`, which is the method parameter of type `java.lang.Object`.

2. **Data Retrieval from Map:**
   - The method accesses the `map` field of `this` (`r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>`) and attempts to retrieve a value using `r1` as the key (`interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)`).
   - The result is stored in `r8`.

3. **Handling Null Values:**
   - If the retrieved value (`$r3`) is `null`, the method checks if `r1` is an instance of `Number`, `Boolean`, or `Character`. If so, it converts `r1` to a `String` and attempts to retrieve the value from the map again using this string representation as the key.

4. **Type Conversion:**
   - If the retrieved value (`r8`) is an instance of `com.alibaba.fastjson2.JSONObject`, it is converted to a `com.alibaba.fastjson.JSONObject`.
   - If `r8` is an instance of `com.alibaba.fastjson2.JSONArray`, it is converted to a `com.alibaba.fastjson.JSONArray`.

5. **Return Value:**
   - The method returns `r8`, which is the potentially converted object.

### Data Flow Summary:

- **Parameter to Return:**
  - The parameter `p1` is used as a key to retrieve a value from `this.map`. The retrieved value, after potential type conversion, is returned.

### XML Summary:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>get</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` is used as a key to retrieve a value from `this.map`, and the retrieved value is returned after potential type conversion.
    - The flow has no condition.
    </Comment>
</PropagationRule>
```

This XML summary captures the essence of the method's data flow, highlighting the use of the parameter as a key for map access and the subsequent return of the retrieved value.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class)>
Related methods: 222
caller is : <com.alibaba.dubbo.rpc.support.MockInvoker: java.lang.Object parseMockValue(java.lang.String,java.lang.reflect.Type[])>
callee is : <com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class)>

Method: <com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class)>
    public static java.lang.Object parseObject(java.lang.String, java.lang.Class)
    {
        java.lang.Throwable $r10, $r11, r14;
        com.alibaba.fastjson.parser.Feature[] $r2;
        int $i0;
        java.lang.String r0, $r9, $r13;
        com.alibaba.fastjson2.JSONReader $r4;
        boolean $z0, $z1;
        com.alibaba.fastjson.JSONException $r15, $r16;
        com.alibaba.fastjson2.JSONException $r17, $r18;
        com.alibaba.fastjson2.reader.ObjectReader $r6;
        java.lang.Class r5;
        java.lang.Object $r7;
        com.alibaba.fastjson2.JSONReader$Context $r3;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r1;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Class;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        $i0 = <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE>;

        $r2 = newarray (com.alibaba.fastjson.parser.Feature)[0];

        $r3 = staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONReader$Context createReadContext(com.alibaba.fastjson2.reader.ObjectReaderProvider,int,com.alibaba.fastjson.parser.Feature[])>($r1, $i0, $r2);

        $r4 = staticinvoke <com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.JSONReader of(java.lang.String,com.alibaba.fastjson2.JSONReader$Context)>(r0, $r3);

     label3:
        $r6 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.reader.ObjectReader getObjectReader(java.lang.reflect.Type)>(r5);

        $r7 = interfaceinvoke $r6.<com.alibaba.fastjson2.reader.ObjectReader: java.lang.Object readObject(com.alibaba.fastjson2.JSONReader,java.lang.reflect.Type,java.lang.Object,long)>($r4, null, null, 0L);

        if $r7 == null goto label4;

        virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: void handleResolveTasks(java.lang.Object)>($r7);

     label4:
        $z1 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: boolean isEnd()>();

        if $z1 != 0 goto label5;

        $r15 = new com.alibaba.fastjson.JSONException;

        $r9 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: java.lang.String info(java.lang.String)>("input not end");

        specialinvoke $r15.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String)>($r9);

        throw $r15;

     label5:
        return $r7;

     label6:
        $r10 := @caughtexception;

        $r17 = (com.alibaba.fastjson2.JSONException) $r10;

        $r11 = virtualinvoke $r17.<com.alibaba.fastjson2.JSONException: java.lang.Throwable getCause()>();

        r14 = $r11;

        if $r11 != null goto label7;

        r14 = $r10;

     label7:
        $r16 = new com.alibaba.fastjson.JSONException;

        $r18 = (com.alibaba.fastjson2.JSONException) $r10;

        $r13 = virtualinvoke $r18.<com.alibaba.fastjson2.JSONException: java.lang.String getMessage()>();

        specialinvoke $r16.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r14);

        throw $r16;

        catch com.alibaba.fastjson2.JSONException from label3 to label5 with label6;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class)>`, we need to examine the data flow and conditions within the method. Let's break down the method step by step:

1. **Parameter Initialization**:
   - `r0` is initialized with `p1`, which is the first parameter of type `java.lang.String`.
   - `r5` is initialized with `p2`, which is the second parameter of type `java.lang.Class`.

2. **Null and Empty Check**:
   - The method checks if `r0` (i.e., `p1`) is `null` or empty. If it is, the method returns `null`.

3. **Object Reader Provider and Context Creation**:
   - The method retrieves a default `ObjectReaderProvider` and creates a `JSONReader$Context` using this provider, a default parser feature, and an empty array of `Feature`.

4. **JSONReader Creation**:
   - A `JSONReader` object is created using `r0` (`p1`) and the previously created context.

5. **Object Reading**:
   - The method retrieves an `ObjectReader` for `r5` (`p2`) and uses it to read an object from the `JSONReader`. The result is stored in `$r7`.

6. **End Check and Exception Handling**:
   - If `$r7` is not `null`, the method checks if the `JSONReader` has reached the end. If not, it throws a `JSONException`.

7. **Return Statement**:
   - The method returns `$r7`, which is the object read from the JSON string.

**Data Flow Analysis**:
- `p1` (`java.lang.String`) is used to create a `JSONReader`, which is then used to read an object of type `p2` (`java.lang.Class`). The result is returned as the output of the method.

**Propagation Rule**:
```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>parseObject</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
        <ParamType>java.lang.Class</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>p1 != null && !p1.isEmpty()</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (`java.lang.String`) is used to parse and create an object of type `p2` (`java.lang.Class`), which is then returned.
    - The flow is conditional on `p1` not being `null` and not empty.
    </Comment>
</PropagationRule>
```

This XML summarizes the data flow from the input parameter `p1` to the return value, conditional on `p1` being non-null and non-empty.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSONObject: com.alibaba.fastjson.JSONObject getJSONObject(java.lang.String)>
Related methods: 289
caller is : <cn.com.antcloud.api.common.BaseGwClient: cn.com.antcloud.api.common.BaseClientResponse handleHmacSHAResponse(org.apache.http.HttpResponse,java.lang.String)>
callee is : <com.alibaba.fastjson.JSONObject: com.alibaba.fastjson.JSONObject getJSONObject(java.lang.String)>

Method: <com.alibaba.fastjson.JSONObject: com.alibaba.fastjson.JSONObject getJSONObject(java.lang.String)>
    public com.alibaba.fastjson.JSONObject getJSONObject(java.lang.String)
    {
        com.alibaba.fastjson2.writer.ObjectWriterAdapter r7;
        java.util.Map $r2, $r11, $r23;
        com.alibaba.fastjson2.JSONObject $r9;
        java.lang.String r1, $r12, r20;
        com.alibaba.fastjson2.JSONReader $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.alibaba.fastjson2.writer.ObjectWriter $r6;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r5;
        com.alibaba.fastjson2.reader.ObjectReader $r14, $r15, $r18;
        com.alibaba.fastjson.JSONObject r0, $r17, $r19, $r21, $r22;
        java.lang.Object $r3, $r16;
        java.lang.Class $r4;

        r0 := @this: com.alibaba.fastjson.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $z0 = $r3 instanceof com.alibaba.fastjson.JSONObject;

        if $z0 == 0 goto label1;

        $r19 = (com.alibaba.fastjson.JSONObject) $r3;

        return $r19;

     label1:
        $z1 = $r3 instanceof java.lang.String;

        if $z1 == 0 goto label5;

        r20 = (java.lang.String) $r3;

        $z4 = virtualinvoke r20.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label2;

        $r12 = "null";

        $z5 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r20);

        if $z5 == 0 goto label3;

     label2:
        return null;

     label3:
        $r13 = staticinvoke <com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.JSONReader of(java.lang.String)>(r20);

        $r14 = <com.alibaba.fastjson.JSONObject: com.alibaba.fastjson2.reader.ObjectReader objectReader>;

        if $r14 != null goto label4;

        $r18 = virtualinvoke $r13.<com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.reader.ObjectReader getObjectReader(java.lang.reflect.Type)>(class "Lcom/alibaba/fastjson/JSONObject;");

        <com.alibaba.fastjson.JSONObject: com.alibaba.fastjson2.reader.ObjectReader objectReader> = $r18;

     label4:
        $r15 = <com.alibaba.fastjson.JSONObject: com.alibaba.fastjson2.reader.ObjectReader objectReader>;

        $r16 = interfaceinvoke $r15.<com.alibaba.fastjson2.reader.ObjectReader: java.lang.Object readObject(com.alibaba.fastjson2.JSONReader,java.lang.reflect.Type,java.lang.Object,long)>($r13, null, null, 0L);

        $r17 = (com.alibaba.fastjson.JSONObject) $r16;

        return $r17;

     label5:
        $z2 = $r3 instanceof java.util.Map;

        if $z2 == 0 goto label6;

        $r21 = new com.alibaba.fastjson.JSONObject;

        $r11 = (java.util.Map) $r3;

        specialinvoke $r21.<com.alibaba.fastjson.JSONObject: void <init>(java.util.Map)>($r11);

        return $r21;

     label6:
        if $r3 != null goto label7;

        return null;

     label7:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.writer.ObjectWriterProvider getDefaultObjectWriterProvider()>();

        $r6 = virtualinvoke $r5.<com.alibaba.fastjson2.writer.ObjectWriterProvider: com.alibaba.fastjson2.writer.ObjectWriter getObjectWriter(java.lang.Class)>($r4);

        $z3 = $r6 instanceof com.alibaba.fastjson2.writer.ObjectWriterAdapter;

        if $z3 == 0 goto label8;

        r7 = (com.alibaba.fastjson2.writer.ObjectWriterAdapter) $r6;

        $r22 = new com.alibaba.fastjson.JSONObject;

        $r9 = virtualinvoke r7.<com.alibaba.fastjson2.writer.ObjectWriterAdapter: com.alibaba.fastjson2.JSONObject toJSONObject(java.lang.Object)>($r3);

        $r23 = (java.util.Map) $r9;

        specialinvoke $r22.<com.alibaba.fastjson.JSONObject: void <init>(java.util.Map)>($r23);

        return $r22;

     label8:
        return null;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSONObject: com.alibaba.fastjson.JSONObject getJSONObject(java.lang.String)>`, let's break down the data flow and conditions step by step:

1. **Parameter and Field Access**:
   - `p1` is the parameter `java.lang.String r1`.
   - `this` is the current instance of `com.alibaba.fastjson.JSONObject`.
   - `this.map` is accessed to retrieve a value using `r1` as the key.

2. **Data Flow**:
   - The method retrieves an object from `this.map` using `r1`.
   - If the retrieved object is an instance of `com.alibaba.fastjson.JSONObject`, it is directly returned.
   - If the retrieved object is a `java.lang.String`, it is checked for emptiness or if it equals "null". If true, `null` is returned.
   - If the string is not empty or "null", it is parsed into a `JSONObject` using `com.alibaba.fastjson2.JSONReader` and returned.
   - If the retrieved object is a `java.util.Map`, a new `JSONObject` is created using this map and returned.
   - If the retrieved object is not `null` and is an instance of `com.alibaba.fastjson2.writer.ObjectWriterAdapter`, it is converted into a `JSONObject` and returned.
   - If none of these conditions are met, `null` is returned.

3. **Propagation Rules**:
   - The primary data flow is from `p1` to the return value, depending on the type and content of the object retrieved from `this.map`.

Based on this analysis, the XML summary is as follows:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>getJSONObject</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>this.map.get(p1) instanceof com.alibaba.fastjson.JSONObject</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (`r1`) is used to retrieve an object from `this.map`.
    - If the retrieved object is a `com.alibaba.fastjson.JSONObject`, it is returned.
    - The flow is conditional on the retrieved object being an instance of `com.alibaba.fastjson.JSONObject`.
    </Comment>
</PropagationRule>

<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>getJSONObject</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>this.map.get(p1) instanceof java.util.Map</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (`r1`) is used to retrieve an object from `this.map`.
    - If the retrieved object is a `java.util.Map`, a new `JSONObject` is created and returned.
    - The flow is conditional on the retrieved object being an instance of `java.util.Map`.
    </Comment>
</PropagationRule>

<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>getJSONObject</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>this.map.get(p1) instanceof java.lang.String && !((java.lang.String)this.map.get(p1)).isEmpty() && !"null".equalsIgnoreCase((java.lang.String)this.map.get(p1))</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (`r1`) is used to retrieve an object from `this.map`.
    - If the retrieved object is a non-empty `java.lang.String` not equal to "null", it is parsed into a `JSONObject` and returned.
    - The flow is conditional on the retrieved object being a non-empty string not equal to "null".
    </Comment>
</PropagationRule>
```

This XML captures the conditional data flows from the parameter `p1` to the return value based on the type and content of the object retrieved from `this.map`.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.String toJSONString()>
Related methods: 2
caller is : <cn.com.antcloud.api.common.BaseGwClient: cn.com.antcloud.api.common.BaseClientResponse handleRsaSm2Response(org.apache.http.HttpResponse,java.lang.String,java.lang.String)>
callee is : <com.alibaba.fastjson.JSON: java.lang.String toJSONString()>

Method: <com.alibaba.fastjson.JSON: java.lang.String toJSONString()>
    public java.lang.String toJSONString()
    {
        com.alibaba.fastjson2.JSONWriter$Feature $r2;
        com.alibaba.fastjson.JSON r0;
        com.alibaba.fastjson2.JSONWriter$Feature[] $r1;
        java.lang.String $r3;

        r0 := @this: com.alibaba.fastjson.JSON;

        $r1 = newarray (com.alibaba.fastjson2.JSONWriter$Feature)[1];

        $r2 = <com.alibaba.fastjson2.JSONWriter$Feature: com.alibaba.fastjson2.JSONWriter$Feature ReferenceDetection>;

        $r1[0] = $r2;

        $r3 = staticinvoke <com.alibaba.fastjson2.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson2.JSONWriter$Feature[])>(r0, $r1);

        return $r3;
    }

Method: <com.alibaba.fastjson2.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson2.JSONWriter$Feature[])>
Abstract method
-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.String toJSONString()>`, we need to evaluate the data flow and summarize it according to the conventions provided. Let's break down the steps:

### Step-by-Step Analysis:

1. **Method Signature and Parameters:**
   - The method `toJSONString()` is a member of the `com.alibaba.fastjson.JSON` class and returns a `java.lang.String`.
   - It does not take any parameters.

2. **Object References and Field Access:**
   - `r0 := @this: com.alibaba.fastjson.JSON;` indicates that `r0` is a reference to the current instance of `com.alibaba.fastjson.JSON`.

3. **Array Creation and Initialization:**
   - `$r1 = newarray (com.alibaba.fastjson2.JSONWriter$Feature)[1];` creates an array of `com.alibaba.fastjson2.JSONWriter$Feature` with one element.
   - `$r2 = <com.alibaba.fastjson2.JSONWriter$Feature: com.alibaba.fastjson2.JSONWriter$Feature ReferenceDetection>;` assigns a specific feature to `$r2`.
   - `$r1[0] = $r2;` assigns the feature `$r2` to the first element of the array `$r1`.

4. **Static Method Invocation:**
   - `$r3 = staticinvoke <com.alibaba.fastjson2.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson2.JSONWriter$Feature[])>(r0, $r1);` calls a static method `toJSONString` from `com.alibaba.fastjson2.JSON` with `r0` (the current instance) and `$r1` (the array of features) as arguments.
   - The result of this invocation is stored in `$r3`.

5. **Return Statement:**
   - `return $r3;` returns the result of the static method invocation.

### Data Flow Summary:

- The method involves a data flow from `this` (the current instance of `com.alibaba.fastjson.JSON`) to the return value via the static method `toJSONString(java.lang.Object,com.alibaba.fastjson2.JSONWriter$Feature[])`.

### XML Summary:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>toJSONString</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <!-- No parameters for this method -->
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>this</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `this` (the current instance of `com.alibaba.fastjson.JSON`) is transferred into the return value.
    - The flow is no condition
    </Comment>
</PropagationRule>
```

This XML summary captures the data flow from the current instance (`this`) to the return value, facilitated by the static method invocation.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>
Related methods: 191
caller is : <com.alibaba.dubbo.common.serialize.fastjson.FastJsonObjectInput: java.lang.Object readObject(java.lang.Class,java.lang.reflect.Type)>
callee is : <com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>

Method: <com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>
    public static transient java.lang.Object parseObject(java.lang.String, java.lang.reflect.Type, com.alibaba.fastjson.parser.Feature[])
    {
        java.lang.Throwable $r10, $r11, r14;
        com.alibaba.fastjson.parser.Feature[] r2;
        int $i0;
        java.lang.String r0, $r9, $r13;
        com.alibaba.fastjson2.JSONReader $r4;
        boolean $z0, $z1;
        com.alibaba.fastjson.JSONException $r15, $r16;
        com.alibaba.fastjson2.JSONException $r17, $r18;
        java.lang.reflect.Type r5;
        com.alibaba.fastjson2.reader.ObjectReader $r6;
        java.lang.Object $r7;
        com.alibaba.fastjson2.JSONReader$Context $r3;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r1;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.reflect.Type;

        r2 := @parameter2: com.alibaba.fastjson.parser.Feature[];

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        $i0 = <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE>;

        $r3 = staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONReader$Context createReadContext(com.alibaba.fastjson2.reader.ObjectReaderProvider,int,com.alibaba.fastjson.parser.Feature[])>($r1, $i0, r2);

        $r4 = staticinvoke <com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.JSONReader of(java.lang.String,com.alibaba.fastjson2.JSONReader$Context)>(r0, $r3);

     label3:
        $r6 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.reader.ObjectReader getObjectReader(java.lang.reflect.Type)>(r5);

        $r7 = interfaceinvoke $r6.<com.alibaba.fastjson2.reader.ObjectReader: java.lang.Object readObject(com.alibaba.fastjson2.JSONReader,java.lang.reflect.Type,java.lang.Object,long)>($r4, null, null, 0L);

        if $r7 == null goto label4;

        virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: void handleResolveTasks(java.lang.Object)>($r7);

     label4:
        $z1 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: boolean isEnd()>();

        if $z1 != 0 goto label5;

        $r15 = new com.alibaba.fastjson.JSONException;

        $r9 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: java.lang.String info(java.lang.String)>("input not end");

        specialinvoke $r15.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String)>($r9);

        throw $r15;

     label5:
        return $r7;

     label6:
        $r10 := @caughtexception;

        $r17 = (com.alibaba.fastjson2.JSONException) $r10;

        $r11 = virtualinvoke $r17.<com.alibaba.fastjson2.JSONException: java.lang.Throwable getCause()>();

        r14 = $r11;

        if $r11 != null goto label7;

        r14 = $r10;

     label7:
        $r16 = new com.alibaba.fastjson.JSONException;

        $r18 = (com.alibaba.fastjson2.JSONException) $r10;

        $r13 = virtualinvoke $r18.<com.alibaba.fastjson2.JSONException: java.lang.String getMessage()>();

        specialinvoke $r16.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r14);

        throw $r16;

        catch com.alibaba.fastjson2.JSONException from label3 to label5 with label6;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>`, let's break down the data flow and conditions step by step:

### Step-by-Step Analysis:

1. **Parameter Initialization:**
   - `r0` is initialized with `p1` (the first parameter, a `java.lang.String`).
   - `r5` is initialized with `p2` (the second parameter, a `java.lang.reflect.Type`).
   - `r2` is initialized with `p3` (the third parameter, an array of `com.alibaba.fastjson.parser.Feature`).

2. **Null and Empty Check:**
   - If `r0` (p1) is `null` or empty, the method returns `null`. This is a conditional flow based on the value of `p1`.

3. **ObjectReaderProvider and JSONReader Context:**
   - `ObjectReaderProvider` is obtained and used to create a `JSONReader$Context` with `p3`.

4. **JSONReader Creation:**
   - A `JSONReader` is created using `p1` and the context.

5. **ObjectReader and Object Reading:**
   - An `ObjectReader` is obtained using `p2`.
   - The `ObjectReader` reads an object, which is stored in `$r7`.

6. **End Check and Exception Handling:**
   - If `$r7` is `null`, the method proceeds to check if the JSON input has ended.
   - If not, an exception is thrown.

7. **Return Value:**
   - The method returns `$r7`, which is the object read by the `ObjectReader`.

### Data Flow Summary:

- **p1 (String) is used to create a JSONReader**: This is a direct usage of `p1` to initialize a `JSONReader`.
- **p2 (Type) is used to get an ObjectReader**: `p2` is used to determine the type of object to be read.
- **p3 (Feature[]) is used in JSONReader context creation**: `p3` is part of the context setup for the `JSONReader`.

### Propagation Rules:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>parseObject</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
        <ParamType>java.lang.reflect.Type</ParamType>
        <ParamType>com.alibaba.fastjson.parser.Feature[]</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>p1 != null && !p1.isEmpty()</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (`java.lang.String`) is used to create a `JSONReader` and influences the return value.
    - The flow is conditional on `p1` not being `null` and not empty.
    </Comment>
</PropagationRule>
```

This XML representation captures the main data flow from the input parameters to the return value, focusing on the conditions under which the flow occurs.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSONObject: java.util.Map getInnerMap()>
Related methods: 1
caller is : <com.jfinal.core.paragetter.KvGetter: com.jfinal.kit.Kv 'to'(java.lang.String)>
callee is : <com.alibaba.fastjson.JSONObject: java.util.Map getInnerMap()>

Method: <com.alibaba.fastjson.JSONObject: java.util.Map getInnerMap()>
    public java.util.Map getInnerMap()
    {
        com.alibaba.fastjson.JSONObject r0;
        java.util.Map $r1;

        r0 := @this: com.alibaba.fastjson.JSONObject;

        $r1 = r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>;

        return $r1;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSONObject: java.util.Map getInnerMap()>`, let's break down the steps and determine the data flow:

1. **Parameter and Object Reference Analysis:**
   - The method `getInnerMap()` is a non-static method, so it uses `this` to refer to the current instance of `com.alibaba.fastjson.JSONObject`.
   - There are no parameters (`p1`, `p2`, etc.) for this method.

2. **Field Access:**
   - The method accesses the field `map` of the current object (`this`). This is represented as `this.map`.

3. **Return Value:**
   - The method returns the value of `this.map`, which is a `java.util.Map`.

4. **Data Flow Summary:**
   - The data flow involves retrieving the `map` field from the current object instance (`this`) and returning it. There is no propagation from parameters since there are no parameters.

5. **Propagation Rule:**
   - Since there are no parameters, the data flow is from `this.map` to the return value.

Based on the above analysis, here is the XML summary for the method:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>getInnerMap</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <!-- No parameters for this method -->
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>this.map</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `this.map` is transferred into the return value.
    - The flow is no condition
    </Comment>
</PropagationRule>
```

This XML captures the data flow from the field `this.map` to the return value of the method, with no conditions affecting the flow.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.Object parse(java.lang.String)>
Related methods: 222
caller is : <com.alibaba.dubbo.rpc.support.MockInvoker: java.lang.Object parseMockValue(java.lang.String,java.lang.reflect.Type[])>
callee is : <com.alibaba.fastjson.JSON: java.lang.Object parse(java.lang.String)>

Method: <com.alibaba.fastjson.JSON: java.lang.Object parse(java.lang.String)>
    public static java.lang.Object parse(java.lang.String)
    {
        java.lang.Throwable $r10, $r11;
        com.alibaba.fastjson.parser.Feature[] $r2;
        int $i0;
        java.lang.String r0, $r6, $r9;
        com.alibaba.fastjson2.JSONReader $r4;
        boolean $z0, $z1, $z2, $z3;
        com.alibaba.fastjson.JSONException $r5, $r8;
        java.lang.Exception $r7;
        java.lang.Object r12, r13;
        com.alibaba.fastjson2.JSONReader$Context $r3;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label01;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label02;

     label01:
        return null;

     label02:
        $r1 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        $i0 = <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE>;

        $r2 = newarray (com.alibaba.fastjson.parser.Feature)[0];

        $r3 = staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONReader$Context createReadContext(com.alibaba.fastjson2.reader.ObjectReaderProvider,int,com.alibaba.fastjson.parser.Feature[])>($r1, $i0, $r2);

     label03:
        $r4 = staticinvoke <com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.JSONReader of(java.lang.String,com.alibaba.fastjson2.JSONReader$Context)>(r0, $r3);

     label04:
        $z1 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: boolean isObject()>();

        if $z1 == 0 goto label05;

        $z2 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: boolean isSupportAutoType(long)>(0L);

        if $z2 != 0 goto label05;

        r12 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: java.lang.Object read(java.lang.Class)>(class "Lcom/alibaba/fastjson/JSONObject;");

        goto label06;

     label05:
        r12 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: java.lang.Object readAny()>();

     label06:
        $z3 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: boolean isEnd()>();

        if $z3 != 0 goto label07;

        $r5 = new com.alibaba.fastjson.JSONException;

        $r6 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: java.lang.String info(java.lang.String)>("input not end");

        specialinvoke $r5.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label07:
        r13 = r12;

     label08:
        if $r4 == null goto label09;

        virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: void close()>();

     label09:
        return r13;

     label10:
        $r11 := @caughtexception;

        if $r4 == null goto label14;

     label11:
        virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: void close()>();

     label12:
        goto label14;

     label13:
        $r10 := @caughtexception;

        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label14:
        throw $r11;

     label15:
        $r7 := @caughtexception;

        $r8 = new com.alibaba.fastjson.JSONException;

        $r9 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r8.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r7);

        throw $r8;

        catch java.lang.Throwable from label04 to label08 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Exception from label03 to label09 with label15;
        catch java.lang.Exception from label10 to label15 with label15;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.Object parse(java.lang.String)>`, we need to examine the data flow and conditions within the method. Here's a step-by-step breakdown:

1. **Parameter Handling**:
   - The method takes a single parameter `p1` (a `java.lang.String`).
   - The parameter `p1` is assigned to the local variable `r0`.

2. **Null and Empty Check**:
   - If `r0` (which is `p1`) is `null`, the method returns `null`.
   - If `r0.isEmpty()` returns `true`, the method also returns `null`.

3. **JSON Parsing**:
   - The method proceeds to parse the JSON string using `com.alibaba.fastjson2.JSONReader`.
   - The `JSONReader` is created with `r0` and a context.
   - Depending on the content of the JSON, it either reads an object of type `JSONObject` or reads any type using `readAny()`.

4. **Return Value**:
   - The result of the parsing (`r12`) is assigned to `r13`, which is then returned.

5. **Exception Handling**:
   - The method includes exception handling for `Throwable` and `Exception`, wrapping them in `JSONException` if necessary.

6. **Data Flow**:
   - The input parameter `p1` flows into the `JSONReader` and influences the returned object `r13`.

Based on this analysis, the data flow from `p1` to the return value is direct, and there are no additional conditions affecting this flow beyond the initial null and empty checks.

Here's the XML summary of the data flow:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>parse</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>p1 != null && !p1.isEmpty()</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (the input string) is parsed and influences the return value.
    - The flow is conditional on `p1` not being `null` and not being empty.
    </Comment>
</PropagationRule>
```

This XML captures the essence of the method's data flow, highlighting the conditions under which the input parameter influences the return value.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig getGlobalInstance()>
Related methods: 5
caller is : <com.jfinal.json.FastJsonFactory: void removeRecordSerializer()>
callee is : <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig getGlobalInstance()>

Method: <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig getGlobalInstance()>
    public static com.alibaba.fastjson.serializer.SerializeConfig getGlobalInstance()
    {
        com.alibaba.fastjson.serializer.SerializeConfig $r0;

        $r0 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global>;

        return $r0;
    }

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson2.PropertyNamingStrategy $r3;
        com.alibaba.fastjson.serializer.SerializeConfig $r0, $r1;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r2;
        boolean $z0;

        $r0 = new com.alibaba.fastjson.serializer.SerializeConfig;

        specialinvoke $r0.<com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>(null);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global> = $r0;

        $r1 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global>;

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig globalInstance> = $r1;

        $r2 = new com.alibaba.fastjson2.writer.ObjectWriterProvider;

        $z0 = <com.alibaba.fastjson.util.TypeUtils: boolean compatibleWithFieldName>;

        if $z0 == 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = <com.alibaba.fastjson2.PropertyNamingStrategy: com.alibaba.fastjson2.PropertyNamingStrategy CamelCase1x>;

     label2:
        specialinvoke $r2.<com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>(com.alibaba.fastjson2.PropertyNamingStrategy)>($r3);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER> = $r2;

        return;
    }

Method: <com.alibaba.fastjson.util.TypeUtils: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        <com.alibaba.fastjson.util.TypeUtils: boolean setAccessibleEnable> = 1;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(256, 0.75F, 1);

        <com.alibaba.fastjson.util.TypeUtils: java.util.concurrent.ConcurrentMap mappings> = $r0;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.serializer.SerializeConfig r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeConfig;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: boolean fieldBased> = 0;

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>(com.alibaba.fastjson2.PropertyNamingStrategy)>
Abstract method
-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig getGlobalInstance()>`, we need to understand the data flow and the context in which this method operates. Let's break down the steps:

### Step-by-Step Analysis:

1. **Method Signature and Return Type**:
   - The method `getGlobalInstance()` is a static method that returns an instance of `com.alibaba.fastjson.serializer.SerializeConfig`.

2. **Field Access**:
   - The method accesses the static field `global` of the class `SerializeConfig` and assigns it to the local variable `$r0`.

3. **Return Statement**:
   - The method returns the value of `$r0`, which is the static field `global`.

4. **Static Initialization Context**:
   - From the `<clinit>` method of `SerializeConfig`, we see that the static field `global` is initialized with a new instance of `SerializeConfig` during class loading. This instance is assigned to both `global` and `globalInstance`.

5. **Data Flow**:
   - There is a direct data flow from the static field `global` to the return value of the method `getGlobalInstance()`.

6. **Related Methods**:
   - The method `<com.alibaba.fastjson.serializer.SerializeConfig: void <clinit>()>` initializes the static fields, ensuring that `global` is properly set before any instance of `SerializeConfig` is returned by `getGlobalInstance()`.

### Data Flow Summary:

- **InArguments**: There are no input arguments for this method since it is a static method with no parameters.
- **OutArguments**: The return value of the method is directly from the static field `global`.

### XML Summary:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.serializer</Value>
        </NamespaceName>
        <ClassName>
            <Value>SerializeConfig</Value>
        </ClassName>
        <FunctionName>
            <Value>getGlobalInstance</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <!-- No parameters for this method -->
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>N/A</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that the static field `global` is transferred into the return value.
    - The flow is no condition as it directly returns the static field.
    </Comment>
</PropagationRule>
```

### Conclusion:

The method `getGlobalInstance()` provides a global instance of `SerializeConfig` by returning the static field `global`. The data flow is straightforward, with no conditions affecting the flow, and it directly returns the pre-initialized static instance.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.serializer.SerializeConfig: boolean put(java.lang.reflect.Type,com.alibaba.fastjson.serializer.ObjectSerializer)>
Related methods: 6
caller is : <com.jfinal.json.FastJsonFactory: void removeRecordSerializer()>
callee is : <com.alibaba.fastjson.serializer.SerializeConfig: boolean put(java.lang.reflect.Type,com.alibaba.fastjson.serializer.ObjectSerializer)>

Method: <com.alibaba.fastjson.serializer.SerializeConfig: boolean put(java.lang.reflect.Type,com.alibaba.fastjson.serializer.ObjectSerializer)>
    public boolean put(java.lang.reflect.Type, com.alibaba.fastjson.serializer.ObjectSerializer)
    {
        com.alibaba.fastjson2.writer.ObjectWriter $r4;
        com.alibaba.fastjson.serializer.SerializeConfig r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r5;
        com.alibaba.fastjson.serializer.SerializeConfig$ObjectSerializerAdapter $r2;
        com.alibaba.fastjson.serializer.ObjectSerializer r3;
        java.lang.reflect.Type r1;
        boolean $z0, $z1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeConfig;

        r1 := @parameter0: java.lang.reflect.Type;

        r3 := @parameter1: com.alibaba.fastjson.serializer.ObjectSerializer;

        r5 = r0.<com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider provider>;

        if r5 != null goto label1;

        r5 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

     label1:
        $r2 = new com.alibaba.fastjson.serializer.SerializeConfig$ObjectSerializerAdapter;

        specialinvoke $r2.<com.alibaba.fastjson.serializer.SerializeConfig$ObjectSerializerAdapter: void <init>(com.alibaba.fastjson.serializer.ObjectSerializer)>(r3);

        $z0 = r0.<com.alibaba.fastjson.serializer.SerializeConfig: boolean fieldBased>;

        $r4 = virtualinvoke r5.<com.alibaba.fastjson2.writer.ObjectWriterProvider: com.alibaba.fastjson2.writer.ObjectWriter register(java.lang.reflect.Type,com.alibaba.fastjson2.writer.ObjectWriter,boolean)>(r1, $r2, $z0);

        if $r4 != null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson2.PropertyNamingStrategy $r3;
        com.alibaba.fastjson.serializer.SerializeConfig $r0, $r1;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r2;
        boolean $z0;

        $r0 = new com.alibaba.fastjson.serializer.SerializeConfig;

        specialinvoke $r0.<com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>(null);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global> = $r0;

        $r1 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global>;

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig globalInstance> = $r1;

        $r2 = new com.alibaba.fastjson2.writer.ObjectWriterProvider;

        $z0 = <com.alibaba.fastjson.util.TypeUtils: boolean compatibleWithFieldName>;

        if $z0 == 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = <com.alibaba.fastjson2.PropertyNamingStrategy: com.alibaba.fastjson2.PropertyNamingStrategy CamelCase1x>;

     label2:
        specialinvoke $r2.<com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>(com.alibaba.fastjson2.PropertyNamingStrategy)>($r3);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER> = $r2;

        return;
    }

Method: <com.alibaba.fastjson.util.TypeUtils: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        <com.alibaba.fastjson.util.TypeUtils: boolean setAccessibleEnable> = 1;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(256, 0.75F, 1);

        <com.alibaba.fastjson.util.TypeUtils: java.util.concurrent.ConcurrentMap mappings> = $r0;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.serializer.SerializeConfig r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeConfig;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: boolean fieldBased> = 0;

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>(com.alibaba.fastjson2.PropertyNamingStrategy)>
Abstract method
Method: <com.alibaba.fastjson.serializer.SerializeConfig$ObjectSerializerAdapter: void <init>(com.alibaba.fastjson.serializer.ObjectSerializer)>
    public void <init>(com.alibaba.fastjson.serializer.ObjectSerializer)
    {
        com.alibaba.fastjson.serializer.SerializeConfig$ObjectSerializerAdapter r0;
        com.alibaba.fastjson.serializer.ObjectSerializer r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeConfig$ObjectSerializerAdapter;

        r1 := @parameter0: com.alibaba.fastjson.serializer.ObjectSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.serializer.SerializeConfig$ObjectSerializerAdapter: com.alibaba.fastjson.serializer.ObjectSerializer serializer> = r1;

        return;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.serializer.SerializeConfig: boolean put(java.lang.reflect.Type,com.alibaba.fastjson.serializer.ObjectSerializer)>`, we need to examine the data flow and conditions within the method. Let's break down the steps:

### Step-by-Step Analysis

1. **Initialization and Parameter Assignment:**
   - `r0` is assigned `@this`, representing the current instance of `SerializeConfig`.
   - `r1` is assigned `@parameter0`, representing the first parameter of type `java.lang.reflect.Type`.
   - `r3` is assigned `@parameter1`, representing the second parameter of type `com.alibaba.fastjson.serializer.ObjectSerializer`.

2. **Provider Assignment:**
   - `r5` is assigned the `provider` field of `this` (`r0`). If `r5` is `null`, it is assigned a default provider.

3. **Object Creation and Initialization:**
   - `$r2` is a new instance of `SerializeConfig$ObjectSerializerAdapter`, initialized with `r3` (the second parameter).

4. **Method Invocation:**
   - `virtualinvoke` on `r5` with `r1`, `$r2`, and `$z0` as arguments. This invocation registers the type and serializer, returning an `ObjectWriter` (`$r4`).

5. **Conditional Check and Return:**
   - If `$r4` is `null`, `$z1` is set to `1` (true), otherwise `0` (false).
   - The method returns `$z1`.

### Data Flow Summary

- **Data Flow from Parameters:**
  - `p1` (`r1`) is used as an argument in the `register` method call.
  - `p2` (`r3`) is encapsulated in `$r2` and then used in the `register` method call.

- **Return Value:**
  - The return value (`$z1`) is determined by the result of the `register` method call.

### XML Summary

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.serializer</Value>
        </NamespaceName>
        <ClassName>
            <Value>SerializeConfig</Value>
        </ClassName>
        <FunctionName>
            <Value>put</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.reflect.Type</ParamType>
        <ParamType>com.alibaba.fastjson.serializer.ObjectSerializer</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (`r1`) is used in the `register` method call, affecting the return value.
    - The flow is no condition
    </Comment>
</PropagationRule>

<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.serializer</Value>
        </NamespaceName>
        <ClassName>
            <Value>SerializeConfig</Value>
        </ClassName>
        <FunctionName>
            <Value>put</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.reflect.Type</ParamType>
        <ParamType>com.alibaba.fastjson.serializer.ObjectSerializer</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>1</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p2` (`r3`) is encapsulated in `$r2` and used in the `register` method call, affecting the return value.
    - The flow is no condition
    </Comment>
</PropagationRule>
```

### Conclusion

The method primarily involves the registration of a type and serializer, with the return value indicating the success of this operation. The data flow from both parameters (`p1` and `p2`) influences the return value, but there are no complex conditions affecting this flow.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSONObject: void <init>()>
Related methods: 3
caller is : <cn.com.antcloud.api.common.BaseGwClient: cn.com.antcloud.api.common.BaseClientResponse handleHmacSHAResponse(org.apache.http.HttpResponse,java.lang.String)>
callee is : <com.alibaba.fastjson.JSONObject: void <init>()>

Method: <com.alibaba.fastjson.JSONObject: void <init>()>
    public void <init>()
    {
        com.alibaba.fastjson.JSONObject r0;

        r0 := @this: com.alibaba.fastjson.JSONObject;

        specialinvoke r0.<com.alibaba.fastjson.JSONObject: void <init>(int,boolean)>(16, 0);

        return;
    }

Method: <com.alibaba.fastjson.JSONObject: void <init>(int,boolean)>
    public void <init>(int, boolean)
    {
        java.util.LinkedHashMap $r2;
        int i0;
        com.alibaba.fastjson.JSONObject r0;
        java.util.HashMap $r1;
        boolean z0;

        r0 := @this: com.alibaba.fastjson.JSONObject;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.alibaba.fastjson.JSON: void <init>()>();

        if z0 == 0 goto label1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(int)>(i0);

        r0.<com.alibaba.fastjson.JSONObject: java.util.Map map> = $r2;

        goto label2;

     label1:
        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0);

        r0.<com.alibaba.fastjson.JSONObject: java.util.Map map> = $r1;

     label2:
        return;
    }

Method: <com.alibaba.fastjson.JSON: void <init>()>
    public void <init>()
    {
        com.alibaba.fastjson.JSON r0;

        r0 := @this: com.alibaba.fastjson.JSON;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSONObject: void <init>()>`, we need to consider the data flow and the related methods involved in the initialization process. Let's break down the steps:

### Step 1: Analyze `<com.alibaba.fastjson.JSONObject: void <init>()>`

- The method initializes an instance of `com.alibaba.fastjson.JSONObject`.
- It calls the constructor `<com.alibaba.fastjson.JSONObject: void <init>(int,boolean)>` with parameters `16` and `0`.

### Step 2: Analyze `<com.alibaba.fastjson.JSONObject: void <init>(int,boolean)>`

- This constructor takes two parameters: an integer `i0` and a boolean `z0`.
- It first calls `<com.alibaba.fastjson.JSON: void <init>()>`, which initializes the `JSON` superclass.
- Depending on the value of `z0`:
  - If `z0` is `true`, it initializes `this.map` with a `LinkedHashMap` of size `i0`.
  - If `z0` is `false`, it initializes `this.map` with a `HashMap` of size `i0`.

### Step 3: Analyze `<com.alibaba.fastjson.JSON: void <init>()>`

- This method initializes an instance of `com.alibaba.fastjson.JSON`.
- It calls the constructor `<java.lang.Object: void <init>()>`, which is the default constructor for all Java objects.

### Data Flow Summary

- The primary data flow involves the initialization of `this.map` within the `JSONObject` class, which is influenced by the boolean parameter `z0` and the integer parameter `i0`.
- There is no data flow involving parameters or return values since this is a constructor and does not take external input or produce output.

### XML Summary

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>&lt;init&gt;</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <!-- No parameters for this constructor -->
    </Parameters>
    <HasPropagation>false</HasPropagation>
    <Comment>
    - The constructor initializes the JSONObject instance.
    - It sets up the internal map based on the boolean parameter `z0` and integer parameter `i0` from the overloaded constructor.
    - There is no parameter or return data flow involved.
    </Comment>
</PropagationRule>
```

This summary captures the essence of the constructor's operation, focusing on the initialization logic and the absence of external data flow.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
Related methods: 1
caller is : <com.alibaba.dubbo.common.serialize.fastjson.FastJsonObjectOutput: void writeObject(java.lang.Object)>
callee is : <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>

Method: <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
    public final void write(java.lang.Object)
    {
        com.alibaba.fastjson.serializer.JSONSerializer r0;
        java.lang.Object r1;
        com.alibaba.fastjson2.JSONWriter $r2;

        r0 := @this: com.alibaba.fastjson.serializer.JSONSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.alibaba.fastjson.serializer.JSONSerializer: com.alibaba.fastjson2.JSONWriter raw>;

        virtualinvoke $r2.<com.alibaba.fastjson2.JSONWriter: void writeAny(java.lang.Object)>(r1);

        return;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>`, let's break down the data flow and summarize it step by step:

1. **Parameter and Object Reference Initialization:**
   - `r0` is assigned the reference to `this`, which is the current instance of `com.alibaba.fastjson.serializer.JSONSerializer`.
   - `r1` is assigned the reference to `p1`, which is the parameter `java.lang.Object`.

2. **Field Access:**
   - `$r2` is assigned the value of `this.raw`, which is a field of type `com.alibaba.fastjson2.JSONWriter` within the `JSONSerializer` class.

3. **Method Invocation:**
   - The method `writeAny` is invoked on `$r2` with `r1` as the argument. This indicates a data flow from `p1` to the method `writeAny` of `this.raw`.

4. **Data Flow Summary:**
   - The data flow from `p1` (`java.lang.Object`) is directly passed to the `writeAny` method of the `JSONWriter` instance (`this.raw`). There is no conditional logic affecting this flow, and no data is returned from the method.

Based on the above analysis, the data flow can be summarized as follows:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.serializer</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONSerializer</Value>
        </ClassName>
        <FunctionName>
            <Value>write</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0</InArguments>
    <OutArguments>this.raw.writeAny</OutArguments>
    <Comment>
    - The data flow shows that `p1` is transferred into `this.raw.writeAny`.
    - The flow is no condition.
    </Comment>
</PropagationRule>
```

This XML summary captures the data flow from the parameter `p1` to the `writeAny` method of the `JSONWriter` instance, with no conditional logic affecting the flow.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSONObject: java.util.Set entrySet()>
Related methods: 1
caller is : <com.jdcloud.sdk.utils.ConvertUtils: com.google.api.client.http.ByteArrayContent formatRequestBody(java.lang.String,com.jdcloud.sdk.service.JdcloudRequest,java.lang.String)>
callee is : <com.alibaba.fastjson.JSONObject: java.util.Set entrySet()>

Method: <com.alibaba.fastjson.JSONObject: java.util.Set entrySet()>
    public java.util.Set entrySet()
    {
        java.util.Set $r2;
        com.alibaba.fastjson.JSONObject r0;
        java.util.Map $r1;

        r0 := @this: com.alibaba.fastjson.JSONObject;

        $r1 = r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        return $r2;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSONObject: java.util.Set entrySet()>`, let's break down the steps:

1. **Parameter and Object Reference Analysis**:
   - The method `entrySet()` does not take any parameters, so there are no `p1`, `p2`, or `p3` to consider.
   - The method operates on the current object instance `this`, which is of type `com.alibaba.fastjson.JSONObject`.

2. **Field Access**:
   - The method accesses the field `map` of the current object `this`, which is of type `java.util.Map`.

3. **Data Flow**:
   - The method retrieves the `entrySet()` from the `map` field of `this` and returns it.
   - The data flow involves the field `this.map` being accessed to call `entrySet()`, and the result is returned.

4. **Propagation and Conditions**:
   - There is a direct data flow from `this.map.entrySet()` to the return value.
   - There are no conditions affecting this data flow.

Based on the above analysis, the XML summary for the method is as follows:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>entrySet</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <!-- No parameters for this method -->
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>this.map.entrySet</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `this.map.entrySet()` is transferred into the return value.
    - The flow is no condition
    </Comment>
</PropagationRule>
```

This XML captures the data flow from the `entrySet()` method of the `map` field in `this` to the return value, with no conditions affecting the flow.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.String toJSONStringWithDateFormat(java.lang.Object,java.lang.String,com.alibaba.fastjson.serializer.SerializerFeature[])>
Related methods: 238
caller is : <com.jfinal.json.FastJson: java.lang.String toJson(java.lang.Object)>
callee is : <com.alibaba.fastjson.JSON: java.lang.String toJSONStringWithDateFormat(java.lang.Object,java.lang.String,com.alibaba.fastjson.serializer.SerializerFeature[])>

Method: <com.alibaba.fastjson.JSON: java.lang.String toJSONStringWithDateFormat(java.lang.Object,java.lang.String,com.alibaba.fastjson.serializer.SerializerFeature[])>
    public static transient java.lang.String toJSONStringWithDateFormat(java.lang.Object, java.lang.String, com.alibaba.fastjson.serializer.SerializerFeature[])
    {
        java.lang.Throwable $r9, $r10;
        com.alibaba.fastjson2.JSONWriter $r3;
        com.alibaba.fastjson2.writer.ObjectWriter $r7;
        com.alibaba.fastjson2.JSONWriter$Context $r2;
        com.alibaba.fastjson.serializer.SerializeConfig $r1;
        com.alibaba.fastjson.serializer.SerializerFeature[] r0;
        int $i0;
        java.lang.Object r5;
        java.lang.Class $r6;
        java.lang.String r4, $r8;

        r5 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.String;

        r0 := @parameter2: com.alibaba.fastjson.serializer.SerializerFeature[];

        $r1 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global>;

        $i0 = <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE>;

        $r2 = staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONWriter$Context createWriteContext(com.alibaba.fastjson.serializer.SerializeConfig,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r1, $i0, r0);

        $r3 = staticinvoke <com.alibaba.fastjson2.JSONWriter: com.alibaba.fastjson2.JSONWriter of(com.alibaba.fastjson2.JSONWriter$Context)>($r2);

     label01:
        virtualinvoke $r2.<com.alibaba.fastjson2.JSONWriter$Context: void setDateFormat(java.lang.String)>(r4);

        if r5 != null goto label02;

        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void writeNull()>();

        goto label03;

     label02:
        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void setRootObject(java.lang.Object)>(r5);

        $r6 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r2.<com.alibaba.fastjson2.JSONWriter$Context: com.alibaba.fastjson2.writer.ObjectWriter getObjectWriter(java.lang.Class)>($r6);

        interfaceinvoke $r7.<com.alibaba.fastjson2.writer.ObjectWriter: void write(com.alibaba.fastjson2.JSONWriter,java.lang.Object,java.lang.Object,java.lang.reflect.Type,long)>($r3, r5, null, null, 0L);

     label03:
        $r8 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

     label04:
        if $r3 == null goto label05;

        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void close()>();

     label05:
        return $r8;

     label06:
        $r10 := @caughtexception;

        if $r3 == null goto label10;

     label07:
        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void close()>();

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label04 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson2.PropertyNamingStrategy $r3;
        com.alibaba.fastjson.serializer.SerializeConfig $r0, $r1;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r2;
        boolean $z0;

        $r0 = new com.alibaba.fastjson.serializer.SerializeConfig;

        specialinvoke $r0.<com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>(null);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global> = $r0;

        $r1 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global>;

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig globalInstance> = $r1;

        $r2 = new com.alibaba.fastjson2.writer.ObjectWriterProvider;

        $z0 = <com.alibaba.fastjson.util.TypeUtils: boolean compatibleWithFieldName>;

        if $z0 == 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = <com.alibaba.fastjson2.PropertyNamingStrategy: com.alibaba.fastjson2.PropertyNamingStrategy CamelCase1x>;

     label2:
        specialinvoke $r2.<com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>(com.alibaba.fastjson2.PropertyNamingStrategy)>($r3);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER> = $r2;

        return;
    }

Method: <com.alibaba.fastjson.util.TypeUtils: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        <com.alibaba.fastjson.util.TypeUtils: boolean setAccessibleEnable> = 1;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(256, 0.75F, 1);

        <com.alibaba.fastjson.util.TypeUtils: java.util.concurrent.ConcurrentMap mappings> = $r0;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.serializer.SerializeConfig r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeConfig;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: boolean fieldBased> = 0;

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>(com.alibaba.fastjson2.PropertyNamingStrategy)>
Abstract method
Method: <com.alibaba.fastjson2.JSONWriter$Context: com.alibaba.fastjson2.writer.ObjectWriter getObjectWriter(java.lang.Class)>
Abstract method
Method: <com.alibaba.fastjson2.JSONWriter$Context: void setDateFormat(java.lang.String)>
Abstract method
Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.String toJSONStringWithDateFormat(java.lang.Object,java.lang.String,com.alibaba.fastjson.serializer.SerializerFeature[])>`, let's break down the steps and identify the data flows:

### Step-by-Step Analysis:

1. **Parameter Initialization:**
   - `r5` is initialized with `p1` (the first parameter: `java.lang.Object`).
   - `r4` is initialized with `p2` (the second parameter: `java.lang.String`).
   - `r0` is initialized with `p3` (the third parameter: `com.alibaba.fastjson.serializer.SerializerFeature[]`).

2. **Context Creation:**
   - `$r2` is created using a static method call with `$r1`, `$i0`, and `r0`. This involves `p3`, but no direct data flow to fields or return values.

3. **Setting Date Format:**
   - The method `setDateFormat` is called on `$r2` with `r4` (`p2`). This indicates a data flow from `p2` to `$r2`.

4. **Handling `r5` (p1):**
   - If `r5` is not null, several operations are performed:
     - `setRootObject` is called on `$r3` with `r5` (`p1`), indicating a data flow from `p1` to `$r3`.
     - `getObjectWriter` is called on `$r2` with the class of `r5`, but this does not directly affect the data flow summary.
     - `write` is called on `$r7` with `$r3` and `r5`, further indicating a data flow from `p1` to `$r3`.

5. **Return Value:**
   - `$r8` is assigned the result of `toString` on `$r3`, which is then returned. This indicates a data flow from `$r3` to the return value.

6. **Exception Handling:**
   - The method includes exception handling, but this does not affect the primary data flow analysis.

### Data Flow Summary:

Based on the above analysis, the primary data flows are:

- `p1` (`java.lang.Object`) flows into `$r3` and subsequently into the return value.
- `p2` (`java.lang.String`) flows into `$r2` via `setDateFormat`.

### XML Summary:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>toJSONStringWithDateFormat</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
        <ParamType>java.lang.String</ParamType>
        <ParamType>com.alibaba.fastjson.serializer.SerializerFeature[]</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>p1 != null</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` is transferred into `$r3` and then into the return value.
    - The flow is conditional on `p1` not being null.
    </Comment>
</PropagationRule>

<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>toJSONStringWithDateFormat</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
        <ParamType>java.lang.String</ParamType>
        <ParamType>com.alibaba.fastjson.serializer.SerializerFeature[]</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>1</InArguments>
    <OutArguments>$r2</OutArguments>
    <Comment>
    - The data flow shows that `p2` is transferred into `$r2` via `setDateFormat`.
    - The flow has no condition.
    </Comment>
</PropagationRule>
```

This XML summary captures the essential data flows from the parameters to the return value and other relevant objects within the method.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.parser.ParserConfig: com.alibaba.fastjson.parser.ParserConfig getGlobalInstance()>
Related methods: 4
caller is : <com.jfinal.json.FastJson: void setSafeMode(boolean)>
callee is : <com.alibaba.fastjson.parser.ParserConfig: com.alibaba.fastjson.parser.ParserConfig getGlobalInstance()>

Method: <com.alibaba.fastjson.parser.ParserConfig: com.alibaba.fastjson.parser.ParserConfig getGlobalInstance()>
    public static com.alibaba.fastjson.parser.ParserConfig getGlobalInstance()
    {
        com.alibaba.fastjson.parser.ParserConfig $r0;

        $r0 = <com.alibaba.fastjson.parser.ParserConfig: com.alibaba.fastjson.parser.ParserConfig global>;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.ParserConfig: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r1;
        com.alibaba.fastjson.parser.ParserConfig $r0;

        $r0 = new com.alibaba.fastjson.parser.ParserConfig;

        $r1 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        specialinvoke $r0.<com.alibaba.fastjson.parser.ParserConfig: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider,boolean)>($r1, 0);

        <com.alibaba.fastjson.parser.ParserConfig: com.alibaba.fastjson.parser.ParserConfig global> = $r0;

        return;
    }

Method: <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>
Abstract method
Method: <com.alibaba.fastjson.parser.ParserConfig: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider,boolean)>
    void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider, boolean)
    {
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;
        com.alibaba.fastjson.parser.ParserConfig r0;
        boolean z0;

        r0 := @this: com.alibaba.fastjson.parser.ParserConfig;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.parser.ParserConfig: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        r0.<com.alibaba.fastjson.parser.ParserConfig: boolean fieldBase> = z0;

        return;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.parser.ParserConfig: com.alibaba.fastjson.parser.ParserConfig getGlobalInstance()>`, we need to understand the data flow and any conditions involved. Let's break down the steps:

### Step-by-Step Analysis

1. **Method Signature and Return Type**:
   - The method `getGlobalInstance()` is a static method that returns an instance of `com.alibaba.fastjson.parser.ParserConfig`.

2. **Field Access**:
   - The method accesses a static field `<com.alibaba.fastjson.parser.ParserConfig: com.alibaba.fastjson.parser.ParserConfig global>` and assigns it to the local variable `$r0`.

3. **Return Statement**:
   - The method returns the value of `$r0`, which is the static field `global`.

4. **Static Initialization Block**:
   - The static field `global` is initialized in the static initializer `<clinit>()` method. It is assigned a new instance of `ParserConfig` created with a specific constructor.

5. **Constructor Details**:
   - The constructor `<init>(com.alibaba.fastjson2.reader.ObjectReaderProvider, boolean)` initializes the `ParserConfig` instance with two parameters: an `ObjectReaderProvider` and a boolean value. These are assigned to the fields `provider` and `fieldBase` of the `ParserConfig` instance.

6. **Data Flow**:
   - There is no parameter input to the `getGlobalInstance()` method, and it directly returns the static field `global`. Therefore, there is no parameter-to-field or parameter-to-return data flow.

7. **Condition**:
   - There are no conditional statements within the `getGlobalInstance()` method affecting the data flow.

### XML Summary

Given the analysis, the method does not involve any parameter data flow, and it simply returns a static field. Here is the XML summary:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.parser</Value>
        </NamespaceName>
        <ClassName>
            <Value>ParserConfig</Value>
        </ClassName>
        <FunctionName>
            <Value>getGlobalInstance</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <!-- No parameters for this method -->
    </Parameters>
    <HasPropagation>false</HasPropagation>
    <Comment>
    - The method returns a static field 'global' of type 'com.alibaba.fastjson.parser.ParserConfig'.
    - There is no parameter data flow as the method does not take any parameters.
    </Comment>
</PropagationRule>
```

This XML summary captures the essence of the method's behavior, indicating that it returns a static field without involving any parameter data flow.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.parser.ParserConfig: void setSafeMode(boolean)>
Related methods: 2
caller is : <com.jfinal.json.FastJson: void setSafeMode(boolean)>
callee is : <com.alibaba.fastjson.parser.ParserConfig: void setSafeMode(boolean)>

Method: <com.alibaba.fastjson.parser.ParserConfig: void setSafeMode(boolean)>
    public void setSafeMode(boolean)
    {
        java.lang.Throwable $r3;
        com.alibaba.fastjson2.JSONException $r2;
        boolean z0, $z1;
        com.alibaba.fastjson.parser.ParserConfig r1;

        r1 := @this: com.alibaba.fastjson.parser.ParserConfig;

        z0 := @parameter0: boolean;

        $z1 = <com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean SAFE_MODE>;

        if z0 == $z1 goto label1;

        $r2 = new com.alibaba.fastjson2.JSONException;

        specialinvoke $r2.<com.alibaba.fastjson2.JSONException: void <init>(java.lang.String)>("not support operation");

        $r3 = (java.lang.Throwable) $r2;

        throw $r3;

     label1:
        return;
    }

Method: <com.alibaba.fastjson2.JSONException: void <init>(java.lang.String)>
Abstract method
-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.parser.ParserConfig: void setSafeMode(boolean)>`, we need to follow these steps:

1. **Parameter and Object Reference Identification**:
   - `p1` represents the boolean parameter passed to the method.
   - `this` refers to the current instance of `com.alibaba.fastjson.parser.ParserConfig`.

2. **Data Flow Analysis**:
   - The method checks if the parameter `p1` (denoted as `z0` in the code) is equal to a static boolean field `SAFE_MODE` from `com.alibaba.fastjson2.reader.ObjectReaderProvider`.
   - If `p1` is not equal to `SAFE_MODE`, it throws a `com.alibaba.fastjson2.JSONException` with the message "not support operation".
   - There is no data flow from `p1` to any fields of `this` or any return value, as the method is void and primarily performs a conditional check followed by a potential exception throw.

3. **Condition Evaluation**:
   - The condition `z0 == $z1` (where `$z1` is `SAFE_MODE`) determines whether the method completes normally or throws an exception.
   - This condition is crucial as it dictates the control flow but does not result in any data propagation to fields or return values.

4. **Propagation Rule Generation**:
   - Since there is no data flow from `p1` to any fields of `this` or any return value, the method does not exhibit data propagation in the traditional sense.
   - The primary action is the conditional check and potential exception throw, which does not involve data propagation to other parameters, fields, or return values.

Given this analysis, the XML representation of the method's data flow is as follows:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.parser</Value>
        </NamespaceName>
        <ClassName>
            <Value>ParserConfig</Value>
        </ClassName>
        <FunctionName>
            <Value>setSafeMode</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>boolean</ParamType>
    </Parameters>
    <HasPropagation>false</HasPropagation>
    <Comment>
    - There is no data flow from parameter p1 to fields of this or return values.
    - The method primarily performs a conditional check and may throw an exception based on the condition.
    </Comment>
</PropagationRule>
```

This XML indicates that the method does not propagate data from its parameter to any fields or return values, and the main operation is a conditional check that could lead to an exception.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializerFeature[])>
Related methods: 239
caller is : <cn.com.antcloud.api.common.GwJsons: java.lang.String toString(com.alibaba.fastjson.JSONObject)>
callee is : <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializerFeature[])>

Method: <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializerFeature[])>
    public static transient java.lang.String toJSONString(java.lang.Object, com.alibaba.fastjson.serializer.SerializerFeature[])
    {
        java.lang.Throwable $r10, $r11, $r13, $r14, $r15;
        com.alibaba.fastjson2.JSONWriter$Context $r2;
        com.alibaba.fastjson.serializer.SerializeConfig $r1;
        com.alibaba.fastjson.serializer.SerializerFeature[] r0;
        int $i0;
        java.lang.String $r7;
        com.alibaba.fastjson2.JSONWriter $r3;
        com.alibaba.fastjson.JSONException $r16, $r17;
        com.alibaba.fastjson2.writer.ObjectWriter $r6;
        java.lang.RuntimeException $r8;
        com.alibaba.fastjson2.JSONException $r18, $r19;
        java.lang.Object r4;
        java.lang.Class $r5;

        r4 := @parameter0: java.lang.Object;

        r0 := @parameter1: com.alibaba.fastjson.serializer.SerializerFeature[];

        $r1 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global>;

        $i0 = <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE>;

        $r2 = staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONWriter$Context createWriteContext(com.alibaba.fastjson.serializer.SerializeConfig,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r1, $i0, r0);

     label01:
        $r3 = staticinvoke <com.alibaba.fastjson2.JSONWriter: com.alibaba.fastjson2.JSONWriter of(com.alibaba.fastjson2.JSONWriter$Context)>($r2);

     label02:
        if r4 != null goto label03;

        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void writeNull()>();

        goto label04;

     label03:
        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void setRootObject(java.lang.Object)>(r4);

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r2.<com.alibaba.fastjson2.JSONWriter$Context: com.alibaba.fastjson2.writer.ObjectWriter getObjectWriter(java.lang.reflect.Type,java.lang.Class)>($r5, $r5);

        interfaceinvoke $r6.<com.alibaba.fastjson2.writer.ObjectWriter: void write(com.alibaba.fastjson2.JSONWriter,java.lang.Object,java.lang.Object,java.lang.reflect.Type,long)>($r3, r4, null, null, 0L);

     label04:
        $r7 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

     label05:
        if $r3 == null goto label06;

        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void close()>();

     label06:
        return $r7;

     label07:
        $r14 := @caughtexception;

        if $r3 == null goto label11;

     label08:
        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void close()>();

     label09:
        goto label11;

     label10:
        $r13 := @caughtexception;

        virtualinvoke $r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

     label11:
        throw $r14;

     label12:
        $r10 := @caughtexception;

        $r18 = (com.alibaba.fastjson2.JSONException) $r10;

        $r11 = virtualinvoke $r18.<com.alibaba.fastjson2.JSONException: java.lang.Throwable getCause()>();

        if $r11 == null goto label13;

        $r19 = (com.alibaba.fastjson2.JSONException) $r10;

        $r15 = virtualinvoke $r19.<com.alibaba.fastjson2.JSONException: java.lang.Throwable getCause()>();

        goto label14;

     label13:
        $r15 = $r10;

     label14:
        $r16 = new com.alibaba.fastjson.JSONException;

        specialinvoke $r16.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>("toJSONString error", $r15);

        throw $r16;

     label15:
        $r8 := @caughtexception;

        $r17 = new com.alibaba.fastjson.JSONException;

        specialinvoke $r17.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>("toJSONString error", $r8);

        throw $r17;

        catch java.lang.Throwable from label02 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch com.alibaba.fastjson2.JSONException from label01 to label06 with label12;
        catch com.alibaba.fastjson2.JSONException from label07 to label12 with label12;
        catch java.lang.RuntimeException from label01 to label06 with label15;
        catch java.lang.RuntimeException from label07 to label12 with label15;
    }

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson2.PropertyNamingStrategy $r3;
        com.alibaba.fastjson.serializer.SerializeConfig $r0, $r1;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r2;
        boolean $z0;

        $r0 = new com.alibaba.fastjson.serializer.SerializeConfig;

        specialinvoke $r0.<com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>(null);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global> = $r0;

        $r1 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig global>;

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson.serializer.SerializeConfig globalInstance> = $r1;

        $r2 = new com.alibaba.fastjson2.writer.ObjectWriterProvider;

        $z0 = <com.alibaba.fastjson.util.TypeUtils: boolean compatibleWithFieldName>;

        if $z0 == 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = <com.alibaba.fastjson2.PropertyNamingStrategy: com.alibaba.fastjson2.PropertyNamingStrategy CamelCase1x>;

     label2:
        specialinvoke $r2.<com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>(com.alibaba.fastjson2.PropertyNamingStrategy)>($r3);

        <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER> = $r2;

        return;
    }

Method: <com.alibaba.fastjson.util.TypeUtils: void <clinit>()>
    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        <com.alibaba.fastjson.util.TypeUtils: boolean setAccessibleEnable> = 1;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(256, 0.75F, 1);

        <com.alibaba.fastjson.util.TypeUtils: java.util.concurrent.ConcurrentMap mappings> = $r0;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.serializer.SerializeConfig r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeConfig;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: boolean fieldBased> = 0;

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>(com.alibaba.fastjson2.PropertyNamingStrategy)>
Abstract method
Method: <com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.alibaba.fastjson.JSONException r0;

        r0 := @this: com.alibaba.fastjson.JSONException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>
    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.String r1;
        com.alibaba.fastjson.JSONException r0;

        r0 := @this: com.alibaba.fastjson.JSONException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

Method: <com.alibaba.fastjson2.JSONWriter$Context: com.alibaba.fastjson2.writer.ObjectWriter getObjectWriter(java.lang.reflect.Type,java.lang.Class)>
Abstract method
Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializerFeature[])>`, we need to examine the data flow and conditions within the method. Here's a step-by-step breakdown:

1. **Parameter Initialization**:
   - `r4` is initialized with `@parameter0: java.lang.Object`, representing `p1`.
   - `r0` is initialized with `@parameter1: com.alibaba.fastjson.serializer.SerializerFeature[]`, representing `p2`.

2. **Static Method Invocation**:
   - `$r2` is created by invoking `createWriteContext` with `$r1`, `$i0`, and `r0`. This involves `p2` but does not directly affect the data flow to the return value or fields.

3. **Conditional Check and Object Handling**:
   - If `r4` (p1) is not null, it is set as the root object of `$r3`, and its class is used to get an `ObjectWriter` from `$r2`.
   - The `ObjectWriter` writes `r4` to `$r3`, indicating a data flow from `p1` to `$r3`.

4. **String Conversion**:
   - `$r7` is obtained by invoking `toString()` on `$r3`, which contains the serialized form of `p1`.

5. **Return Statement**:
   - The method returns `$r7`, which is derived from `p1`.

6. **Exception Handling**:
   - The method includes exception handling for `Throwable` and `JSONException`, but these do not affect the primary data flow from `p1` to the return value.

Based on this analysis, the primary data flow is from `p1` to the return value. There is no conditional data flow affecting this primary path. The `p2` parameter is used in context creation but does not directly influence the data flow to the return value.

Here is the XML summary of the data flow analysis:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>toJSONString</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
        <ParamType>com.alibaba.fastjson.serializer.SerializerFeature[]</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (the object to be serialized) is transferred into the return value as a JSON string.
    - The flow is no condition
    </Comment>
</PropagationRule>
```

This summary captures the essential data flow from the input parameter `p1` to the return value, indicating the serialization process without any conditional branching affecting this flow.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson2.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson2.JSONWriter$Feature[])>
Related methods: 1
caller is : <com.alibaba.druid.support.opds.udf.SqlCodeStat$CodeStatVisitor: java.lang.String toString()>
callee is : <com.alibaba.fastjson2.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson2.JSONWriter$Feature[])>

Method: <com.alibaba.fastjson2.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson2.JSONWriter$Feature[])>
Abstract method
-----------
=== assistant ===
Since the method `<com.alibaba.fastjson2.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson2.JSONWriter$Feature[])>` is abstract, it does not contain any implementation details. Therefore, we cannot directly analyze the data flow within this method itself. However, we can provide a summary based on the fact that it is an abstract method.

### Analysis Steps:

1. **Identify Parameters and Return Type:**
   - The method has two parameters: `p1` of type `java.lang.Object` and `p2` of type `com.alibaba.fastjson2.JSONWriter$Feature[]`.
   - The return type is `java.lang.String`.

2. **Abstract Method Characteristics:**
   - Since the method is abstract, it does not have a body or implementation in the current class.
   - The actual data flow and logic will be defined in the subclasses that implement this abstract method.

3. **Data Flow Summary:**
   - As there is no implementation, there is no direct data flow from parameters to fields, `this`, or return value within this method.
   - The data flow will depend on the specific implementation provided in the subclasses.

### XML Summary:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson2</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>toJSONString</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
        <ParamType>com.alibaba.fastjson2.JSONWriter$Feature[]</ParamType>
    </Parameters>
    <HasPropagation>false</HasPropagation>
    <Comment>
    - This is an abstract method, so there is no direct data flow analysis possible within this method itself.
    - The data flow will be determined by the specific implementations in subclasses.
    </Comment>
</PropagationRule>
```

This summary reflects the nature of the method being abstract and indicates that any data flow analysis would need to be performed on the concrete implementations of this method.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.util.List parseArray(java.lang.String,java.lang.Class)>
Related methods: 223
caller is : <com.alibaba.dubbo.rpc.protocol.dubbo.telnet.InvokeTelnetHandler: java.lang.String telnet(com.alibaba.dubbo.remoting.Channel,java.lang.String)>
callee is : <com.alibaba.fastjson.JSON: java.util.List parseArray(java.lang.String,java.lang.Class)>

Method: <com.alibaba.fastjson.JSON: java.util.List parseArray(java.lang.String,java.lang.Class)>
    public static java.util.List parseArray(java.lang.String, java.lang.Class)
    {
        java.lang.Throwable $r11, $r12, $r15, $r16, r18;
        java.lang.Object[] $r2;
        com.alibaba.fastjson.parser.Feature[] $r5;
        int $i0;
        java.lang.String r0, $r10, $r14;
        com.alibaba.fastjson2.JSONReader $r7;
        boolean $z0, $z1;
        com.alibaba.fastjson.JSONException $r20, $r21;
        com.alibaba.fastjson2.JSONException $r24, $r25;
        java.util.List r17;
        com.alibaba.fastjson2.util.ParameterizedTypeImpl $r19;
        java.lang.reflect.Type $r23;
        java.lang.reflect.Type[] $r22;
        java.lang.Class r3;
        java.lang.Object $r8;
        com.alibaba.fastjson2.JSONReader$Context $r6;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r4;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        if r0 == null goto label01;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label02;

     label01:
        return null;

     label02:
        $r19 = new com.alibaba.fastjson2.util.ParameterizedTypeImpl;

        $r2 = newarray (java.lang.reflect.Type)[1];

        $r2[0] = r3;

        $r22 = (java.lang.reflect.Type[]) $r2;

        specialinvoke $r19.<com.alibaba.fastjson2.util.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type,java.lang.reflect.Type)>($r22, null, class "Ljava/util/List;");

     label03:
        $r4 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        $i0 = <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE>;

        $r5 = newarray (com.alibaba.fastjson.parser.Feature)[0];

        $r6 = staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONReader$Context createReadContext(com.alibaba.fastjson2.reader.ObjectReaderProvider,int,com.alibaba.fastjson.parser.Feature[])>($r4, $i0, $r5);

        $r7 = staticinvoke <com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.JSONReader of(java.lang.String,com.alibaba.fastjson2.JSONReader$Context)>(r0, $r6);

     label04:
        $r23 = (java.lang.reflect.Type) $r19;

        $r8 = virtualinvoke $r7.<com.alibaba.fastjson2.JSONReader: java.lang.Object read(java.lang.reflect.Type)>($r23);

        r17 = (java.util.List) $r8;

        virtualinvoke $r7.<com.alibaba.fastjson2.JSONReader: void handleResolveTasks(java.lang.Object)>(r17);

        $z1 = virtualinvoke $r7.<com.alibaba.fastjson2.JSONReader: boolean isEnd()>();

        if $z1 != 0 goto label05;

        $r20 = new com.alibaba.fastjson.JSONException;

        $r10 = virtualinvoke $r7.<com.alibaba.fastjson2.JSONReader: java.lang.String info(java.lang.String)>("input not end");

        specialinvoke $r20.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String)>($r10);

        throw $r20;

     label05:
        if $r7 == null goto label06;

        virtualinvoke $r7.<com.alibaba.fastjson2.JSONReader: void close()>();

     label06:
        return r17;

     label07:
        $r16 := @caughtexception;

        if $r7 == null goto label11;

     label08:
        virtualinvoke $r7.<com.alibaba.fastjson2.JSONReader: void close()>();

     label09:
        goto label11;

     label10:
        $r15 := @caughtexception;

        virtualinvoke $r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

     label11:
        throw $r16;

     label12:
        $r11 := @caughtexception;

        $r24 = (com.alibaba.fastjson2.JSONException) $r11;

        $r12 = virtualinvoke $r24.<com.alibaba.fastjson2.JSONException: java.lang.Throwable getCause()>();

        r18 = $r12;

        if $r12 != null goto label13;

        r18 = $r11;

     label13:
        $r21 = new com.alibaba.fastjson.JSONException;

        $r25 = (com.alibaba.fastjson2.JSONException) $r11;

        $r14 = virtualinvoke $r25.<com.alibaba.fastjson2.JSONException: java.lang.String getMessage()>();

        specialinvoke $r21.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>($r14, r18);

        throw $r21;

        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch com.alibaba.fastjson2.JSONException from label03 to label06 with label12;
        catch com.alibaba.fastjson2.JSONException from label07 to label12 with label12;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.util.List parseArray(java.lang.String,java.lang.Class)>`, we need to follow the data flow from the parameters to the return value or any field modifications. Let's break down the steps:

1. **Parameter Initialization**:
   - `r0` is initialized with `p1`, which is the first parameter of type `java.lang.String`.
   - `r3` is initialized with `p2`, which is the second parameter of type `java.lang.Class`.

2. **Conditional Check**:
   - The method checks if `r0` (p1) is `null` or empty. If so, it returns `null`. This indicates that if `p1` is `null` or empty, the method does not proceed further.

3. **ParameterizedTypeImpl Initialization**:
   - A new `ParameterizedTypeImpl` object `$r19` is created with `r3` (p2) as part of its type array. This shows a data flow from `p2` to `$r19`.

4. **JSONReader Context and Initialization**:
   - A `JSONReader$Context` `$r6` is created using a static method, and a `JSONReader` `$r7` is initialized with `r0` (p1) and `$r6`. This shows a data flow from `p1` to `$r7`.

5. **Reading and Returning List**:
   - The `JSONReader` `$r7` reads an object of type `$r23` (which is `$r19`) and assigns it to `$r8`. `$r8` is then cast to `java.util.List` and assigned to `r17`.
   - The method returns `r17`, indicating a data flow from `p1` and `p2` to the return value.

6. **Exception Handling**:
   - The method includes exception handling for `JSONException` and `Throwable`, but these do not affect the primary data flow from parameters to return.

Based on this analysis, the data flow can be summarized as follows:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>parseArray</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
        <ParamType>java.lang.Class</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>p1 != null && !p1.isEmpty()</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (`java.lang.String`) and `p2` (`java.lang.Class`) are used to construct the return value `java.util.List`.
    - The flow is conditional on `p1` not being `null` or empty.
    </Comment>
</PropagationRule>
```

This XML summarizes the data flow from the parameters to the return value, considering the conditional checks and transformations within the method.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.serializer.SerializeWriter: void <init>()>
Related methods: 8
caller is : <com.alibaba.dubbo.common.serialize.fastjson.FastJsonObjectOutput: void writeObject(java.lang.Object)>
callee is : <com.alibaba.fastjson.serializer.SerializeWriter: void <init>()>

Method: <com.alibaba.fastjson.serializer.SerializeWriter: void <init>()>
    public void <init>()
    {
        com.alibaba.fastjson2.JSONWriter $r1;
        com.alibaba.fastjson.serializer.SerializeWriter r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter;

        $r1 = staticinvoke <com.alibaba.fastjson2.JSONWriter: com.alibaba.fastjson2.JSONWriter of()>();

        specialinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void <init>(com.alibaba.fastjson2.JSONWriter)>($r1);

        return;
    }

Method: <com.alibaba.fastjson2.JSONWriter: com.alibaba.fastjson2.JSONWriter of()>
Abstract method
Method: <com.alibaba.fastjson.serializer.SerializeWriter: void <init>(com.alibaba.fastjson2.JSONWriter)>
    public void <init>(com.alibaba.fastjson2.JSONWriter)
    {
        com.alibaba.fastjson2.JSONWriter r1;
        com.alibaba.fastjson.serializer.SerializeWriter r0;
        com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper $r2, $r3, $r4, $r5, $r6;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter;

        r1 := @parameter0: com.alibaba.fastjson2.JSONWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.serializer.SerializeWriter: com.alibaba.fastjson2.JSONWriter raw> = r1;

        $r2 = new com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper;

        specialinvoke $r2.<com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>(r0);

        r0.<com.alibaba.fastjson.serializer.SerializeWriter: com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper propertyFilters> = $r2;

        $r3 = new com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper;

        specialinvoke $r3.<com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>(r0);

        r0.<com.alibaba.fastjson.serializer.SerializeWriter: com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper valueFilters> = $r3;

        $r4 = new com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper;

        specialinvoke $r4.<com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>(r0);

        r0.<com.alibaba.fastjson.serializer.SerializeWriter: com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper nameFilters> = $r4;

        $r5 = new com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper;

        specialinvoke $r5.<com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>(r0);

        r0.<com.alibaba.fastjson.serializer.SerializeWriter: com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper beforeFilters> = $r5;

        $r6 = new com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper;

        specialinvoke $r6.<com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>(r0);

        r0.<com.alibaba.fastjson.serializer.SerializeWriter: com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper afterFilters> = $r6;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>
    void <init>(com.alibaba.fastjson.serializer.SerializeWriter)
    {
        com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper r0;
        com.alibaba.fastjson.serializer.SerializeWriter r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper;

        r1 := @parameter0: com.alibaba.fastjson.serializer.SerializeWriter;

        r0.<com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: com.alibaba.fastjson.serializer.SerializeWriter this$0> = r1;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>
    void <init>(com.alibaba.fastjson.serializer.SerializeWriter)
    {
        com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper r0;
        com.alibaba.fastjson.serializer.SerializeWriter r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper;

        r1 := @parameter0: com.alibaba.fastjson.serializer.SerializeWriter;

        r0.<com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: com.alibaba.fastjson.serializer.SerializeWriter this$0> = r1;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>
    void <init>(com.alibaba.fastjson.serializer.SerializeWriter)
    {
        com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper r0;
        com.alibaba.fastjson.serializer.SerializeWriter r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper;

        r1 := @parameter0: com.alibaba.fastjson.serializer.SerializeWriter;

        r0.<com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: com.alibaba.fastjson.serializer.SerializeWriter this$0> = r1;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>
    void <init>(com.alibaba.fastjson.serializer.SerializeWriter)
    {
        com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper r0;
        com.alibaba.fastjson.serializer.SerializeWriter r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper;

        r1 := @parameter0: com.alibaba.fastjson.serializer.SerializeWriter;

        r0.<com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: com.alibaba.fastjson.serializer.SerializeWriter this$0> = r1;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>
    void <init>(com.alibaba.fastjson.serializer.SerializeWriter)
    {
        com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper r0;
        com.alibaba.fastjson.serializer.SerializeWriter r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper;

        r1 := @parameter0: com.alibaba.fastjson.serializer.SerializeWriter;

        r0.<com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: com.alibaba.fastjson.serializer.SerializeWriter this$0> = r1;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        return;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.serializer.SerializeWriter: void <init>()>`, we need to understand the data flow and initialization process within the method and its related methods. Let's break down the steps:

### Step-by-Step Analysis:

1. **Method `<com.alibaba.fastjson.serializer.SerializeWriter: void <init>()>`:**
   - This method is a constructor for the `SerializeWriter` class.
   - It initializes an instance of `SerializeWriter` by calling another constructor with a `JSONWriter` object.
   - The `JSONWriter` object is obtained by calling the static method `<com.alibaba.fastjson2.JSONWriter: com.alibaba.fastjson2.JSONWriter of()>`.

2. **Method `<com.alibaba.fastjson2.JSONWriter: com.alibaba.fastjson2.JSONWriter of()>`:**
   - This method is abstract, so we assume it returns a new instance of `JSONWriter`.

3. **Method `<com.alibaba.fastjson.serializer.SerializeWriter: void <init>(com.alibaba.fastjson2.JSONWriter)>`:**
   - This constructor initializes the `SerializeWriter` instance with a `JSONWriter` object.
   - It sets the `raw` field of `SerializeWriter` to the `JSONWriter` instance.
   - It also initializes several `ListWrapper` fields (`propertyFilters`, `valueFilters`, `nameFilters`, `beforeFilters`, `afterFilters`) with new instances of `SerializeWriter$ListWrapper`.

4. **Method `<com.alibaba.fastjson.serializer.SerializeWriter$ListWrapper: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>`:**
   - This constructor initializes a `ListWrapper` instance and sets its `this$0` field to the `SerializeWriter` instance.
   - It also initializes the `ListWrapper` as an `ArrayList`.

### Data Flow Summary:

- The primary data flow involves the initialization of the `SerializeWriter` object and its fields.
- The `JSONWriter` object created by `of()` is passed to the `SerializeWriter` constructor and assigned to the `raw` field.
- Each `ListWrapper` is associated with the `SerializeWriter` instance through the `this$0` field.

### XML Summary:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.serializer</Value>
        </NamespaceName>
        <ClassName>
            <Value>SerializeWriter</Value>
        </ClassName>
        <FunctionName>
            <Value>&lt;init&gt;</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <!-- No parameters for this constructor -->
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>this</InArguments>
    <OutArguments>this.raw</OutArguments>
    <Comment>
    - The data flow shows that a `JSONWriter` instance is created and assigned to `this.raw`.
    - Several `ListWrapper` instances are initialized and associated with `this`.
    - The flow is no condition.
    </Comment>
</PropagationRule>
```

This XML summary captures the initialization and data flow within the `SerializeWriter` constructor, focusing on the assignment of the `JSONWriter` to the `raw` field and the initialization of `ListWrapper` fields.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>
Related methods: 1
caller is : <com.alibaba.dubbo.common.serialize.fastjson.FastJsonObjectOutput: void writeObject(java.lang.Object)>
callee is : <com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>

Method: <com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>
    public void <init>(com.alibaba.fastjson.serializer.SerializeWriter)
    {
        com.alibaba.fastjson.serializer.JSONSerializer r0;
        com.alibaba.fastjson2.JSONWriter $r2;
        com.alibaba.fastjson.serializer.SerializeWriter r1;

        r0 := @this: com.alibaba.fastjson.serializer.JSONSerializer;

        r1 := @parameter0: com.alibaba.fastjson.serializer.SerializeWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.serializer.JSONSerializer: com.alibaba.fastjson.serializer.SerializeWriter out> = r1;

        $r2 = r1.<com.alibaba.fastjson.serializer.SerializeWriter: com.alibaba.fastjson2.JSONWriter raw>;

        r0.<com.alibaba.fastjson.serializer.JSONSerializer: com.alibaba.fastjson2.JSONWriter raw> = $r2;

        return;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter)>`, we need to examine the data flow and the operations performed within the method. Let's break down the steps:

1. **Parameter and Object Initialization**:
   - `r0` is initialized as `@this`, representing the current instance of `JSONSerializer`.
   - `r1` is initialized as `@parameter0`, representing the `SerializeWriter` passed as a parameter to the constructor.

2. **Superclass Constructor Invocation**:
   - The line `specialinvoke r0.<java.lang.Object: void <init>()>();` indicates that the superclass constructor (`Object` in this case) is invoked. This is a standard operation in Java constructors and doesn't involve any parameter data flow.

3. **Field Assignment**:
   - The field `out` of `this` (`r0`) is assigned the value of `r1` (`p1`). This indicates a direct data flow from the parameter `p1` to the field `this.out`.
   - The field `raw` of `this` (`r0`) is assigned the value of `r1.raw`. This indicates a data flow from the field `p1.raw` to the field `this.raw`.

4. **Return Statement**:
   - The method concludes with a `return` statement, which is typical for constructors and doesn't involve any data flow.

Based on the above analysis, the data flow can be summarized as follows:

- `p1` (`SerializeWriter`) is assigned to `this.out`.
- `p1.raw` is assigned to `this.raw`.

Now, let's format this analysis into the required XML format:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.serializer</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONSerializer</Value>
        </ClassName>
        <FunctionName>
            <Value>&lt;init&gt;</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>com.alibaba.fastjson.serializer.SerializeWriter</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0</InArguments>
    <OutArguments>this.out</OutArguments>
    <Comment>
    - The data flow shows that `p1` (`SerializeWriter`) is transferred into `this.out`.
    - The flow is no condition
    </Comment>
</PropagationRule>

<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.serializer</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONSerializer</Value>
        </ClassName>
        <FunctionName>
            <Value>&lt;init&gt;</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>com.alibaba.fastjson.serializer.SerializeWriter</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0.raw</InArguments>
    <OutArguments>this.raw</OutArguments>
    <Comment>
    - The data flow shows that `p1.raw` is transferred into `this.raw`.
    - The flow is no condition
    </Comment>
</PropagationRule>
```

This XML captures the data flow from the parameter `SerializeWriter` and its field `raw` to the fields `out` and `raw` of the `JSONSerializer` instance, respectively.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.serializer.SerializeWriter: void writeTo(java.io.Writer)>
Related methods: 1
caller is : <com.alibaba.dubbo.common.serialize.fastjson.FastJsonObjectOutput: void writeObject(java.lang.Object)>
callee is : <com.alibaba.fastjson.serializer.SerializeWriter: void writeTo(java.io.Writer)>

Method: <com.alibaba.fastjson.serializer.SerializeWriter: void writeTo(java.io.Writer)>
    public void writeTo(java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        com.alibaba.fastjson2.JSONWriter $r2;
        com.alibaba.fastjson.serializer.SerializeWriter r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter;

        r1 := @parameter0: java.io.Writer;

        $r2 = r0.<com.alibaba.fastjson.serializer.SerializeWriter: com.alibaba.fastjson2.JSONWriter raw>;

        virtualinvoke $r2.<com.alibaba.fastjson2.JSONWriter: void flushTo(java.io.Writer)>(r1);

        return;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.serializer.SerializeWriter: void writeTo(java.io.Writer)>`, we need to examine the data flow and interactions between the parameters, fields, and any return values. Let's go through the method step by step:

1. **Parameter and Object Initialization:**
   - `r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter;` indicates that `r0` is a reference to the current instance of `SerializeWriter`.
   - `r1 := @parameter0: java.io.Writer;` indicates that `r1` is a reference to the parameter passed to the method, which is of type `java.io.Writer`.

2. **Field Access:**
   - `$r2 = r0.<com.alibaba.fastjson.serializer.SerializeWriter: com.alibaba.fastjson2.JSONWriter raw>;` accesses the `raw` field of the `SerializeWriter` instance, which is of type `com.alibaba.fastjson2.JSONWriter`.

3. **Method Invocation:**
   - `virtualinvoke $r2.<com.alibaba.fastjson2.JSONWriter: void flushTo(java.io.Writer)>(r1);` calls the `flushTo` method on the `JSONWriter` instance `$r2`, passing `r1` (the `Writer` parameter) as an argument.

4. **Return:**
   - The method returns `void`, so there is no return value to consider in the data flow.

**Data Flow Analysis:**
- The primary data flow involves the parameter `p1` (`java.io.Writer`) being passed to the `flushTo` method of the `JSONWriter` instance. This indicates a flow from the parameter to a method call, but there is no direct data propagation to fields of `this` or a return value.

**Summary:**
Based on the analysis, the method involves a data flow from the parameter `p1` to the `flushTo` method call, but there is no propagation to fields of `this` or any return value. The data flow is straightforward and does not involve any conditional logic.

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.serializer</Value>
        </NamespaceName>
        <ClassName>
            <Value>SerializeWriter</Value>
        </ClassName>
        <FunctionName>
            <Value>writeTo</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.io.Writer</ParamType>
    </Parameters>
    <HasPropagation>false</HasPropagation>
    <Comment>
    - The parameter `p1` (`java.io.Writer`) is used in a method call to `flushTo`, but there is no direct data propagation to fields of `this` or any return value.
    </Comment>
</PropagationRule>
```

This XML summary captures the essence of the data flow within the method, indicating that while the parameter is used, it does not propagate to any fields or return values.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.serializer.SerializeWriter: void close()>
Related methods: 1
caller is : <com.alibaba.dubbo.common.serialize.fastjson.FastJsonObjectOutput: void writeObject(java.lang.Object)>
callee is : <com.alibaba.fastjson.serializer.SerializeWriter: void close()>

Method: <com.alibaba.fastjson.serializer.SerializeWriter: void close()>
    public void close()
    {
        com.alibaba.fastjson2.JSONWriter $r1;
        com.alibaba.fastjson.serializer.SerializeWriter r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter;

        $r1 = r0.<com.alibaba.fastjson.serializer.SerializeWriter: com.alibaba.fastjson2.JSONWriter raw>;

        virtualinvoke $r1.<com.alibaba.fastjson2.JSONWriter: void close()>();

        return;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.serializer.SerializeWriter: void close()>`, let's break down the steps and evaluate the data flow:

1. **Parameter and Object Reference Identification**:
   - The method `close()` does not take any parameters (`p1`, `p2`, etc., are not applicable here).
   - `r0` is assigned to `@this`, which refers to the current instance of `SerializeWriter`.

2. **Field Access**:
   - `$r1` is assigned the value of `r0.<com.alibaba.fastjson.serializer.SerializeWriter: com.alibaba.fastjson2.JSONWriter raw>`, which means `$r1` is accessing the `raw` field of the current `SerializeWriter` instance.

3. **Method Invocation**:
   - The method `close()` is called on `$r1`, which is an instance of `com.alibaba.fastjson2.JSONWriter`.

4. **Data Flow Analysis**:
   - There is no data flow from parameters or return values since the method does not take parameters or return anything.
   - The method operates on the field `raw` of `this` (`SerializeWriter`), invoking `close()` on it.

5. **Summary**:
   - There is no parameter or return data flow to track.
   - The method primarily interacts with the field `raw` of the current object instance (`this`).

Based on the analysis, the method does not propagate any data from parameters or return values. The focus is on closing the `JSONWriter` associated with the `SerializeWriter` instance. Here is the XML summary:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.serializer</Value>
        </NamespaceName>
        <ClassName>
            <Value>SerializeWriter</Value>
        </ClassName>
        <FunctionName>
            <Value>close</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <!-- No parameters for this method -->
    </Parameters>
    <HasPropagation>false</HasPropagation>
    <Comment>
    - The method does not involve any parameter or return data flow.
    - It closes the JSONWriter associated with the SerializeWriter instance.
    </Comment>
</PropagationRule>
```

This XML summary reflects that there is no data flow involving parameters or return values, and the method's primary operation is closing the `JSONWriter` field of the `SerializeWriter` instance.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializerFeature[])>
Related methods: 232
caller is : <cn.com.antcloud.api.common.GwJsons: java.lang.String toString(java.lang.Object)>
callee is : <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializerFeature[])>

Method: <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializerFeature[])>
    public static transient java.lang.String toJSONString(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig, com.alibaba.fastjson.serializer.SerializerFeature[])
    {
        java.lang.Throwable $r6, $r7;
        com.alibaba.fastjson2.JSONWriter $r3;
        com.alibaba.fastjson2.JSONWriter$Context $r2;
        com.alibaba.fastjson.serializer.SerializeConfig r0;
        com.alibaba.fastjson.serializer.SerializerFeature[] r1;
        int $i0;
        java.lang.Object r4;
        java.lang.String $r5;

        r4 := @parameter0: java.lang.Object;

        r0 := @parameter1: com.alibaba.fastjson.serializer.SerializeConfig;

        r1 := @parameter2: com.alibaba.fastjson.serializer.SerializerFeature[];

        $i0 = <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE>;

        $r2 = staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONWriter$Context createWriteContext(com.alibaba.fastjson.serializer.SerializeConfig,int,com.alibaba.fastjson.serializer.SerializerFeature[])>(r0, $i0, r1);

        $r3 = staticinvoke <com.alibaba.fastjson2.JSONWriter: com.alibaba.fastjson2.JSONWriter of(com.alibaba.fastjson2.JSONWriter$Context)>($r2);

     label1:
        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void setRootObject(java.lang.Object)>(r4);

        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void writeAny(java.lang.Object)>(r4);

        $r5 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

     label2:
        if $r3 == null goto label3;

        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void close()>();

     label3:
        return $r5;

     label4:
        $r7 := @caughtexception;

        if $r3 == null goto label8;

     label5:
        virtualinvoke $r3.<com.alibaba.fastjson2.JSONWriter: void close()>();

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        virtualinvoke $r7.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig, com.alibaba.fastjson.serializer.SerializerFeature[])>`, we need to follow the steps outlined in the conventions and examples provided. Let's break down the method and identify the data flows:

### Step-by-Step Analysis:

1. **Parameter Assignments:**
   - `r4` is assigned `@parameter0`, representing `p1` (the first parameter of type `java.lang.Object`).
   - `r0` is assigned `@parameter1`, representing `p2` (the second parameter of type `com.alibaba.fastjson.serializer.SerializeConfig`).
   - `r1` is assigned `@parameter2`, representing `p3` (the third parameter of type `com.alibaba.fastjson.serializer.SerializerFeature[]`).

2. **Data Flow Analysis:**
   - The method creates a `JSONWriter$Context` using `r0` and `r1` through a static method call. This context is stored in `$r2`.
   - A `JSONWriter` instance is created using `$r2` and stored in `$r3`.
   - The `setRootObject` method of `$r3` is invoked with `r4` (p1), indicating that `p1` is set as the root object in the `JSONWriter`.
   - The `writeAny` method of `$r3` is invoked with `r4` (p1), suggesting that `p1` is being serialized.
   - The `toString` method of `$r3` is invoked, and its result is stored in `$r5`, which is then returned.

3. **Return Value:**
   - The return value `$r5` is derived from the `toString` method of `JSONWriter`, which was set up with `p1`. Thus, there is a data flow from `p1` to the return value.

4. **Exception Handling:**
   - The method includes exception handling, but it does not affect the data flow from parameters to the return value.

### Data Flow Summary:

Based on the analysis, the primary data flow is from `p1` to the return value. There are no conditional flows or additional data flows involving `p2` or `p3`.

### XML Summary:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>toJSONString</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
        <ParamType>com.alibaba.fastjson.serializer.SerializeConfig</ParamType>
        <ParamType>com.alibaba.fastjson.serializer.SerializerFeature[]</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (the first parameter) is transferred into the return value.
    - The flow is no condition.
    </Comment>
</PropagationRule>
```

This XML summary captures the data flow from the first parameter to the return value, with no conditions affecting the flow.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.Object toJSON(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig)>
Related methods: 252
caller is : <cn.com.antcloud.api.common.GwJsons: com.alibaba.fastjson.JSONObject toJSON(java.lang.Object)>
callee is : <com.alibaba.fastjson.JSON: java.lang.Object toJSON(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig)>

Method: <com.alibaba.fastjson.JSON: java.lang.Object toJSON(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig)>
    public static java.lang.Object toJSON(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig)
    {
        com.alibaba.fastjson.serializer.SerializeConfig r1;
        com.alibaba.fastjson.JSONArray $r5;
        java.util.List $r6;
        com.alibaba.fastjson.serializer.SerializerFeature[] $r2;
        java.lang.Object r0, $r4;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: com.alibaba.fastjson.serializer.SerializeConfig;

        $z0 = r0 instanceof com.alibaba.fastjson.JSON;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = newarray (com.alibaba.fastjson.serializer.SerializerFeature)[0];

        $r3 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializerFeature[])>(r0, r1, $r2);

        $r4 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.Object parse(java.lang.String)>($r3);

        $z1 = $r4 instanceof java.util.List;

        if $z1 == 0 goto label2;

        $r5 = new com.alibaba.fastjson.JSONArray;

        $r6 = (java.util.List) $r4;

        specialinvoke $r5.<com.alibaba.fastjson.JSONArray: void <init>(java.util.List)>($r6);

        return $r5;

     label2:
        return $r4;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r36;
        com.alibaba.fastjson.serializer.SerializerFeature[] $r30, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        $r0 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r0.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("QuoteFieldNames", 0);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames> = $r0;

        $r1 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r1.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("UseSingleQuotes", 1);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature UseSingleQuotes> = $r1;

        $r2 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r2.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteMapNullValue", 2);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteMapNullValue> = $r2;

        $r3 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r3.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteEnumUsingToString", 3);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingToString> = $r3;

        $r4 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r4.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteEnumUsingName", 4);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName> = $r4;

        $r5 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r5.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("UseISO8601DateFormat", 5);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature UseISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r6.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullListAsEmpty", 6);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullListAsEmpty> = $r6;

        $r7 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r7.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullStringAsEmpty", 7);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullStringAsEmpty> = $r7;

        $r8 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r8.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullNumberAsZero", 8);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullNumberAsZero> = $r8;

        $r9 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r9.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullBooleanAsFalse", 9);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullBooleanAsFalse> = $r9;

        $r10 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r10.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("SkipTransientField", 10);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField> = $r10;

        $r11 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r11.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("SortField", 11);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField> = $r11;

        $r12 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r12.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteTabAsSpecial", 12);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteTabAsSpecial> = $r12;

        $r13 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("PrettyFormat", 13);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature PrettyFormat> = $r13;

        $r14 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteClassName", 14);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteClassName> = $r14;

        $r15 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 15);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature DisableCircularReferenceDetect> = $r15;

        $r16 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteSlashAsSpecial", 16);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteSlashAsSpecial> = $r16;

        $r17 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r17.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("BrowserCompatible", 17);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BrowserCompatible> = $r17;

        $r18 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r18.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteDateUseDateFormat", 18);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteDateUseDateFormat> = $r18;

        $r19 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r19.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("NotWriteRootClassName", 19);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature NotWriteRootClassName> = $r19;

        $r20 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r20.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("DisableCheckSpecialChar", 20);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature DisableCheckSpecialChar> = $r20;

        $r21 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r21.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("BeanToArray", 21);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BeanToArray> = $r21;

        $r22 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r22.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNonStringKeyAsString", 22);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNonStringKeyAsString> = $r22;

        $r23 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r23.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("NotWriteDefaultValue", 23);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature NotWriteDefaultValue> = $r23;

        $r24 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r24.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("BrowserSecure", 24);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BrowserSecure> = $r24;

        $r25 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r25.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("IgnoreNonFieldGetter", 25);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature IgnoreNonFieldGetter> = $r25;

        $r26 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r26.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNonStringValueAsString", 26);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNonStringValueAsString> = $r26;

        $r27 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r27.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("IgnoreErrorGetter", 27);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature IgnoreErrorGetter> = $r27;

        $r28 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r28.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteBigDecimalAsPlain", 28);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteBigDecimalAsPlain> = $r28;

        $r29 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r29.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("MapSortField", 29);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature MapSortField> = $r29;

        $r30 = staticinvoke <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature[] $values()>();

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature[] $VALUES> = $r30;

        $r31 = newarray (com.alibaba.fastjson.serializer.SerializerFeature)[0];

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature[] EMPTY> = $r31;

        $r32 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteMapNullValue>;

        $i0 = virtualinvoke $r32.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $r33 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullBooleanAsFalse>;

        $i1 = virtualinvoke $r33.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i2 = $i0 | $i1;

        $r34 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullListAsEmpty>;

        $i3 = virtualinvoke $r34.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i4 = $i2 | $i3;

        $r35 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullNumberAsZero>;

        $i5 = virtualinvoke $r35.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i6 = $i4 | $i5;

        $r36 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullStringAsEmpty>;

        $i7 = virtualinvoke $r36.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i8 = $i6 | $i7;

        <com.alibaba.fastjson.serializer.SerializerFeature: int WRITE_MAP_NULL_FEATURES> = $i8;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature[] $values()>
    private static com.alibaba.fastjson.serializer.SerializerFeature[] $values()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        com.alibaba.fastjson.serializer.SerializerFeature[] $r0;

        $r0 = newarray (com.alibaba.fastjson.serializer.SerializerFeature)[30];

        $r1 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature UseSingleQuotes>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteMapNullValue>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingToString>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature UseISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullListAsEmpty>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullStringAsEmpty>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullNumberAsZero>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullBooleanAsFalse>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteTabAsSpecial>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature PrettyFormat>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteClassName>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature DisableCircularReferenceDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteSlashAsSpecial>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BrowserCompatible>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteDateUseDateFormat>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature NotWriteRootClassName>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature DisableCheckSpecialChar>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BeanToArray>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNonStringKeyAsString>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature NotWriteDefaultValue>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BrowserSecure>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature IgnoreNonFieldGetter>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNonStringValueAsString>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature IgnoreErrorGetter>;

        $r0[27] = $r28;

        $r29 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteBigDecimalAsPlain>;

        $r0[28] = $r29;

        $r30 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature MapSortField>;

        $r0[29] = $r30;

        return $r0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r36;
        com.alibaba.fastjson.serializer.SerializerFeature[] $r30, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        $r0 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r0.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("QuoteFieldNames", 0);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames> = $r0;

        $r1 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r1.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("UseSingleQuotes", 1);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature UseSingleQuotes> = $r1;

        $r2 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r2.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteMapNullValue", 2);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteMapNullValue> = $r2;

        $r3 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r3.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteEnumUsingToString", 3);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingToString> = $r3;

        $r4 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r4.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteEnumUsingName", 4);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName> = $r4;

        $r5 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r5.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("UseISO8601DateFormat", 5);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature UseISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r6.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullListAsEmpty", 6);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullListAsEmpty> = $r6;

        $r7 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r7.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullStringAsEmpty", 7);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullStringAsEmpty> = $r7;

        $r8 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r8.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullNumberAsZero", 8);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullNumberAsZero> = $r8;

        $r9 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r9.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNullBooleanAsFalse", 9);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullBooleanAsFalse> = $r9;

        $r10 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r10.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("SkipTransientField", 10);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField> = $r10;

        $r11 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r11.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("SortField", 11);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField> = $r11;

        $r12 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r12.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteTabAsSpecial", 12);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteTabAsSpecial> = $r12;

        $r13 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("PrettyFormat", 13);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature PrettyFormat> = $r13;

        $r14 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteClassName", 14);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteClassName> = $r14;

        $r15 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 15);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature DisableCircularReferenceDetect> = $r15;

        $r16 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteSlashAsSpecial", 16);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteSlashAsSpecial> = $r16;

        $r17 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r17.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("BrowserCompatible", 17);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BrowserCompatible> = $r17;

        $r18 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r18.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteDateUseDateFormat", 18);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteDateUseDateFormat> = $r18;

        $r19 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r19.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("NotWriteRootClassName", 19);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature NotWriteRootClassName> = $r19;

        $r20 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r20.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("DisableCheckSpecialChar", 20);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature DisableCheckSpecialChar> = $r20;

        $r21 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r21.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("BeanToArray", 21);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BeanToArray> = $r21;

        $r22 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r22.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNonStringKeyAsString", 22);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNonStringKeyAsString> = $r22;

        $r23 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r23.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("NotWriteDefaultValue", 23);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature NotWriteDefaultValue> = $r23;

        $r24 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r24.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("BrowserSecure", 24);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature BrowserSecure> = $r24;

        $r25 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r25.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("IgnoreNonFieldGetter", 25);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature IgnoreNonFieldGetter> = $r25;

        $r26 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r26.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteNonStringValueAsString", 26);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNonStringValueAsString> = $r26;

        $r27 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r27.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("IgnoreErrorGetter", 27);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature IgnoreErrorGetter> = $r27;

        $r28 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r28.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("WriteBigDecimalAsPlain", 28);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteBigDecimalAsPlain> = $r28;

        $r29 = new com.alibaba.fastjson.serializer.SerializerFeature;

        specialinvoke $r29.<com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>("MapSortField", 29);

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature MapSortField> = $r29;

        $r30 = staticinvoke <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature[] $values()>();

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature[] $VALUES> = $r30;

        $r31 = newarray (com.alibaba.fastjson.serializer.SerializerFeature)[0];

        <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature[] EMPTY> = $r31;

        $r32 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteMapNullValue>;

        $i0 = virtualinvoke $r32.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $r33 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullBooleanAsFalse>;

        $i1 = virtualinvoke $r33.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i2 = $i0 | $i1;

        $r34 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullListAsEmpty>;

        $i3 = virtualinvoke $r34.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i4 = $i2 | $i3;

        $r35 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullNumberAsZero>;

        $i5 = virtualinvoke $r35.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i6 = $i4 | $i5;

        $r36 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteNullStringAsEmpty>;

        $i7 = virtualinvoke $r36.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        $i8 = $i6 | $i7;

        <com.alibaba.fastjson.serializer.SerializerFeature: int WRITE_MAP_NULL_FEATURES> = $i8;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializerFeature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        com.alibaba.fastjson.serializer.SerializerFeature r0;
        int i0, $i1, $i2;
        java.lang.String r1;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.Object toJSON(java.lang.Object, com.alibaba.fastjson.serializer.SerializeConfig)>`, let's break down the data flow step by step:

1. **Parameter Initialization:**
   - `r0` is initialized with `@parameter0`, which is the first parameter `p1` of type `java.lang.Object`.
   - `r1` is initialized with `@parameter1`, which is the second parameter `p2` of type `com.alibaba.fastjson.serializer.SerializeConfig`.

2. **Instance Check and Return:**
   - The method checks if `r0` (i.e., `p1`) is an instance of `com.alibaba.fastjson.JSON`.
   - If true, it directly returns `r0`, which means `p1` is returned without any transformation.

3. **Serialization and Parsing:**
   - If `p1` is not an instance of `com.alibaba.fastjson.JSON`, it proceeds to serialize `p1` using `toJSONString` with `p2` and an empty `SerializerFeature` array.
   - The serialized string `$r3` is then parsed back into an object `$r4` using the `parse` method.

4. **List Check and Return:**
   - The method checks if `$r4` is an instance of `java.util.List`.
   - If true, it creates a new `com.alibaba.fastjson.JSONArray` initialized with `$r6` (casted from `$r4`) and returns this `JSONArray`.
   - If false, it returns `$r4` directly.

5. **Data Flow Summary:**
   - The data flow from `p1` to the return value is conditional based on the type checks and transformations applied.
   - The flow is straightforward when `p1` is an instance of `com.alibaba.fastjson.JSON`, as it is returned directly.
   - Otherwise, `p1` is serialized and parsed, potentially transformed into a `JSONArray` if it represents a `List`.

Based on this analysis, here is the XML summary:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>toJSON</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
        <ParamType>com.alibaba.fastjson.serializer.SerializeConfig</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>p1 instanceof com.alibaba.fastjson.JSON</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` is directly returned if it is an instance of `com.alibaba.fastjson.JSON`.
    </Comment>
</PropagationRule>

<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>toJSON</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
        <ParamType>com.alibaba.fastjson.serializer.SerializeConfig</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>!(p1 instanceof com.alibaba.fastjson.JSON)</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` is serialized and parsed, potentially transformed into a `JSONArray` if it represents a `List`, otherwise returned as a parsed object.
    </Comment>
</PropagationRule>
```

This XML summary captures the conditional data flow from `p1` to the return value based on the type checks and transformations applied within the method.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.serializer.SerializeConfig: void <init>()>
Related methods: 3
caller is : <cn.com.antcloud.api.common.GwJsons: void <clinit>()>
callee is : <com.alibaba.fastjson.serializer.SerializeConfig: void <init>()>

Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <init>()>
    public void <init>()
    {
        com.alibaba.fastjson.serializer.SerializeConfig r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeConfig;

        $r1 = new com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke $r1.<com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>()>();

        specialinvoke r0.<com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r1);

        return;
    }

Method: <com.alibaba.fastjson2.writer.ObjectWriterProvider: void <init>()>
Abstract method
Method: <com.alibaba.fastjson.serializer.SerializeConfig: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.serializer.SerializeConfig r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.serializer.SerializeConfig;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: boolean fieldBased> = 0;

        r0.<com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.serializer.SerializeConfig: void <init>()>`, we need to examine the data flow and interactions between the methods involved. Let's break down the steps:

### Step 1: Analyze the `<init>()` method of `SerializeConfig`

1. **Object Initialization**: 
   - `r0` is initialized as `this` for `SerializeConfig`.
   - `$r1` is a new instance of `ObjectWriterProvider`.

2. **Method Invocation**:
   - The constructor of `ObjectWriterProvider` is called to initialize `$r1`.
   - The constructor of `SerializeConfig` that takes an `ObjectWriterProvider` as a parameter is invoked with `$r1`.

3. **Return**: 
   - The method completes without returning any value.

### Step 2: Analyze the `<init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)` method of `SerializeConfig`

1. **Object Initialization**:
   - `r0` is initialized as `this` for `SerializeConfig`.
   - `r1` is the parameter of type `ObjectWriterProvider`.

2. **Superclass Initialization**:
   - The constructor of `java.lang.Object` is invoked.

3. **Field Assignments**:
   - `this.fieldBased` is set to `0`.
   - `this.provider` is set to `r1`.

4. **Return**:
   - The method completes without returning any value.

### Data Flow Summary

- **Data Flow from Parameter to Field**:
  - The parameter `r1` (of type `ObjectWriterProvider`) is assigned to `this.provider` in the `SerializeConfig` class.

### XML Representation

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson.serializer</Value>
        </NamespaceName>
        <ClassName>
            <Value>SerializeConfig</Value>
        </ClassName>
        <FunctionName>
            <Value>&lt;init&gt;</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>com.alibaba.fastjson2.writer.ObjectWriterProvider</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0</InArguments>
    <OutArguments>this.provider</OutArguments>
    <Comment>
    - The data flow shows that the parameter `r1` (of type `ObjectWriterProvider`) is transferred into `this.provider`.
    - The flow is no condition.
    </Comment>
</PropagationRule>
```

### Conclusion

The method `<com.alibaba.fastjson.serializer.SerializeConfig: void <init>()>` initializes a `SerializeConfig` object by creating an `ObjectWriterProvider` and assigning it to the `provider` field of `SerializeConfig`. The data flow involves transferring the `ObjectWriterProvider` parameter to a field within the `SerializeConfig` object.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSONObject: java.lang.Object remove(java.lang.Object)>
Related methods: 1
caller is : <cn.com.antcloud.api.common.BaseGwClient: cn.com.antcloud.api.common.BaseClientResponse handleRsaSm2Response(org.apache.http.HttpResponse,java.lang.String,java.lang.String)>
callee is : <com.alibaba.fastjson.JSONObject: java.lang.Object remove(java.lang.Object)>

Method: <com.alibaba.fastjson.JSONObject: java.lang.Object remove(java.lang.Object)>
    public java.lang.Object remove(java.lang.Object)
    {
        java.util.Map $r2;
        com.alibaba.fastjson.JSONObject r0;
        java.lang.Object r1, $r3;

        r0 := @this: com.alibaba.fastjson.JSONObject;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;
    }

-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSONObject: java.lang.Object remove(java.lang.Object)>`, let's break down the steps and identify the data flow:

1. **Parameter and Field Initialization:**
   - `r0` is initialized to `@this`, which is the current instance of `com.alibaba.fastjson.JSONObject`.
   - `r1` is initialized to `@parameter0`, which is the input parameter of type `java.lang.Object`.

2. **Field Access:**
   - `$r2` is assigned the value of `r0.<com.alibaba.fastjson.JSONObject: java.util.Map map>`, which accesses the `map` field of the current `JSONObject` instance.

3. **Method Invocation:**
   - `$r3` is assigned the result of invoking the `remove` method on `$r2` (the `map` field), with `r1` as the argument. This indicates a data flow from `r1` to the `remove` method of the `Map`.

4. **Return Statement:**
   - The method returns `$r3`, which is the result of the `remove` operation on the map.

**Data Flow Summary:**
- The parameter `p1` (`r1`) is used as an argument in the `remove` method call on the `map` field of `this` (`JSONObject`), and the result of this operation is returned.

**XML Summary:**

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSONObject</Value>
        </ClassName>
        <FunctionName>
            <Value>remove</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (the parameter) is used in the `remove` method of the `map` field of `this` (`JSONObject`), and the result is returned.
    - The flow is no condition
    </Comment>
</PropagationRule>
```

This XML summary captures the data flow from the parameter to the return value through the `remove` operation on the `map` field of the `JSONObject` instance.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson2.JSON: java.lang.Object toJSON(java.lang.Object)>
Related methods: 1
caller is : <com.alibaba.druid.support.opds.udf.SqlCodeStat$CodeStatVisitor: java.util.Map toMap()>
callee is : <com.alibaba.fastjson2.JSON: java.lang.Object toJSON(java.lang.Object)>

Method: <com.alibaba.fastjson2.JSON: java.lang.Object toJSON(java.lang.Object)>
Abstract method
-----------
=== assistant ===
To analyze the method `<com.alibaba.fastjson2.JSON: java.lang.Object toJSON(java.lang.Object)>`, we need to consider the following:

1. **Method Signature and Parameters**: The method `toJSON` takes a single parameter of type `java.lang.Object` and returns an `Object`. The parameter will be referred to as `p1`.

2. **Abstract Method**: Since the method is abstract, it does not contain any implementation details within the provided context. This means there is no direct data flow or logic to analyze within this method itself.

3. **Data Flow Analysis**: Given that the method is abstract, there is no data flow from `p1` to any fields of `this`, other parameters, or the return value within this method. However, the method's purpose is likely to convert the input object into a JSON representation, but this is not explicitly shown in the abstract method.

4. **Related Methods**: The caller method `<com.alibaba.druid.support.opds.udf.SqlCodeStat$CodeStatVisitor: java.util.Map toMap()>` invokes this method, but without the implementation details of `toJSON`, we cannot infer any specific data flow from the caller context.

Based on the above analysis, the summary for the method `<com.alibaba.fastjson2.JSON: java.lang.Object toJSON(java.lang.Object)>` is as follows:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson2</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>toJSON</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.Object</ParamType>
    </Parameters>
    <HasPropagation>false</HasPropagation>
    <Comment>
    - The method is abstract, so there is no direct data flow to analyze.
    - The parameter p1 does not flow to other parameters, fields of this, or the return value within this method.
    </Comment>
</PropagationRule>
```

This XML summary indicates that there is no data propagation within the abstract method itself, as expected.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.io.InputStream,java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>
Related methods: 142
caller is : <com.jdcloud.sdk.client.JdcloudClient: java.lang.Object readValue(java.io.InputStream,java.lang.Class)>
callee is : <com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.io.InputStream,java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>

Method: <com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.io.InputStream,java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>
    public static transient java.lang.Object parseObject(java.io.InputStream, java.lang.reflect.Type, com.alibaba.fastjson.parser.Feature[]) throws java.io.IOException
    {
        java.nio.charset.Charset $r3;
        java.lang.reflect.Type r1;
        com.alibaba.fastjson.parser.Feature[] r2;
        java.lang.Object $r4;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.reflect.Type;

        r2 := @parameter2: com.alibaba.fastjson.parser.Feature[];

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.io.InputStream,java.nio.charset.Charset,java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>(r0, $r3, r1, r2);

        return $r4;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.io.InputStream,java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>`, we need to understand the data flow and conditions within the method. Let's break down the steps:

### Step 1: Method Signature and Parameters
- The method is `public static transient` and returns an `Object`.
- It takes three parameters:
  - `p1`: `java.io.InputStream`
  - `p2`: `java.lang.reflect.Type`
  - `p3`: `com.alibaba.fastjson.parser.Feature[]`

### Step 2: Internal Operations
- The method initializes a `Charset` variable `$r3` with `UTF_8`.
- It then calls another static method `parseObject` with the following parameters: `r0` (InputStream), `$r3` (Charset), `r1` (Type), and `r2` (Feature[]).
- The result of this invocation is stored in `$r4`, which is then returned.

### Step 3: Data Flow Analysis
- The data flow involves passing the parameters `p1`, `p2`, and `p3` directly to the `parseObject` method call.
- The return value of the invoked method is directly returned from the current method.

### Step 4: Conditions
- There are no explicit conditions within the method itself affecting the data flow. The method simply forwards its parameters to another method and returns the result.

### Step 5: Propagation Rules
Based on the above analysis, we can define the propagation rules as follows:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>parseObject</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.io.InputStream</ParamType>
        <ParamType>java.lang.reflect.Type</ParamType>
        <ParamType>com.alibaba.fastjson.parser.Feature[]</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (`InputStream`) is transferred into the return value through a method call.
    - The flow is no condition
    </Comment>
</PropagationRule>

<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>parseObject</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.io.InputStream</ParamType>
        <ParamType>java.lang.reflect.Type</ParamType>
        <ParamType>com.alibaba.fastjson.parser.Feature[]</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>1</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p2` (`Type`) is transferred into the return value through a method call.
    - The flow is no condition
    </Comment>
</PropagationRule>

<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>parseObject</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.io.InputStream</ParamType>
        <ParamType>java.lang.reflect.Type</ParamType>
        <ParamType>com.alibaba.fastjson.parser.Feature[]</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>NOC</Condition>
    <InArguments>2</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p3` (`Feature[]`) is transferred into the return value through a method call.
    - The flow is no condition
    </Comment>
</PropagationRule>
```

This analysis captures the data flow from the parameters to the return value through the method call, with no conditions affecting the flow.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.Object parseObject(byte[],java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>
Related methods: 191
caller is : <com.jdcloud.sdk.client.JdcloudClient: java.lang.Object readValue(byte[],java.lang.Class)>
callee is : <com.alibaba.fastjson.JSON: java.lang.Object parseObject(byte[],java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>

Method: <com.alibaba.fastjson.JSON: java.lang.Object parseObject(byte[],java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>
    public static transient java.lang.Object parseObject(byte[], java.lang.reflect.Type, com.alibaba.fastjson.parser.Feature[])
    {
        java.lang.Throwable $r10, $r11, r14;
        byte[] r0;
        com.alibaba.fastjson.parser.Feature[] r2;
        int $i0;
        java.lang.String $r9, $r13;
        com.alibaba.fastjson2.JSONReader $r4;
        boolean $z0;
        com.alibaba.fastjson.JSONException $r15, $r16;
        com.alibaba.fastjson2.JSONException $r17, $r18;
        java.lang.reflect.Type r5;
        com.alibaba.fastjson2.reader.ObjectReader $r6;
        java.lang.Object $r7;
        com.alibaba.fastjson2.JSONReader$Context $r3;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r1;

        r0 := @parameter0: byte[];

        r5 := @parameter1: java.lang.reflect.Type;

        r2 := @parameter2: com.alibaba.fastjson.parser.Feature[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        $i0 = <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE>;

        $r3 = staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONReader$Context createReadContext(com.alibaba.fastjson2.reader.ObjectReaderProvider,int,com.alibaba.fastjson.parser.Feature[])>($r1, $i0, r2);

        $r4 = staticinvoke <com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.JSONReader of(byte[],com.alibaba.fastjson2.JSONReader$Context)>(r0, $r3);

     label2:
        $r6 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.reader.ObjectReader getObjectReader(java.lang.reflect.Type)>(r5);

        $r7 = interfaceinvoke $r6.<com.alibaba.fastjson2.reader.ObjectReader: java.lang.Object readObject(com.alibaba.fastjson2.JSONReader,java.lang.reflect.Type,java.lang.Object,long)>($r4, null, null, 0L);

        if $r7 == null goto label3;

        virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: void handleResolveTasks(java.lang.Object)>($r7);

     label3:
        $z0 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: boolean isEnd()>();

        if $z0 != 0 goto label4;

        $r15 = new com.alibaba.fastjson.JSONException;

        $r9 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: java.lang.String info(java.lang.String)>("input not end");

        specialinvoke $r15.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String)>($r9);

        throw $r15;

     label4:
        return $r7;

     label5:
        $r10 := @caughtexception;

        $r17 = (com.alibaba.fastjson2.JSONException) $r10;

        $r11 = virtualinvoke $r17.<com.alibaba.fastjson2.JSONException: java.lang.Throwable getCause()>();

        r14 = $r11;

        if $r11 != null goto label6;

        r14 = $r10;

     label6:
        $r16 = new com.alibaba.fastjson.JSONException;

        $r18 = (com.alibaba.fastjson2.JSONException) $r10;

        $r13 = virtualinvoke $r18.<com.alibaba.fastjson2.JSONException: java.lang.String getMessage()>();

        specialinvoke $r16.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r14);

        throw $r16;

        catch com.alibaba.fastjson2.JSONException from label2 to label4 with label5;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.Object parseObject(byte[],java.lang.reflect.Type,com.alibaba.fastjson.parser.Feature[])>`, let's break down the data flow and operations step by step:

1. **Parameter Initialization**:
   - `r0` is initialized with `p1`, which is a `byte[]`.
   - `r5` is initialized with `p2`, which is a `java.lang.reflect.Type`.
   - `r2` is initialized with `p3`, which is a `com.alibaba.fastjson.parser.Feature[]`.

2. **Null Check**:
   - The method checks if `r0` (i.e., `p1`) is `null`. If it is, the method returns `null`.

3. **Object Creation and Method Invocation**:
   - A `com.alibaba.fastjson2.reader.ObjectReaderProvider` object is obtained via a static method call.
   - A `com.alibaba.fastjson2.JSONReader$Context` object is created using the `ObjectReaderProvider`, an integer constant, and `r2` (i.e., `p3`).
   - A `com.alibaba.fastjson2.JSONReader` object is created using `r0` (i.e., `p1`) and the `JSONReader$Context`.

4. **Reading and Handling Objects**:
   - An `ObjectReader` is obtained for the type `r5` (i.e., `p2`).
   - The `ObjectReader` reads an object from the `JSONReader`. This object is stored in `$r7`.
   - If `$r7` is not `null`, `handleResolveTasks` is invoked on the `JSONReader` with `$r7`.

5. **End Check and Exception Handling**:
   - The method checks if the `JSONReader` has reached the end. If not, a `JSONException` is thrown.
   - The method returns `$r7`.

6. **Exception Handling**:
   - If a `com.alibaba.fastjson2.JSONException` is caught, it is wrapped in a `com.alibaba.fastjson.JSONException` and rethrown.

**Data Flow Summary**:
- The primary data flow is from `p1` (byte array) and `p2` (Type) into the `JSONReader` and `ObjectReader`, which eventually results in an object `$r7` that is returned.
- The method handles exceptions by wrapping them and rethrowing.

Based on this analysis, here is the XML summary:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>parseObject</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>byte[]</ParamType>
        <ParamType>java.lang.reflect.Type</ParamType>
        <ParamType>com.alibaba.fastjson.parser.Feature[]</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>p1 != null</Condition>
    <InArguments>0, 1</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (byte array) and `p2` (Type) are used to read and create an object that is returned.
    - The flow is conditional on `p1` not being null.
    </Comment>
</PropagationRule>
```

This XML captures the essence of the method's data flow, focusing on the transformation of input parameters into the return value, with a condition on the non-nullity of `p1`.
=== system ===

You are a professional program analysis aid to summarize what the target method is doing and
what kind of data flow there in relates to the target method. 
=== user ===


Please adhere to the following conventions in your summary:

(1)Parameter Notation: Use p1,p2,p3 to represent the first, second, third parameters of the method
E.g.: 'p1' represents 'a', 'p2' represents 'b', there are no 'p3 or p4'
private void assignValue(String a, String b){
    a = b
}

(2)Object Reference: Use this to refer to the current object instance.
E.g.: 'this' represents the current object instantiated through class A
public class A{
    String name;
    private void setValue(String a){
        this.name = a;
    }
}

(3)Field Access: Use dot notation to represent nested fields, e.g., this.labelA.labelB
refers to field labelB within labelA of this.
E.g.: this.foo.name
public class A{
    Foo foo;
    private void assignValue(String a){
        this.foo.name = a;
    }
    
    class Foo{
        String name;
    }
}


A summary for a leaf procedure has been provided as a comment on the
corresponding call-site line within the code. You should:
(1)Evaluate the Condition: First, determine whether the condition specified in the
comment is satisfied within the current code context.
(2)Generate Summary: If the condition is satisfied, use it to help generate a
summary for the current code block.
(3)Ignore Irrelevant Dataflows: If the condition is not satisfied, disregard this
dataflow in your summary.
(4)Handle Uncertainty: If you are unsure whether the condition is satisfied,
reorganize and reinterpret the condition in a manner that aligns with the input
states of the current code.




Here is a few examples，and the analysis result will provide a summary in the form of annotations above the method.
Data Flow Summary and conditions should only contains the flow about param, field of the param, this, filed of this, ret, 
field of the ret which should not include local variables in the method. （Please pay attention to this rule!!!）.

Also,InArguments and OutArguments will only contain one element. If there are multiple elements, please create a PropagationRule to represent them separately!!!


Example 1 :

Method to be analyzed: <com.test.A: java.lang.String call(java.lang.String,com.test.Foo,int)>

package com.test;
public class A{
    Flag flag;
    String call(String a, Foo b, int c){
        String tmp1 = a + "test1";
        String tmp2 = a + "test2";
        String finalStr = a + "user";
        if (!flag.value.equals("ABC")){
            if (flag.name.equals(b.name)){
                assignValueMethodA(tmp1, b); // This line involves a dataflow from 'p1(tmp1) to p2(b).name
            }
        }
        assignValueMethodB(tmp2, b); // This line involves a dataflow from p1(tmp2) to p2(b).content
        if (c != 0){
            this.flag.score = c;
        }else{
            this.flag.score = 1000;
        }
        return finalStr
    }
    class Flag{
        String value;
        String name;
        int score;
    }
}

package com.test;
public Foo{
    String name;
    String content;
}


[Positive Analysis Result]: Please pay more attention to !!! [If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records. <InArguments>This tag can only have one parameter</InArguments>] 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-JHKLIBGFFG000008</RuleID>  # This RuleID should be randomly generated.The prefix "RULE-ID-PROPAGATION-" remains unchanged.
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>!this.flag.value.equals(p1) && this.flag.name.equals(p1.name)</Condition>
            <InArguments>0</InArguments> # If there are multiple parameter data streams, they should be recorded separately, such as p1-->this.f1, p2-->this.f2, there will be two PropagationRule xml records
            <OutArguments>1.name</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp1`, and the `tmp1` is transferred into 'p2'('b').name  
            - The flow is conditional on !this.flag.value.equals("ABC") && this.flag.name.equals(p2.name)
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>1.content</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into the `tmp2`, and the `tmp2` is transferred into 'p2'('b').content
            - The flow is no condition
            </Comment>
</PropagationRule>

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition> p3!=0 </Condition> # p3 means the third parm
            <InArguments>2</InArguments>
            <OutArguments>this.flag.score</OutArguments>
            <Comment>
            - The data flow shows that `p3` (`c`) is transferred into this.flag.score
            - The flow is no condition
            </Comment>
</PropagationRule>


<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000003</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
                <ParamType>com.test.Foo</ParamType>
                <ParamType>int</ParamType>
            </Parameters>
            <HasPropagation>true</HasPropagation>
            <Condition>NOC</Condition>
            <InArguments>0</InArguments>
            <OutArguments>return</OutArguments>
            <Comment>
            - The data flow shows that `p1` (`a`) is transferred into 'return'
            - The flow is no condition
            </Comment>
</PropagationRule>


Example 2 :

Method to be analyzed: <com.test:A void call(java.lang.String)>

package com.test;
public class A{
    void call(String a){
        String tmp1 = a + "test1";
        System.out.println(tmp1);
    }
}


[Positive Analysis Result]: 

<PropagationRule>
            <RuleID>RULE-ID-PROPAGATION-00000002</RuleID>
            <FunctionIdentifier>
                <NamespaceName>
                    <Value>com.test</Value>
                </NamespaceName>
                <ClassName>
                    <Value>A</Value>
                </ClassName>
                <FunctionName>
                    <Value>call</Value>
                </FunctionName>
                <ApplyTo implements="true" overrides="true" extends="true"/>
            </FunctionIdentifier>
            <Parameters>
                <ParamType>java.lang.String</ParamType>
            </Parameters>
            <HasPropagation>false</HasPropagation>
            <Comment>
            - There is no obvious data flow here as parameter p1 does not flow to other parameters, this, or return.
            </Comment>
</PropagationRule>

Now the final question, tell me the summary of this method.
(1)Please provide the analysis results strictly in this XML format according to the example. 
(2)Don't forget to merge the result (p1-->a-->b--->p2 should be p1 --> p2)
(3)Please think step by step and provide the detailed analysis results for each step. 

Method to be analyzed:<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class,com.alibaba.fastjson.parser.Feature[])>
Related methods: 191
caller is : <com.jdcloud.sdk.client.JdcloudClient: java.lang.Object readValue(java.lang.String,java.lang.Class)>
callee is : <com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class,com.alibaba.fastjson.parser.Feature[])>

Method: <com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class,com.alibaba.fastjson.parser.Feature[])>
    public static transient java.lang.Object parseObject(java.lang.String, java.lang.Class, com.alibaba.fastjson.parser.Feature[])
    {
        java.lang.Throwable $r10, $r11, r14;
        com.alibaba.fastjson.parser.Feature[] r2;
        int $i0;
        java.lang.String r0, $r9, $r13;
        com.alibaba.fastjson2.JSONReader $r4;
        boolean $z0, $z1;
        com.alibaba.fastjson.JSONException $r15, $r16;
        com.alibaba.fastjson2.JSONException $r17, $r18;
        com.alibaba.fastjson2.reader.ObjectReader $r6;
        java.lang.Class r5;
        java.lang.Object $r7;
        com.alibaba.fastjson2.JSONReader$Context $r3;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r1;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Class;

        r2 := @parameter2: com.alibaba.fastjson.parser.Feature[];

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        $i0 = <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE>;

        $r3 = staticinvoke <com.alibaba.fastjson.JSON: com.alibaba.fastjson2.JSONReader$Context createReadContext(com.alibaba.fastjson2.reader.ObjectReaderProvider,int,com.alibaba.fastjson.parser.Feature[])>($r1, $i0, r2);

        $r4 = staticinvoke <com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.JSONReader of(java.lang.String,com.alibaba.fastjson2.JSONReader$Context)>(r0, $r3);

     label3:
        $r6 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: com.alibaba.fastjson2.reader.ObjectReader getObjectReader(java.lang.reflect.Type)>(r5);

        $r7 = interfaceinvoke $r6.<com.alibaba.fastjson2.reader.ObjectReader: java.lang.Object readObject(com.alibaba.fastjson2.JSONReader,java.lang.reflect.Type,java.lang.Object,long)>($r4, null, null, 0L);

        if $r7 == null goto label4;

        virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: void handleResolveTasks(java.lang.Object)>($r7);

     label4:
        $z1 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: boolean isEnd()>();

        if $z1 != 0 goto label5;

        $r15 = new com.alibaba.fastjson.JSONException;

        $r9 = virtualinvoke $r4.<com.alibaba.fastjson2.JSONReader: java.lang.String info(java.lang.String)>("input not end");

        specialinvoke $r15.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String)>($r9);

        throw $r15;

     label5:
        return $r7;

     label6:
        $r10 := @caughtexception;

        $r17 = (com.alibaba.fastjson2.JSONException) $r10;

        $r11 = virtualinvoke $r17.<com.alibaba.fastjson2.JSONException: java.lang.Throwable getCause()>();

        r14 = $r11;

        if $r11 != null goto label7;

        r14 = $r10;

     label7:
        $r16 = new com.alibaba.fastjson.JSONException;

        $r18 = (com.alibaba.fastjson2.JSONException) $r10;

        $r13 = virtualinvoke $r18.<com.alibaba.fastjson2.JSONException: java.lang.String getMessage()>();

        specialinvoke $r16.<com.alibaba.fastjson.JSONException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r14);

        throw $r16;

        catch com.alibaba.fastjson2.JSONException from label3 to label5 with label6;
    }

Method: <com.alibaba.fastjson.JSON: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.serializer.SerializerFeature $r13, $r14, $r15, $r16;
        com.alibaba.fastjson2.modules.ObjectWriterModule $r30;
        java.util.Locale $r4;
        com.alibaba.fastjson.Fastjson1xReaderModule $r27;
        boolean z0;
        java.util.TimeZone $r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        com.alibaba.fastjson2.writer.ObjectWriterProvider $r25;
        com.alibaba.fastjson.Fastjson1xWriterModule $r28;
        com.alibaba.fastjson2.reader.ObjectReaderProvider $r20;
        com.alibaba.fastjson.JSONObject$Creator $r18;
        java.util.function.Supplier $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.alibaba.fastjson2.support.AwtWriterModule $r23;
        com.alibaba.fastjson2.modules.ObjectReaderModule $r29;
        com.alibaba.fastjson2.support.AwtRederModule $r24;
        com.alibaba.fastjson.JSON$Cache $r26;
        com.alibaba.fastjson.parser.Feature $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE> = $r0;

        $r26 = new com.alibaba.fastjson.JSON$Cache;

        specialinvoke $r26.<com.alibaba.fastjson.JSON$Cache: void <init>()>();

        <com.alibaba.fastjson.JSON: com.alibaba.fastjson.JSON$Cache CACHE> = $r26;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/alibaba/fastjson/JSON$Cache;", class "[C", "chars");

        <com.alibaba.fastjson.JSON: java.util.concurrent.atomic.AtomicReferenceFieldUpdater CHARS_UPDATER> = $r2;

        $r3 = <com.alibaba.fastjson.JSON: java.util.TimeZone DEFAULT_TIME_ZONE>;

        <com.alibaba.fastjson.JSON: java.util.TimeZone defaultTimeZone> = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <com.alibaba.fastjson.JSON: java.util.Locale defaultLocale> = $r4;

        <com.alibaba.fastjson.JSON: java.lang.String DEFAULT_TYPE_KEY> = "@type";

        <com.alibaba.fastjson.JSON: java.lang.String DEFFAULT_DATE_FORMAT> = "yyyy-MM-dd HH:mm:ss";

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $i0 = virtualinvoke $r5.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i12 = 0 | $i0;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $i1 = virtualinvoke $r6.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i13 = i12 | $i1;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $i2 = virtualinvoke $r7.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i14 = i13 | $i2;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $i3 = virtualinvoke $r8.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i15 = i14 | $i3;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $i4 = virtualinvoke $r9.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i16 = i15 | $i4;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $i5 = virtualinvoke $r10.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i17 = i16 | $i5;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $i6 = virtualinvoke $r11.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i18 = i17 | $i6;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $i7 = virtualinvoke $r12.<com.alibaba.fastjson.parser.Feature: int getMask()>();

        i19 = i18 | $i7;

        <com.alibaba.fastjson.JSON: int DEFAULT_PARSER_FEATURE> = i19;

        $r13 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature QuoteFieldNames>;

        $i8 = virtualinvoke $r13.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i20 = 0 | $i8;

        $r14 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SkipTransientField>;

        $i9 = virtualinvoke $r14.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i21 = i20 | $i9;

        $r15 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature WriteEnumUsingName>;

        $i10 = virtualinvoke $r15.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i22 = i21 | $i10;

        $r16 = <com.alibaba.fastjson.serializer.SerializerFeature: com.alibaba.fastjson.serializer.SerializerFeature SortField>;

        $i11 = virtualinvoke $r16.<com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>();

        i23 = i22 | $i11;

        <com.alibaba.fastjson.JSON: int DEFAULT_GENERATE_FEATURE> = i23;

        $r17 = staticinvoke <com.alibaba.fastjson.JSON$init__529: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier arraySupplier> = $r17;

        $r18 = <com.alibaba.fastjson.JSONObject$Creator: com.alibaba.fastjson.JSONObject$Creator INSTANCE>;

        <com.alibaba.fastjson.JSON: java.util.function.Supplier defaultSupplier> = $r18;

        $r19 = staticinvoke <com.alibaba.fastjson.JSON$lambda_static_0__530: java.util.function.Supplier bootstrap$()>();

        <com.alibaba.fastjson.JSON: java.util.function.Supplier orderedSupplier> = $r19;

        z0 = <com.alibaba.fastjson2.util.JDKUtils: boolean ANDROID>;

        $r20 = staticinvoke <com.alibaba.fastjson2.JSONFactory: com.alibaba.fastjson2.reader.ObjectReaderProvider getDefaultObjectReaderProvider()>();

        if z0 != 0 goto label1;

        $r24 = <com.alibaba.fastjson2.support.AwtRederModule: com.alibaba.fastjson2.support.AwtRederModule INSTANCE>;

        $r29 = (com.alibaba.fastjson2.modules.ObjectReaderModule) $r24;

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r29);

     label1:
        $r27 = new com.alibaba.fastjson.Fastjson1xReaderModule;

        specialinvoke $r27.<com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>($r20);

        virtualinvoke $r20.<com.alibaba.fastjson2.reader.ObjectReaderProvider: boolean register(com.alibaba.fastjson2.modules.ObjectReaderModule)>($r27);

        $r25 = <com.alibaba.fastjson.serializer.SerializeConfig: com.alibaba.fastjson2.writer.ObjectWriterProvider DEFAULT_PROVIDER>;

        if z0 != 0 goto label2;

        $r23 = <com.alibaba.fastjson2.support.AwtWriterModule: com.alibaba.fastjson2.support.AwtWriterModule INSTANCE>;

        $r30 = (com.alibaba.fastjson2.modules.ObjectWriterModule) $r23;

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r30);

     label2:
        $r28 = new com.alibaba.fastjson.Fastjson1xWriterModule;

        specialinvoke $r28.<com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>($r25);

        virtualinvoke $r25.<com.alibaba.fastjson2.writer.ObjectWriterProvider: boolean register(com.alibaba.fastjson2.modules.ObjectWriterModule)>($r28);

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.JSON$Cache: void <init>()>
    void <init>()
    {
        com.alibaba.fastjson.JSON$Cache r0;

        r0 := @this: com.alibaba.fastjson.JSON$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        $i0 = r0.<com.alibaba.fastjson.parser.Feature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.serializer.SerializerFeature: int getMask()>
    public final int getMask()
    {
        int $i0;
        com.alibaba.fastjson.serializer.SerializerFeature r0;

        r0 := @this: com.alibaba.fastjson.serializer.SerializerFeature;

        $i0 = r0.<com.alibaba.fastjson.serializer.SerializerFeature: int mask>;

        return $i0;
    }

Method: <com.alibaba.fastjson.Fastjson1xReaderModule: void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)>
    public void <init>(com.alibaba.fastjson2.reader.ObjectReaderProvider)
    {
        com.alibaba.fastjson.Fastjson1xReaderModule r0;
        com.alibaba.fastjson2.reader.ObjectReaderProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xReaderModule;

        r1 := @parameter0: com.alibaba.fastjson2.reader.ObjectReaderProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xReaderModule: com.alibaba.fastjson2.reader.ObjectReaderProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.Fastjson1xWriterModule: void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)>
    public void <init>(com.alibaba.fastjson2.writer.ObjectWriterProvider)
    {
        com.alibaba.fastjson.Fastjson1xWriterModule r0;
        com.alibaba.fastjson2.writer.ObjectWriterProvider r1;

        r0 := @this: com.alibaba.fastjson.Fastjson1xWriterModule;

        r1 := @parameter0: com.alibaba.fastjson2.writer.ObjectWriterProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.alibaba.fastjson.Fastjson1xWriterModule: com.alibaba.fastjson2.writer.ObjectWriterProvider provider> = r1;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <clinit>()>
    static void <clinit>()
    {
        com.alibaba.fastjson.parser.Feature[] $r28;
        com.alibaba.fastjson.parser.Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r0.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AutoCloseSource", 0);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource> = $r0;

        $r1 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r1.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowComment", 1);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment> = $r1;

        $r2 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r2.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowUnQuotedFieldNames", 2);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames> = $r2;

        $r3 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r3.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowSingleQuotes", 3);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes> = $r3;

        $r4 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r4.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InternFieldNames", 4);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames> = $r4;

        $r5 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r5.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowISO8601DateFormat", 5);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat> = $r5;

        $r6 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r6.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("AllowArbitraryCommas", 6);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas> = $r6;

        $r7 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r7.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseBigDecimal", 7);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal> = $r7;

        $r8 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r8.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreNotMatch", 8);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch> = $r8;

        $r9 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r9.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SortFeidFastMatch", 9);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch> = $r9;

        $r10 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r10.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableASM", 10);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM> = $r10;

        $r11 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r11.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableCircularReferenceDetect", 11);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect> = $r11;

        $r12 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r12.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("InitStringFieldAsEmpty", 12);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty> = $r12;

        $r13 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r13.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportArrayToBean", 13);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean> = $r13;

        $r14 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r14.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("OrderedField", 14);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField> = $r14;

        $r15 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r15.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableSpecialKeyDetect", 15);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect> = $r15;

        $r16 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r16.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseObjectArray", 16);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray> = $r16;

        $r17 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r17.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportNonPublicField", 17);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField> = $r17;

        $r18 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r18.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("IgnoreAutoType", 18);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType> = $r18;

        $r19 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r19.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("DisableFieldSmartMatch", 19);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch> = $r19;

        $r20 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r20.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportAutoType", 20);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType> = $r20;

        $r21 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r21.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("NonStringKeyAsString", 21);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString> = $r21;

        $r22 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r22.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("CustomMapDeserializer", 22);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer> = $r22;

        $r23 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r23.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnEnumNotMatch", 23);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch> = $r23;

        $r24 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r24.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("TrimStringFieldValue", 24);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue> = $r24;

        $r25 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r25.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("SupportClassForName", 25);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName> = $r25;

        $r26 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r26.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("ErrorOnNotSupportAutoType", 26);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType> = $r26;

        $r27 = new com.alibaba.fastjson.parser.Feature;

        specialinvoke $r27.<com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>("UseNativeJavaObject", 27);

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject> = $r27;

        $r28 = staticinvoke <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>();

        <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $VALUES> = $r28;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature[] $values()>
    private static com.alibaba.fastjson.parser.Feature[] $values()
    {
        com.alibaba.fastjson.parser.Feature[] $r0;
        com.alibaba.fastjson.parser.Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        $r0 = newarray (com.alibaba.fastjson.parser.Feature)[28];

        $r1 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AutoCloseSource>;

        $r0[0] = $r1;

        $r2 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowComment>;

        $r0[1] = $r2;

        $r3 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowUnQuotedFieldNames>;

        $r0[2] = $r3;

        $r4 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowSingleQuotes>;

        $r0[3] = $r4;

        $r5 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InternFieldNames>;

        $r0[4] = $r5;

        $r6 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowISO8601DateFormat>;

        $r0[5] = $r6;

        $r7 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature AllowArbitraryCommas>;

        $r0[6] = $r7;

        $r8 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseBigDecimal>;

        $r0[7] = $r8;

        $r9 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreNotMatch>;

        $r0[8] = $r9;

        $r10 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SortFeidFastMatch>;

        $r0[9] = $r10;

        $r11 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableASM>;

        $r0[10] = $r11;

        $r12 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableCircularReferenceDetect>;

        $r0[11] = $r12;

        $r13 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature InitStringFieldAsEmpty>;

        $r0[12] = $r13;

        $r14 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportArrayToBean>;

        $r0[13] = $r14;

        $r15 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature OrderedField>;

        $r0[14] = $r15;

        $r16 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableSpecialKeyDetect>;

        $r0[15] = $r16;

        $r17 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseObjectArray>;

        $r0[16] = $r17;

        $r18 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportNonPublicField>;

        $r0[17] = $r18;

        $r19 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature IgnoreAutoType>;

        $r0[18] = $r19;

        $r20 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature DisableFieldSmartMatch>;

        $r0[19] = $r20;

        $r21 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportAutoType>;

        $r0[20] = $r21;

        $r22 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature NonStringKeyAsString>;

        $r0[21] = $r22;

        $r23 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature CustomMapDeserializer>;

        $r0[22] = $r23;

        $r24 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnEnumNotMatch>;

        $r0[23] = $r24;

        $r25 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature TrimStringFieldValue>;

        $r0[24] = $r25;

        $r26 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature SupportClassForName>;

        $r0[25] = $r26;

        $r27 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature ErrorOnNotSupportAutoType>;

        $r0[26] = $r27;

        $r28 = <com.alibaba.fastjson.parser.Feature: com.alibaba.fastjson.parser.Feature UseNativeJavaObject>;

        $r0[27] = $r28;

        return $r0;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

        r0 := @this: com.alibaba.fastjson.parser.Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $i1 = virtualinvoke r0.<com.alibaba.fastjson.parser.Feature: int ordinal()>();

        $i2 = 1 << $i1;

        r0.<com.alibaba.fastjson.parser.Feature: int mask> = $i2;

        return;
    }

Method: <com.alibaba.fastjson.parser.Feature: void <init>(java.lang.String,int)>
    private void <init>(java.lang.String, int)
    {
        int i0, $i1, $i2;
        java.lang.String r1;
        com.alibaba.fastjson.parser.Feature r0;

=== assistant ===
To analyze the method `<com.alibaba.fastjson.JSON: java.lang.Object parseObject(java.lang.String,java.lang.Class,com.alibaba.fastjson.parser.Feature[])>`, we need to follow the data flow and conditions within the method. Let's break down the steps:

1. **Parameter Initialization:**
   - `r0` is initialized with `p1` (the first parameter, `java.lang.String`).
   - `r5` is initialized with `p2` (the second parameter, `java.lang.Class`).
   - `r2` is initialized with `p3` (the third parameter, `com.alibaba.fastjson.parser.Feature[]`).

2. **Null and Empty Check:**
   - If `r0` (i.e., `p1`) is `null` or empty, the method returns `null`. This is a conditional return based on the state of `p1`.

3. **Object Reader and JSON Parsing:**
   - `JSONReader` is created using `r0` and a context created with `r2`.
   - An `ObjectReader` is obtained using `r5`.
   - The `ObjectReader` reads an object from the `JSONReader`, resulting in `$r7`.

4. **Return Value:**
   - If `$r7` is not `null`, it is used in a resolve task, and the method eventually returns `$r7`.
   - If `$r7` is `null`, the method still returns `$r7`.

5. **Exception Handling:**
   - If a `JSONException` occurs, it is caught, and a new `JSONException` is thrown with additional information.

Based on this analysis, the data flow primarily involves the transformation of `p1` into the return value, `$r7`, through the parsing process. The flow is conditional on `p1` not being `null` or empty.

Here is the XML summary of the method:

```xml
<PropagationRule>
    <RuleID>RULE-ID-PROPAGATION-00000001</RuleID>
    <FunctionIdentifier>
        <NamespaceName>
            <Value>com.alibaba.fastjson</Value>
        </NamespaceName>
        <ClassName>
            <Value>JSON</Value>
        </ClassName>
        <FunctionName>
            <Value>parseObject</Value>
        </FunctionName>
        <ApplyTo implements="true" overrides="true" extends="true"/>
    </FunctionIdentifier>
    <Parameters>
        <ParamType>java.lang.String</ParamType>
        <ParamType>java.lang.Class</ParamType>
        <ParamType>com.alibaba.fastjson.parser.Feature[]</ParamType>
    </Parameters>
    <HasPropagation>true</HasPropagation>
    <Condition>p1 != null && !p1.isEmpty()</Condition>
    <InArguments>0</InArguments>
    <OutArguments>return</OutArguments>
    <Comment>
    - The data flow shows that `p1` (`java.lang.String`) is transformed into the return value through JSON parsing.
    - The flow is conditional on `p1` not being `null` or empty.
    </Comment>
</PropagationRule>
```

This XML captures the essential data flow from the input parameter `p1` to the return value, conditioned on `p1` being non-null and non-empty.
